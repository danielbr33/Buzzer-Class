
Buzzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007190  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08007330  08007330  00017330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800758c  0800758c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800758c  0800758c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800758c  0800758c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800758c  0800758c  0001758c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007590  08007590  00017590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001074  200001e4  08007778  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001258  08007778  00021258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160db  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031b9  00000000  00000000  000362ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001000  00000000  00000000  000394a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e88  00000000  00000000  0003a4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026130  00000000  00000000  0003b330  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f9b1  00000000  00000000  00061460  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d162a  00000000  00000000  00070e11  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014243b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004868  00000000  00000000  001424b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007318 	.word	0x08007318

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08007318 	.word	0x08007318

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_d2f>:
 8000558:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800055c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000560:	bf24      	itt	cs
 8000562:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000566:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800056a:	d90d      	bls.n	8000588 <__aeabi_d2f+0x30>
 800056c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000570:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000574:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000578:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800057c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000580:	bf08      	it	eq
 8000582:	f020 0001 	biceq.w	r0, r0, #1
 8000586:	4770      	bx	lr
 8000588:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800058c:	d121      	bne.n	80005d2 <__aeabi_d2f+0x7a>
 800058e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000592:	bfbc      	itt	lt
 8000594:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000598:	4770      	bxlt	lr
 800059a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80005a2:	f1c2 0218 	rsb	r2, r2, #24
 80005a6:	f1c2 0c20 	rsb	ip, r2, #32
 80005aa:	fa10 f30c 	lsls.w	r3, r0, ip
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	bf18      	it	ne
 80005b4:	f040 0001 	orrne.w	r0, r0, #1
 80005b8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005bc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005c0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005c4:	ea40 000c 	orr.w	r0, r0, ip
 80005c8:	fa23 f302 	lsr.w	r3, r3, r2
 80005cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005d0:	e7cc      	b.n	800056c <__aeabi_d2f+0x14>
 80005d2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005d6:	d107      	bne.n	80005e8 <__aeabi_d2f+0x90>
 80005d8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005dc:	bf1e      	ittt	ne
 80005de:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005e2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005e6:	4770      	bxne	lr
 80005e8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005ec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop

080005f8 <_ZN6Buzzer4InitEv>:
#include "cmsis_os.h"
#include "math.h"

#define TIM1_FREQ 1000000

void Buzzer::Init(void){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
	SetPWMFrequency(1000.f);
 8000600:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8000824 <_ZN6Buzzer4InitEv+0x22c>
 8000604:	6878      	ldr	r0, [r7, #4]
 8000606:	f000 ff29 	bl	800145c <_ZN6Buzzer15SetPWMFrequencyEf>
	Mute();
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 ff4e 	bl	80014ac <_ZN6Buzzer4MuteEv>
	HAL_TIM_PWM_Start(timer, channel);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000618:	4619      	mov	r1, r3
 800061a:	4610      	mov	r0, r2
 800061c:	f003 fb1e 	bl	8003c5c <HAL_TIM_PWM_Start>

	osDelay(500);
 8000620:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000624:	f004 fd37 	bl	8005096 <osDelay>

	uint8_t tempMicro = 2;
 8000628:	2302      	movs	r3, #2
 800062a:	723b      	strb	r3, [r7, #8]

	if (tempMicro%3 == 0){
 800062c:	7a3a      	ldrb	r2, [r7, #8]
 800062e:	4b7e      	ldr	r3, [pc, #504]	; (8000828 <_ZN6Buzzer4InitEv+0x230>)
 8000630:	fba3 1302 	umull	r1, r3, r3, r2
 8000634:	0859      	lsrs	r1, r3, #1
 8000636:	460b      	mov	r3, r1
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	440b      	add	r3, r1
 800063c:	1ad3      	subs	r3, r2, r3
 800063e:	b2db      	uxtb	r3, r3
 8000640:	2b00      	cmp	r3, #0
 8000642:	d168      	bne.n	8000716 <_ZN6Buzzer4InitEv+0x11e>
	//if (tools.GetMicros() % 3 == 0) {
		for (uint8_t i = 0; i < 8; i++) {
 8000644:	2300      	movs	r3, #0
 8000646:	73fb      	strb	r3, [r7, #15]
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	2b07      	cmp	r3, #7
 800064c:	d81b      	bhi.n	8000686 <_ZN6Buzzer4InitEv+0x8e>
			Tone("C6", 50);
 800064e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000652:	2300      	movs	r3, #0
 8000654:	2232      	movs	r2, #50	; 0x32
 8000656:	4975      	ldr	r1, [pc, #468]	; (800082c <_ZN6Buzzer4InitEv+0x234>)
 8000658:	6878      	ldr	r0, [r7, #4]
 800065a:	f000 ff51 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("E6", 50);
 800065e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000662:	2300      	movs	r3, #0
 8000664:	2232      	movs	r2, #50	; 0x32
 8000666:	4972      	ldr	r1, [pc, #456]	; (8000830 <_ZN6Buzzer4InitEv+0x238>)
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f000 ff49 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("A6", 100, 126);
 800066e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000672:	237e      	movs	r3, #126	; 0x7e
 8000674:	2264      	movs	r2, #100	; 0x64
 8000676:	496f      	ldr	r1, [pc, #444]	; (8000834 <_ZN6Buzzer4InitEv+0x23c>)
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f000 ff41 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		for (uint8_t i = 0; i < 8; i++) {
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	3301      	adds	r3, #1
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	e7e0      	b.n	8000648 <_ZN6Buzzer4InitEv+0x50>
		}
		for (uint8_t i = 0; i < 3; i++) {
 8000686:	2300      	movs	r3, #0
 8000688:	73bb      	strb	r3, [r7, #14]
 800068a:	7bbb      	ldrb	r3, [r7, #14]
 800068c:	2b02      	cmp	r3, #2
 800068e:	d81b      	bhi.n	80006c8 <_ZN6Buzzer4InitEv+0xd0>
			Tone("B5", 50);
 8000690:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000694:	2300      	movs	r3, #0
 8000696:	2232      	movs	r2, #50	; 0x32
 8000698:	4967      	ldr	r1, [pc, #412]	; (8000838 <_ZN6Buzzer4InitEv+0x240>)
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f000 ff30 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("E6", 50);
 80006a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80006a4:	2300      	movs	r3, #0
 80006a6:	2232      	movs	r2, #50	; 0x32
 80006a8:	4961      	ldr	r1, [pc, #388]	; (8000830 <_ZN6Buzzer4InitEv+0x238>)
 80006aa:	6878      	ldr	r0, [r7, #4]
 80006ac:	f000 ff28 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("A6", 100, 126);
 80006b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80006b4:	237e      	movs	r3, #126	; 0x7e
 80006b6:	2264      	movs	r2, #100	; 0x64
 80006b8:	495e      	ldr	r1, [pc, #376]	; (8000834 <_ZN6Buzzer4InitEv+0x23c>)
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f000 ff20 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		for (uint8_t i = 0; i < 3; i++) {
 80006c0:	7bbb      	ldrb	r3, [r7, #14]
 80006c2:	3301      	adds	r3, #1
 80006c4:	73bb      	strb	r3, [r7, #14]
 80006c6:	e7e0      	b.n	800068a <_ZN6Buzzer4InitEv+0x92>
		}
		for (uint8_t i = 0; i < 5; i++) {
 80006c8:	2300      	movs	r3, #0
 80006ca:	737b      	strb	r3, [r7, #13]
 80006cc:	7b7b      	ldrb	r3, [r7, #13]
 80006ce:	2b04      	cmp	r3, #4
 80006d0:	d81b      	bhi.n	800070a <_ZN6Buzzer4InitEv+0x112>
			Tone("B5", 50);
 80006d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80006d6:	2300      	movs	r3, #0
 80006d8:	2232      	movs	r2, #50	; 0x32
 80006da:	4957      	ldr	r1, [pc, #348]	; (8000838 <_ZN6Buzzer4InitEv+0x240>)
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f000 ff0f 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("E6", 50);
 80006e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80006e6:	2300      	movs	r3, #0
 80006e8:	2232      	movs	r2, #50	; 0x32
 80006ea:	4951      	ldr	r1, [pc, #324]	; (8000830 <_ZN6Buzzer4InitEv+0x238>)
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 ff07 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("G6", 100, 126);
 80006f2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80006f6:	237e      	movs	r3, #126	; 0x7e
 80006f8:	2264      	movs	r2, #100	; 0x64
 80006fa:	4950      	ldr	r1, [pc, #320]	; (800083c <_ZN6Buzzer4InitEv+0x244>)
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f000 feff 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		for (uint8_t i = 0; i < 5; i++) {
 8000702:	7b7b      	ldrb	r3, [r7, #13]
 8000704:	3301      	adds	r3, #1
 8000706:	737b      	strb	r3, [r7, #13]
 8000708:	e7e0      	b.n	80006cc <_ZN6Buzzer4InitEv+0xd4>
		}
		osDelay(300);
 800070a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800070e:	f004 fcc2 	bl	8005096 <osDelay>
	Tone("A6", 75, 225);
	Tone("F6", 75, 75);
	Tone("A6", 75, 225);
	Tone("C7", 75, 525);
	Tone("C6", 75, 225);*/
}
 8000712:	f000 bc35 	b.w	8000f80 <_ZN6Buzzer4InitEv+0x988>
	else if (tempMicro%2 ==0){
 8000716:	7a3b      	ldrb	r3, [r7, #8]
 8000718:	f003 0301 	and.w	r3, r3, #1
 800071c:	2b00      	cmp	r3, #0
 800071e:	f040 8357 	bne.w	8000dd0 <_ZN6Buzzer4InitEv+0x7d8>
		for (uint8_t i = 0; i < 5; i++) {
 8000722:	2300      	movs	r3, #0
 8000724:	733b      	strb	r3, [r7, #12]
 8000726:	7b3b      	ldrb	r3, [r7, #12]
 8000728:	2b04      	cmp	r3, #4
 800072a:	d823      	bhi.n	8000774 <_ZN6Buzzer4InitEv+0x17c>
			Tone("D5", 40);
 800072c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000730:	2300      	movs	r3, #0
 8000732:	2228      	movs	r2, #40	; 0x28
 8000734:	4942      	ldr	r1, [pc, #264]	; (8000840 <_ZN6Buzzer4InitEv+0x248>)
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f000 fee2 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("E5", 40);
 800073c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000740:	2300      	movs	r3, #0
 8000742:	2228      	movs	r2, #40	; 0x28
 8000744:	493f      	ldr	r1, [pc, #252]	; (8000844 <_ZN6Buzzer4InitEv+0x24c>)
 8000746:	6878      	ldr	r0, [r7, #4]
 8000748:	f000 feda 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("G5", 40);
 800074c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000750:	2300      	movs	r3, #0
 8000752:	2228      	movs	r2, #40	; 0x28
 8000754:	493c      	ldr	r1, [pc, #240]	; (8000848 <_ZN6Buzzer4InitEv+0x250>)
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f000 fed2 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("D6", 40, 50);
 800075c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000760:	2332      	movs	r3, #50	; 0x32
 8000762:	2228      	movs	r2, #40	; 0x28
 8000764:	4939      	ldr	r1, [pc, #228]	; (800084c <_ZN6Buzzer4InitEv+0x254>)
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f000 feca 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		for (uint8_t i = 0; i < 5; i++) {
 800076c:	7b3b      	ldrb	r3, [r7, #12]
 800076e:	3301      	adds	r3, #1
 8000770:	733b      	strb	r3, [r7, #12]
 8000772:	e7d8      	b.n	8000726 <_ZN6Buzzer4InitEv+0x12e>
		osDelay(210);
 8000774:	20d2      	movs	r0, #210	; 0xd2
 8000776:	f004 fc8e 	bl	8005096 <osDelay>
		for (uint8_t i = 0; i < 5; i++) {
 800077a:	2300      	movs	r3, #0
 800077c:	72fb      	strb	r3, [r7, #11]
 800077e:	7afb      	ldrb	r3, [r7, #11]
 8000780:	2b04      	cmp	r3, #4
 8000782:	d823      	bhi.n	80007cc <_ZN6Buzzer4InitEv+0x1d4>
			Tone("D5", 40);
 8000784:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000788:	2300      	movs	r3, #0
 800078a:	2228      	movs	r2, #40	; 0x28
 800078c:	492c      	ldr	r1, [pc, #176]	; (8000840 <_ZN6Buzzer4InitEv+0x248>)
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f000 feb6 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("E5", 40);
 8000794:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000798:	2300      	movs	r3, #0
 800079a:	2228      	movs	r2, #40	; 0x28
 800079c:	4929      	ldr	r1, [pc, #164]	; (8000844 <_ZN6Buzzer4InitEv+0x24c>)
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f000 feae 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("G5", 40);
 80007a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80007a8:	2300      	movs	r3, #0
 80007aa:	2228      	movs	r2, #40	; 0x28
 80007ac:	4926      	ldr	r1, [pc, #152]	; (8000848 <_ZN6Buzzer4InitEv+0x250>)
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f000 fea6 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("D6", 40, 50);
 80007b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80007b8:	2332      	movs	r3, #50	; 0x32
 80007ba:	2228      	movs	r2, #40	; 0x28
 80007bc:	4923      	ldr	r1, [pc, #140]	; (800084c <_ZN6Buzzer4InitEv+0x254>)
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 fe9e 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		for (uint8_t i = 0; i < 5; i++) {
 80007c4:	7afb      	ldrb	r3, [r7, #11]
 80007c6:	3301      	adds	r3, #1
 80007c8:	72fb      	strb	r3, [r7, #11]
 80007ca:	e7d8      	b.n	800077e <_ZN6Buzzer4InitEv+0x186>
		osDelay(210);
 80007cc:	20d2      	movs	r0, #210	; 0xd2
 80007ce:	f004 fc62 	bl	8005096 <osDelay>
		for (uint8_t i = 0; i < 4; i++) {
 80007d2:	2300      	movs	r3, #0
 80007d4:	72bb      	strb	r3, [r7, #10]
 80007d6:	7abb      	ldrb	r3, [r7, #10]
 80007d8:	2b03      	cmp	r3, #3
 80007da:	d839      	bhi.n	8000850 <_ZN6Buzzer4InitEv+0x258>
			Tone("D5", 20);
 80007dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80007e0:	2300      	movs	r3, #0
 80007e2:	2214      	movs	r2, #20
 80007e4:	4916      	ldr	r1, [pc, #88]	; (8000840 <_ZN6Buzzer4InitEv+0x248>)
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f000 fe8a 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("E5", 20);
 80007ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80007f0:	2300      	movs	r3, #0
 80007f2:	2214      	movs	r2, #20
 80007f4:	4913      	ldr	r1, [pc, #76]	; (8000844 <_ZN6Buzzer4InitEv+0x24c>)
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f000 fe82 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("G5", 20);
 80007fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000800:	2300      	movs	r3, #0
 8000802:	2214      	movs	r2, #20
 8000804:	4910      	ldr	r1, [pc, #64]	; (8000848 <_ZN6Buzzer4InitEv+0x250>)
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f000 fe7a 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("D6", 20, 25);
 800080c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000810:	2319      	movs	r3, #25
 8000812:	2214      	movs	r2, #20
 8000814:	490d      	ldr	r1, [pc, #52]	; (800084c <_ZN6Buzzer4InitEv+0x254>)
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f000 fe72 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		for (uint8_t i = 0; i < 4; i++) {
 800081c:	7abb      	ldrb	r3, [r7, #10]
 800081e:	3301      	adds	r3, #1
 8000820:	72bb      	strb	r3, [r7, #10]
 8000822:	e7d8      	b.n	80007d6 <_ZN6Buzzer4InitEv+0x1de>
 8000824:	447a0000 	.word	0x447a0000
 8000828:	aaaaaaab 	.word	0xaaaaaaab
 800082c:	08007330 	.word	0x08007330
 8000830:	08007334 	.word	0x08007334
 8000834:	08007338 	.word	0x08007338
 8000838:	0800733c 	.word	0x0800733c
 800083c:	08007340 	.word	0x08007340
 8000840:	08007344 	.word	0x08007344
 8000844:	08007348 	.word	0x08007348
 8000848:	0800734c 	.word	0x0800734c
 800084c:	08007350 	.word	0x08007350
		Tone("D5", 40);
 8000850:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000854:	2300      	movs	r3, #0
 8000856:	2228      	movs	r2, #40	; 0x28
 8000858:	497c      	ldr	r1, [pc, #496]	; (8000a4c <_ZN6Buzzer4InitEv+0x454>)
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 fe50 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("E5", 40);
 8000860:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000864:	2300      	movs	r3, #0
 8000866:	2228      	movs	r2, #40	; 0x28
 8000868:	4979      	ldr	r1, [pc, #484]	; (8000a50 <_ZN6Buzzer4InitEv+0x458>)
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f000 fe48 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("G5", 40);
 8000870:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000874:	2300      	movs	r3, #0
 8000876:	2228      	movs	r2, #40	; 0x28
 8000878:	4976      	ldr	r1, [pc, #472]	; (8000a54 <_ZN6Buzzer4InitEv+0x45c>)
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f000 fe40 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("D6", 40, 50);
 8000880:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000884:	2332      	movs	r3, #50	; 0x32
 8000886:	2228      	movs	r2, #40	; 0x28
 8000888:	4973      	ldr	r1, [pc, #460]	; (8000a58 <_ZN6Buzzer4InitEv+0x460>)
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f000 fe38 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		osDelay(3360);
 8000890:	f44f 6052 	mov.w	r0, #3360	; 0xd20
 8000894:	f004 fbff 	bl	8005096 <osDelay>
		for (uint8_t i = 0; i < 2; i++) {
 8000898:	2300      	movs	r3, #0
 800089a:	727b      	strb	r3, [r7, #9]
 800089c:	7a7b      	ldrb	r3, [r7, #9]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	f200 80e2 	bhi.w	8000a68 <_ZN6Buzzer4InitEv+0x470>
			osDelay(210);
 80008a4:	20d2      	movs	r0, #210	; 0xd2
 80008a6:	f004 fbf6 	bl	8005096 <osDelay>
			Tone("B4", 40);
 80008aa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80008ae:	2300      	movs	r3, #0
 80008b0:	2228      	movs	r2, #40	; 0x28
 80008b2:	496a      	ldr	r1, [pc, #424]	; (8000a5c <_ZN6Buzzer4InitEv+0x464>)
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f000 fe23 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("D5", 40);
 80008ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80008be:	2300      	movs	r3, #0
 80008c0:	2228      	movs	r2, #40	; 0x28
 80008c2:	4962      	ldr	r1, [pc, #392]	; (8000a4c <_ZN6Buzzer4InitEv+0x454>)
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f000 fe1b 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("A5", 80, 50);
 80008ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80008ce:	2332      	movs	r3, #50	; 0x32
 80008d0:	2250      	movs	r2, #80	; 0x50
 80008d2:	4963      	ldr	r1, [pc, #396]	; (8000a60 <_ZN6Buzzer4InitEv+0x468>)
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f000 fe13 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("B4", 40);
 80008da:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80008de:	2300      	movs	r3, #0
 80008e0:	2228      	movs	r2, #40	; 0x28
 80008e2:	495e      	ldr	r1, [pc, #376]	; (8000a5c <_ZN6Buzzer4InitEv+0x464>)
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f000 fe0b 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("D5", 40);
 80008ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80008ee:	2300      	movs	r3, #0
 80008f0:	2228      	movs	r2, #40	; 0x28
 80008f2:	4956      	ldr	r1, [pc, #344]	; (8000a4c <_ZN6Buzzer4InitEv+0x454>)
 80008f4:	6878      	ldr	r0, [r7, #4]
 80008f6:	f000 fe03 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("A5", 80, 50);
 80008fa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80008fe:	2332      	movs	r3, #50	; 0x32
 8000900:	2250      	movs	r2, #80	; 0x50
 8000902:	4957      	ldr	r1, [pc, #348]	; (8000a60 <_ZN6Buzzer4InitEv+0x468>)
 8000904:	6878      	ldr	r0, [r7, #4]
 8000906:	f000 fdfb 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			osDelay(210);
 800090a:	20d2      	movs	r0, #210	; 0xd2
 800090c:	f004 fbc3 	bl	8005096 <osDelay>
			Tone("B4", 40);
 8000910:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000914:	2300      	movs	r3, #0
 8000916:	2228      	movs	r2, #40	; 0x28
 8000918:	4950      	ldr	r1, [pc, #320]	; (8000a5c <_ZN6Buzzer4InitEv+0x464>)
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f000 fdf0 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("D5", 40);
 8000920:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000924:	2300      	movs	r3, #0
 8000926:	2228      	movs	r2, #40	; 0x28
 8000928:	4948      	ldr	r1, [pc, #288]	; (8000a4c <_ZN6Buzzer4InitEv+0x454>)
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f000 fde8 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("G5", 80, 50);
 8000930:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000934:	2332      	movs	r3, #50	; 0x32
 8000936:	2250      	movs	r2, #80	; 0x50
 8000938:	4946      	ldr	r1, [pc, #280]	; (8000a54 <_ZN6Buzzer4InitEv+0x45c>)
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	f000 fde0 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("B4", 40);
 8000940:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000944:	2300      	movs	r3, #0
 8000946:	2228      	movs	r2, #40	; 0x28
 8000948:	4944      	ldr	r1, [pc, #272]	; (8000a5c <_ZN6Buzzer4InitEv+0x464>)
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f000 fdd8 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("D5", 40);
 8000950:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000954:	2300      	movs	r3, #0
 8000956:	2228      	movs	r2, #40	; 0x28
 8000958:	493c      	ldr	r1, [pc, #240]	; (8000a4c <_ZN6Buzzer4InitEv+0x454>)
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 fdd0 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("G5", 80, 50);
 8000960:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000964:	2332      	movs	r3, #50	; 0x32
 8000966:	2250      	movs	r2, #80	; 0x50
 8000968:	493a      	ldr	r1, [pc, #232]	; (8000a54 <_ZN6Buzzer4InitEv+0x45c>)
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f000 fdc8 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			osDelay(210);
 8000970:	20d2      	movs	r0, #210	; 0xd2
 8000972:	f004 fb90 	bl	8005096 <osDelay>
			Tone("B4", 40);
 8000976:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800097a:	2300      	movs	r3, #0
 800097c:	2228      	movs	r2, #40	; 0x28
 800097e:	4937      	ldr	r1, [pc, #220]	; (8000a5c <_ZN6Buzzer4InitEv+0x464>)
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f000 fdbd 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("D5", 40);
 8000986:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800098a:	2300      	movs	r3, #0
 800098c:	2228      	movs	r2, #40	; 0x28
 800098e:	492f      	ldr	r1, [pc, #188]	; (8000a4c <_ZN6Buzzer4InitEv+0x454>)
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f000 fdb5 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("F#5", 80, 50);
 8000996:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800099a:	2332      	movs	r3, #50	; 0x32
 800099c:	2250      	movs	r2, #80	; 0x50
 800099e:	4931      	ldr	r1, [pc, #196]	; (8000a64 <_ZN6Buzzer4InitEv+0x46c>)
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f000 fdad 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("B4", 40);
 80009a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80009aa:	2300      	movs	r3, #0
 80009ac:	2228      	movs	r2, #40	; 0x28
 80009ae:	492b      	ldr	r1, [pc, #172]	; (8000a5c <_ZN6Buzzer4InitEv+0x464>)
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f000 fda5 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("D5", 40);
 80009b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80009ba:	2300      	movs	r3, #0
 80009bc:	2228      	movs	r2, #40	; 0x28
 80009be:	4923      	ldr	r1, [pc, #140]	; (8000a4c <_ZN6Buzzer4InitEv+0x454>)
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 fd9d 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("F#5", 80, 50);
 80009c6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80009ca:	2332      	movs	r3, #50	; 0x32
 80009cc:	2250      	movs	r2, #80	; 0x50
 80009ce:	4925      	ldr	r1, [pc, #148]	; (8000a64 <_ZN6Buzzer4InitEv+0x46c>)
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f000 fd95 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			osDelay(210);
 80009d6:	20d2      	movs	r0, #210	; 0xd2
 80009d8:	f004 fb5d 	bl	8005096 <osDelay>
			Tone("B4", 40);
 80009dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80009e0:	2300      	movs	r3, #0
 80009e2:	2228      	movs	r2, #40	; 0x28
 80009e4:	491d      	ldr	r1, [pc, #116]	; (8000a5c <_ZN6Buzzer4InitEv+0x464>)
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f000 fd8a 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("D5", 40);
 80009ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80009f0:	2300      	movs	r3, #0
 80009f2:	2228      	movs	r2, #40	; 0x28
 80009f4:	4915      	ldr	r1, [pc, #84]	; (8000a4c <_ZN6Buzzer4InitEv+0x454>)
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f000 fd82 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("E5", 80, 50);
 80009fc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000a00:	2332      	movs	r3, #50	; 0x32
 8000a02:	2250      	movs	r2, #80	; 0x50
 8000a04:	4912      	ldr	r1, [pc, #72]	; (8000a50 <_ZN6Buzzer4InitEv+0x458>)
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f000 fd7a 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("B4", 40);
 8000a0c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000a10:	2300      	movs	r3, #0
 8000a12:	2228      	movs	r2, #40	; 0x28
 8000a14:	4911      	ldr	r1, [pc, #68]	; (8000a5c <_ZN6Buzzer4InitEv+0x464>)
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f000 fd72 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("D5", 40);
 8000a1c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000a20:	2300      	movs	r3, #0
 8000a22:	2228      	movs	r2, #40	; 0x28
 8000a24:	4909      	ldr	r1, [pc, #36]	; (8000a4c <_ZN6Buzzer4InitEv+0x454>)
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f000 fd6a 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("E5", 80, 50);
 8000a2c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000a30:	2332      	movs	r3, #50	; 0x32
 8000a32:	2250      	movs	r2, #80	; 0x50
 8000a34:	4906      	ldr	r1, [pc, #24]	; (8000a50 <_ZN6Buzzer4InitEv+0x458>)
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f000 fd62 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			osDelay(840);
 8000a3c:	f44f 7052 	mov.w	r0, #840	; 0x348
 8000a40:	f004 fb29 	bl	8005096 <osDelay>
		for (uint8_t i = 0; i < 2; i++) {
 8000a44:	7a7b      	ldrb	r3, [r7, #9]
 8000a46:	3301      	adds	r3, #1
 8000a48:	727b      	strb	r3, [r7, #9]
 8000a4a:	e727      	b.n	800089c <_ZN6Buzzer4InitEv+0x2a4>
 8000a4c:	08007344 	.word	0x08007344
 8000a50:	08007348 	.word	0x08007348
 8000a54:	0800734c 	.word	0x0800734c
 8000a58:	08007350 	.word	0x08007350
 8000a5c:	08007354 	.word	0x08007354
 8000a60:	08007358 	.word	0x08007358
 8000a64:	0800735c 	.word	0x0800735c
		osDelay(210);
 8000a68:	20d2      	movs	r0, #210	; 0xd2
 8000a6a:	f004 fb14 	bl	8005096 <osDelay>
		Tone("E5", 40);
 8000a6e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000a72:	2300      	movs	r3, #0
 8000a74:	2228      	movs	r2, #40	; 0x28
 8000a76:	49cd      	ldr	r1, [pc, #820]	; (8000dac <_ZN6Buzzer4InitEv+0x7b4>)
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f000 fd41 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("G5", 40);
 8000a7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000a82:	2300      	movs	r3, #0
 8000a84:	2228      	movs	r2, #40	; 0x28
 8000a86:	49ca      	ldr	r1, [pc, #808]	; (8000db0 <_ZN6Buzzer4InitEv+0x7b8>)
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 fd39 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("D6", 80, 50);
 8000a8e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000a92:	2332      	movs	r3, #50	; 0x32
 8000a94:	2250      	movs	r2, #80	; 0x50
 8000a96:	49c7      	ldr	r1, [pc, #796]	; (8000db4 <_ZN6Buzzer4InitEv+0x7bc>)
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f000 fd31 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("E5", 40);
 8000a9e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	2228      	movs	r2, #40	; 0x28
 8000aa6:	49c1      	ldr	r1, [pc, #772]	; (8000dac <_ZN6Buzzer4InitEv+0x7b4>)
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f000 fd29 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("G5", 40);
 8000aae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	2228      	movs	r2, #40	; 0x28
 8000ab6:	49be      	ldr	r1, [pc, #760]	; (8000db0 <_ZN6Buzzer4InitEv+0x7b8>)
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f000 fd21 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("D6", 80, 50);
 8000abe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000ac2:	2332      	movs	r3, #50	; 0x32
 8000ac4:	2250      	movs	r2, #80	; 0x50
 8000ac6:	49bb      	ldr	r1, [pc, #748]	; (8000db4 <_ZN6Buzzer4InitEv+0x7bc>)
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f000 fd19 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		osDelay(210);
 8000ace:	20d2      	movs	r0, #210	; 0xd2
 8000ad0:	f004 fae1 	bl	8005096 <osDelay>
		Tone("E5", 40);
 8000ad4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000ad8:	2300      	movs	r3, #0
 8000ada:	2228      	movs	r2, #40	; 0x28
 8000adc:	49b3      	ldr	r1, [pc, #716]	; (8000dac <_ZN6Buzzer4InitEv+0x7b4>)
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	f000 fd0e 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("G5", 40);
 8000ae4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000ae8:	2300      	movs	r3, #0
 8000aea:	2228      	movs	r2, #40	; 0x28
 8000aec:	49b0      	ldr	r1, [pc, #704]	; (8000db0 <_ZN6Buzzer4InitEv+0x7b8>)
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 fd06 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("C6", 80, 50);
 8000af4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000af8:	2332      	movs	r3, #50	; 0x32
 8000afa:	2250      	movs	r2, #80	; 0x50
 8000afc:	49ae      	ldr	r1, [pc, #696]	; (8000db8 <_ZN6Buzzer4InitEv+0x7c0>)
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f000 fcfe 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("E5", 40);
 8000b04:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000b08:	2300      	movs	r3, #0
 8000b0a:	2228      	movs	r2, #40	; 0x28
 8000b0c:	49a7      	ldr	r1, [pc, #668]	; (8000dac <_ZN6Buzzer4InitEv+0x7b4>)
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f000 fcf6 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("G5", 40);
 8000b14:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000b18:	2300      	movs	r3, #0
 8000b1a:	2228      	movs	r2, #40	; 0x28
 8000b1c:	49a4      	ldr	r1, [pc, #656]	; (8000db0 <_ZN6Buzzer4InitEv+0x7b8>)
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f000 fcee 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("C6", 80, 50);
 8000b24:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000b28:	2332      	movs	r3, #50	; 0x32
 8000b2a:	2250      	movs	r2, #80	; 0x50
 8000b2c:	49a2      	ldr	r1, [pc, #648]	; (8000db8 <_ZN6Buzzer4InitEv+0x7c0>)
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f000 fce6 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		osDelay(210);
 8000b34:	20d2      	movs	r0, #210	; 0xd2
 8000b36:	f004 faae 	bl	8005096 <osDelay>
		Tone("E5", 40);
 8000b3a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000b3e:	2300      	movs	r3, #0
 8000b40:	2228      	movs	r2, #40	; 0x28
 8000b42:	499a      	ldr	r1, [pc, #616]	; (8000dac <_ZN6Buzzer4InitEv+0x7b4>)
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f000 fcdb 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("G5", 40);
 8000b4a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000b4e:	2300      	movs	r3, #0
 8000b50:	2228      	movs	r2, #40	; 0x28
 8000b52:	4997      	ldr	r1, [pc, #604]	; (8000db0 <_ZN6Buzzer4InitEv+0x7b8>)
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f000 fcd3 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("B5", 80, 50);
 8000b5a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000b5e:	2332      	movs	r3, #50	; 0x32
 8000b60:	2250      	movs	r2, #80	; 0x50
 8000b62:	4996      	ldr	r1, [pc, #600]	; (8000dbc <_ZN6Buzzer4InitEv+0x7c4>)
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f000 fccb 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("E5", 40);
 8000b6a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000b6e:	2300      	movs	r3, #0
 8000b70:	2228      	movs	r2, #40	; 0x28
 8000b72:	498e      	ldr	r1, [pc, #568]	; (8000dac <_ZN6Buzzer4InitEv+0x7b4>)
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f000 fcc3 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("G5", 40);
 8000b7a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000b7e:	2300      	movs	r3, #0
 8000b80:	2228      	movs	r2, #40	; 0x28
 8000b82:	498b      	ldr	r1, [pc, #556]	; (8000db0 <_ZN6Buzzer4InitEv+0x7b8>)
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f000 fcbb 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("B5", 80, 50);
 8000b8a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000b8e:	2332      	movs	r3, #50	; 0x32
 8000b90:	2250      	movs	r2, #80	; 0x50
 8000b92:	498a      	ldr	r1, [pc, #552]	; (8000dbc <_ZN6Buzzer4InitEv+0x7c4>)
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f000 fcb3 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		osDelay(210);
 8000b9a:	20d2      	movs	r0, #210	; 0xd2
 8000b9c:	f004 fa7b 	bl	8005096 <osDelay>
		Tone("E5", 40);
 8000ba0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	2228      	movs	r2, #40	; 0x28
 8000ba8:	4980      	ldr	r1, [pc, #512]	; (8000dac <_ZN6Buzzer4InitEv+0x7b4>)
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f000 fca8 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("G5", 40);
 8000bb0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	2228      	movs	r2, #40	; 0x28
 8000bb8:	497d      	ldr	r1, [pc, #500]	; (8000db0 <_ZN6Buzzer4InitEv+0x7b8>)
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f000 fca0 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("A5", 80, 50);
 8000bc0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000bc4:	2332      	movs	r3, #50	; 0x32
 8000bc6:	2250      	movs	r2, #80	; 0x50
 8000bc8:	497d      	ldr	r1, [pc, #500]	; (8000dc0 <_ZN6Buzzer4InitEv+0x7c8>)
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f000 fc98 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("E5", 40);
 8000bd0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	2228      	movs	r2, #40	; 0x28
 8000bd8:	4974      	ldr	r1, [pc, #464]	; (8000dac <_ZN6Buzzer4InitEv+0x7b4>)
 8000bda:	6878      	ldr	r0, [r7, #4]
 8000bdc:	f000 fc90 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("G5", 40);
 8000be0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000be4:	2300      	movs	r3, #0
 8000be6:	2228      	movs	r2, #40	; 0x28
 8000be8:	4971      	ldr	r1, [pc, #452]	; (8000db0 <_ZN6Buzzer4InitEv+0x7b8>)
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f000 fc88 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("A5", 80, 50);
 8000bf0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000bf4:	2332      	movs	r3, #50	; 0x32
 8000bf6:	2250      	movs	r2, #80	; 0x50
 8000bf8:	4971      	ldr	r1, [pc, #452]	; (8000dc0 <_ZN6Buzzer4InitEv+0x7c8>)
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 fc80 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		osDelay(840);
 8000c00:	f44f 7052 	mov.w	r0, #840	; 0x348
 8000c04:	f004 fa47 	bl	8005096 <osDelay>
		osDelay(210);
 8000c08:	20d2      	movs	r0, #210	; 0xd2
 8000c0a:	f004 fa44 	bl	8005096 <osDelay>
		Tone("D#5", 40);
 8000c0e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000c12:	2300      	movs	r3, #0
 8000c14:	2228      	movs	r2, #40	; 0x28
 8000c16:	496b      	ldr	r1, [pc, #428]	; (8000dc4 <_ZN6Buzzer4InitEv+0x7cc>)
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f000 fc71 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("G5", 40);
 8000c1e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000c22:	2300      	movs	r3, #0
 8000c24:	2228      	movs	r2, #40	; 0x28
 8000c26:	4962      	ldr	r1, [pc, #392]	; (8000db0 <_ZN6Buzzer4InitEv+0x7b8>)
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 fc69 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("D6", 80, 50);
 8000c2e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000c32:	2332      	movs	r3, #50	; 0x32
 8000c34:	2250      	movs	r2, #80	; 0x50
 8000c36:	495f      	ldr	r1, [pc, #380]	; (8000db4 <_ZN6Buzzer4InitEv+0x7bc>)
 8000c38:	6878      	ldr	r0, [r7, #4]
 8000c3a:	f000 fc61 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("D#5", 40);
 8000c3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000c42:	2300      	movs	r3, #0
 8000c44:	2228      	movs	r2, #40	; 0x28
 8000c46:	495f      	ldr	r1, [pc, #380]	; (8000dc4 <_ZN6Buzzer4InitEv+0x7cc>)
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f000 fc59 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("G5", 40);
 8000c4e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000c52:	2300      	movs	r3, #0
 8000c54:	2228      	movs	r2, #40	; 0x28
 8000c56:	4956      	ldr	r1, [pc, #344]	; (8000db0 <_ZN6Buzzer4InitEv+0x7b8>)
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f000 fc51 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("D6", 80, 50);
 8000c5e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000c62:	2332      	movs	r3, #50	; 0x32
 8000c64:	2250      	movs	r2, #80	; 0x50
 8000c66:	4953      	ldr	r1, [pc, #332]	; (8000db4 <_ZN6Buzzer4InitEv+0x7bc>)
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f000 fc49 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		osDelay(210);
 8000c6e:	20d2      	movs	r0, #210	; 0xd2
 8000c70:	f004 fa11 	bl	8005096 <osDelay>
		Tone("D#5", 40);
 8000c74:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000c78:	2300      	movs	r3, #0
 8000c7a:	2228      	movs	r2, #40	; 0x28
 8000c7c:	4951      	ldr	r1, [pc, #324]	; (8000dc4 <_ZN6Buzzer4InitEv+0x7cc>)
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f000 fc3e 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("G5", 40);
 8000c84:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000c88:	2300      	movs	r3, #0
 8000c8a:	2228      	movs	r2, #40	; 0x28
 8000c8c:	4948      	ldr	r1, [pc, #288]	; (8000db0 <_ZN6Buzzer4InitEv+0x7b8>)
 8000c8e:	6878      	ldr	r0, [r7, #4]
 8000c90:	f000 fc36 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("C6", 80, 50);
 8000c94:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000c98:	2332      	movs	r3, #50	; 0x32
 8000c9a:	2250      	movs	r2, #80	; 0x50
 8000c9c:	4946      	ldr	r1, [pc, #280]	; (8000db8 <_ZN6Buzzer4InitEv+0x7c0>)
 8000c9e:	6878      	ldr	r0, [r7, #4]
 8000ca0:	f000 fc2e 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("D#5", 40);
 8000ca4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000ca8:	2300      	movs	r3, #0
 8000caa:	2228      	movs	r2, #40	; 0x28
 8000cac:	4945      	ldr	r1, [pc, #276]	; (8000dc4 <_ZN6Buzzer4InitEv+0x7cc>)
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f000 fc26 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("G5", 40);
 8000cb4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000cb8:	2300      	movs	r3, #0
 8000cba:	2228      	movs	r2, #40	; 0x28
 8000cbc:	493c      	ldr	r1, [pc, #240]	; (8000db0 <_ZN6Buzzer4InitEv+0x7b8>)
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f000 fc1e 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("C6", 80, 50);
 8000cc4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000cc8:	2332      	movs	r3, #50	; 0x32
 8000cca:	2250      	movs	r2, #80	; 0x50
 8000ccc:	493a      	ldr	r1, [pc, #232]	; (8000db8 <_ZN6Buzzer4InitEv+0x7c0>)
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f000 fc16 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		osDelay(210);
 8000cd4:	20d2      	movs	r0, #210	; 0xd2
 8000cd6:	f004 f9de 	bl	8005096 <osDelay>
		Tone("C5", 40);
 8000cda:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000cde:	2300      	movs	r3, #0
 8000ce0:	2228      	movs	r2, #40	; 0x28
 8000ce2:	4939      	ldr	r1, [pc, #228]	; (8000dc8 <_ZN6Buzzer4InitEv+0x7d0>)
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f000 fc0b 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("D#5", 40);
 8000cea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000cee:	2300      	movs	r3, #0
 8000cf0:	2228      	movs	r2, #40	; 0x28
 8000cf2:	4934      	ldr	r1, [pc, #208]	; (8000dc4 <_ZN6Buzzer4InitEv+0x7cc>)
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f000 fc03 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("A#5", 80, 50);
 8000cfa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000cfe:	2332      	movs	r3, #50	; 0x32
 8000d00:	2250      	movs	r2, #80	; 0x50
 8000d02:	4932      	ldr	r1, [pc, #200]	; (8000dcc <_ZN6Buzzer4InitEv+0x7d4>)
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f000 fbfb 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("C5", 40);
 8000d0a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000d0e:	2300      	movs	r3, #0
 8000d10:	2228      	movs	r2, #40	; 0x28
 8000d12:	492d      	ldr	r1, [pc, #180]	; (8000dc8 <_ZN6Buzzer4InitEv+0x7d0>)
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f000 fbf3 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("D#5", 40);
 8000d1a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000d1e:	2300      	movs	r3, #0
 8000d20:	2228      	movs	r2, #40	; 0x28
 8000d22:	4928      	ldr	r1, [pc, #160]	; (8000dc4 <_ZN6Buzzer4InitEv+0x7cc>)
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f000 fbeb 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("A#5", 80, 50);
 8000d2a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000d2e:	2332      	movs	r3, #50	; 0x32
 8000d30:	2250      	movs	r2, #80	; 0x50
 8000d32:	4926      	ldr	r1, [pc, #152]	; (8000dcc <_ZN6Buzzer4InitEv+0x7d4>)
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f000 fbe3 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		osDelay(210);
 8000d3a:	20d2      	movs	r0, #210	; 0xd2
 8000d3c:	f004 f9ab 	bl	8005096 <osDelay>
		Tone("C5", 40);
 8000d40:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000d44:	2300      	movs	r3, #0
 8000d46:	2228      	movs	r2, #40	; 0x28
 8000d48:	491f      	ldr	r1, [pc, #124]	; (8000dc8 <_ZN6Buzzer4InitEv+0x7d0>)
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 fbd8 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("D#5", 40);
 8000d50:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000d54:	2300      	movs	r3, #0
 8000d56:	2228      	movs	r2, #40	; 0x28
 8000d58:	491a      	ldr	r1, [pc, #104]	; (8000dc4 <_ZN6Buzzer4InitEv+0x7cc>)
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f000 fbd0 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("A5", 80, 50);
 8000d60:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000d64:	2332      	movs	r3, #50	; 0x32
 8000d66:	2250      	movs	r2, #80	; 0x50
 8000d68:	4915      	ldr	r1, [pc, #84]	; (8000dc0 <_ZN6Buzzer4InitEv+0x7c8>)
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f000 fbc8 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("C5", 40);
 8000d70:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000d74:	2300      	movs	r3, #0
 8000d76:	2228      	movs	r2, #40	; 0x28
 8000d78:	4913      	ldr	r1, [pc, #76]	; (8000dc8 <_ZN6Buzzer4InitEv+0x7d0>)
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f000 fbc0 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("D#5", 40);
 8000d80:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000d84:	2300      	movs	r3, #0
 8000d86:	2228      	movs	r2, #40	; 0x28
 8000d88:	490e      	ldr	r1, [pc, #56]	; (8000dc4 <_ZN6Buzzer4InitEv+0x7cc>)
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 fbb8 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("A5", 80, 50);
 8000d90:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000d94:	2332      	movs	r3, #50	; 0x32
 8000d96:	2250      	movs	r2, #80	; 0x50
 8000d98:	4909      	ldr	r1, [pc, #36]	; (8000dc0 <_ZN6Buzzer4InitEv+0x7c8>)
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f000 fbb0 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		osDelay(840);
 8000da0:	f44f 7052 	mov.w	r0, #840	; 0x348
 8000da4:	f004 f977 	bl	8005096 <osDelay>
}
 8000da8:	e0ea      	b.n	8000f80 <_ZN6Buzzer4InitEv+0x988>
 8000daa:	bf00      	nop
 8000dac:	08007348 	.word	0x08007348
 8000db0:	0800734c 	.word	0x0800734c
 8000db4:	08007350 	.word	0x08007350
 8000db8:	08007330 	.word	0x08007330
 8000dbc:	0800733c 	.word	0x0800733c
 8000dc0:	08007358 	.word	0x08007358
 8000dc4:	08007360 	.word	0x08007360
 8000dc8:	08007364 	.word	0x08007364
 8000dcc:	08007368 	.word	0x08007368
		Tone("A#5", 900);
 8000dd0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000dda:	496b      	ldr	r1, [pc, #428]	; (8000f88 <_ZN6Buzzer4InitEv+0x990>)
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f000 fb8f 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("F5", 150);
 8000de2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000de6:	2300      	movs	r3, #0
 8000de8:	2296      	movs	r2, #150	; 0x96
 8000dea:	4968      	ldr	r1, [pc, #416]	; (8000f8c <_ZN6Buzzer4InitEv+0x994>)
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f000 fb87 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("A#5", 150);
 8000df2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000df6:	2300      	movs	r3, #0
 8000df8:	2296      	movs	r2, #150	; 0x96
 8000dfa:	4963      	ldr	r1, [pc, #396]	; (8000f88 <_ZN6Buzzer4InitEv+0x990>)
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f000 fb7f 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("C6", 150);
 8000e02:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000e06:	2300      	movs	r3, #0
 8000e08:	2296      	movs	r2, #150	; 0x96
 8000e0a:	4961      	ldr	r1, [pc, #388]	; (8000f90 <_ZN6Buzzer4InitEv+0x998>)
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f000 fb77 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("C#6", 300);
 8000e12:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000e16:	2300      	movs	r3, #0
 8000e18:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e1c:	495d      	ldr	r1, [pc, #372]	; (8000f94 <_ZN6Buzzer4InitEv+0x99c>)
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f000 fb6e 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("C6", 150);
 8000e24:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000e28:	2300      	movs	r3, #0
 8000e2a:	2296      	movs	r2, #150	; 0x96
 8000e2c:	4958      	ldr	r1, [pc, #352]	; (8000f90 <_ZN6Buzzer4InitEv+0x998>)
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 fb66 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("A#5", 300);
 8000e34:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e3e:	4952      	ldr	r1, [pc, #328]	; (8000f88 <_ZN6Buzzer4InitEv+0x990>)
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 fb5d 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("C6", 300);
 8000e46:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e50:	494f      	ldr	r1, [pc, #316]	; (8000f90 <_ZN6Buzzer4InitEv+0x998>)
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 fb54 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("G#5", 1350);
 8000e58:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f240 5246 	movw	r2, #1350	; 0x546
 8000e62:	494d      	ldr	r1, [pc, #308]	; (8000f98 <_ZN6Buzzer4InitEv+0x9a0>)
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 fb4b 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("F6", 300);
 8000e6a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000e6e:	2300      	movs	r3, #0
 8000e70:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e74:	4949      	ldr	r1, [pc, #292]	; (8000f9c <_ZN6Buzzer4InitEv+0x9a4>)
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f000 fb42 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("D#6", 150);
 8000e7c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000e80:	2300      	movs	r3, #0
 8000e82:	2296      	movs	r2, #150	; 0x96
 8000e84:	4946      	ldr	r1, [pc, #280]	; (8000fa0 <_ZN6Buzzer4InitEv+0x9a8>)
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 fb3a 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("C#6", 300);
 8000e8c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000e90:	2300      	movs	r3, #0
 8000e92:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e96:	493f      	ldr	r1, [pc, #252]	; (8000f94 <_ZN6Buzzer4InitEv+0x99c>)
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 fb31 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("C6", 450);
 8000e9e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000ea8:	4939      	ldr	r1, [pc, #228]	; (8000f90 <_ZN6Buzzer4InitEv+0x998>)
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 fb28 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("A#5", 900);
 8000eb0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f44f 7261 	mov.w	r2, #900	; 0x384
 8000eba:	4933      	ldr	r1, [pc, #204]	; (8000f88 <_ZN6Buzzer4InitEv+0x990>)
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f000 fb1f 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("F5", 150);
 8000ec2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	2296      	movs	r2, #150	; 0x96
 8000eca:	4930      	ldr	r1, [pc, #192]	; (8000f8c <_ZN6Buzzer4InitEv+0x994>)
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f000 fb17 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("A#5", 150);
 8000ed2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	2296      	movs	r2, #150	; 0x96
 8000eda:	492b      	ldr	r1, [pc, #172]	; (8000f88 <_ZN6Buzzer4InitEv+0x990>)
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f000 fb0f 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("C6", 150);
 8000ee2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	2296      	movs	r2, #150	; 0x96
 8000eea:	4929      	ldr	r1, [pc, #164]	; (8000f90 <_ZN6Buzzer4InitEv+0x998>)
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f000 fb07 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("C#6", 300);
 8000ef2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000efc:	4925      	ldr	r1, [pc, #148]	; (8000f94 <_ZN6Buzzer4InitEv+0x99c>)
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f000 fafe 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("C6", 150);
 8000f04:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f08:	2300      	movs	r3, #0
 8000f0a:	2296      	movs	r2, #150	; 0x96
 8000f0c:	4920      	ldr	r1, [pc, #128]	; (8000f90 <_ZN6Buzzer4InitEv+0x998>)
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f000 faf6 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("C#6", 300);
 8000f14:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f1e:	491d      	ldr	r1, [pc, #116]	; (8000f94 <_ZN6Buzzer4InitEv+0x99c>)
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f000 faed 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("D#6", 300);
 8000f26:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f30:	491b      	ldr	r1, [pc, #108]	; (8000fa0 <_ZN6Buzzer4InitEv+0x9a8>)
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f000 fae4 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("G#5", 1350);
 8000f38:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f240 5246 	movw	r2, #1350	; 0x546
 8000f42:	4915      	ldr	r1, [pc, #84]	; (8000f98 <_ZN6Buzzer4InitEv+0x9a0>)
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f000 fadb 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("F6", 300);
 8000f4a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f54:	4911      	ldr	r1, [pc, #68]	; (8000f9c <_ZN6Buzzer4InitEv+0x9a4>)
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 fad2 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("F#6", 150);
 8000f5c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f60:	2300      	movs	r3, #0
 8000f62:	2296      	movs	r2, #150	; 0x96
 8000f64:	490f      	ldr	r1, [pc, #60]	; (8000fa4 <_ZN6Buzzer4InitEv+0x9ac>)
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 faca 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("F6", 300, 450);
 8000f6c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000f70:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 8000f74:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000f78:	4908      	ldr	r1, [pc, #32]	; (8000f9c <_ZN6Buzzer4InitEv+0x9a4>)
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f000 fac0 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	08007368 	.word	0x08007368
 8000f8c:	0800736c 	.word	0x0800736c
 8000f90:	08007330 	.word	0x08007330
 8000f94:	08007370 	.word	0x08007370
 8000f98:	08007374 	.word	0x08007374
 8000f9c:	08007378 	.word	0x08007378
 8000fa0:	0800737c 	.word	0x0800737c
 8000fa4:	08007380 	.word	0x08007380

08000fa8 <_ZN6Buzzer10SingleBeepENS_5SoundE>:


void Buzzer::SingleBeep(Sound sound){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	70fb      	strb	r3, [r7, #3]
	if (sound == Sound1){
 8000fb4:	78fb      	ldrb	r3, [r7, #3]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d118      	bne.n	8000fec <_ZN6Buzzer10SingleBeepENS_5SoundE+0x44>
		Tone("C6", 100);
 8000fba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	2264      	movs	r2, #100	; 0x64
 8000fc2:	492c      	ldr	r1, [pc, #176]	; (8001074 <_ZN6Buzzer10SingleBeepENS_5SoundE+0xcc>)
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 fa9b 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("F6", 100);
 8000fca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000fce:	2300      	movs	r3, #0
 8000fd0:	2264      	movs	r2, #100	; 0x64
 8000fd2:	4929      	ldr	r1, [pc, #164]	; (8001078 <_ZN6Buzzer10SingleBeepENS_5SoundE+0xd0>)
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 fa93 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("G6", 100, 100);
 8000fda:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000fde:	2364      	movs	r3, #100	; 0x64
 8000fe0:	2264      	movs	r2, #100	; 0x64
 8000fe2:	4926      	ldr	r1, [pc, #152]	; (800107c <_ZN6Buzzer10SingleBeepENS_5SoundE+0xd4>)
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f000 fa8b 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("C#6", 100, 200);
		Tone("D6", 100);
		Tone("F#6", 100, 50);
		Tone("C#6", 100, 50);
	}
}
 8000fea:	e03e      	b.n	800106a <_ZN6Buzzer10SingleBeepENS_5SoundE+0xc2>
	else if(sound == Sound2){
 8000fec:	78fb      	ldrb	r3, [r7, #3]
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d118      	bne.n	8001024 <_ZN6Buzzer10SingleBeepENS_5SoundE+0x7c>
		Tone("G6", 100, 100);
 8000ff2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000ff6:	2364      	movs	r3, #100	; 0x64
 8000ff8:	2264      	movs	r2, #100	; 0x64
 8000ffa:	4920      	ldr	r1, [pc, #128]	; (800107c <_ZN6Buzzer10SingleBeepENS_5SoundE+0xd4>)
 8000ffc:	6878      	ldr	r0, [r7, #4]
 8000ffe:	f000 fa7f 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("F6", 100);
 8001002:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001006:	2300      	movs	r3, #0
 8001008:	2264      	movs	r2, #100	; 0x64
 800100a:	491b      	ldr	r1, [pc, #108]	; (8001078 <_ZN6Buzzer10SingleBeepENS_5SoundE+0xd0>)
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 fa77 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("C6", 100);
 8001012:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001016:	2300      	movs	r3, #0
 8001018:	2264      	movs	r2, #100	; 0x64
 800101a:	4916      	ldr	r1, [pc, #88]	; (8001074 <_ZN6Buzzer10SingleBeepENS_5SoundE+0xcc>)
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f000 fa6f 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
}
 8001022:	e022      	b.n	800106a <_ZN6Buzzer10SingleBeepENS_5SoundE+0xc2>
	else if(sound == Sound3){
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	2b02      	cmp	r3, #2
 8001028:	d11f      	bne.n	800106a <_ZN6Buzzer10SingleBeepENS_5SoundE+0xc2>
		Tone("C#6", 100, 200);
 800102a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800102e:	23c8      	movs	r3, #200	; 0xc8
 8001030:	2264      	movs	r2, #100	; 0x64
 8001032:	4913      	ldr	r1, [pc, #76]	; (8001080 <_ZN6Buzzer10SingleBeepENS_5SoundE+0xd8>)
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 fa63 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("D6", 100);
 800103a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800103e:	2300      	movs	r3, #0
 8001040:	2264      	movs	r2, #100	; 0x64
 8001042:	4910      	ldr	r1, [pc, #64]	; (8001084 <_ZN6Buzzer10SingleBeepENS_5SoundE+0xdc>)
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 fa5b 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("F#6", 100, 50);
 800104a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800104e:	2332      	movs	r3, #50	; 0x32
 8001050:	2264      	movs	r2, #100	; 0x64
 8001052:	490d      	ldr	r1, [pc, #52]	; (8001088 <_ZN6Buzzer10SingleBeepENS_5SoundE+0xe0>)
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f000 fa53 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		Tone("C#6", 100, 50);
 800105a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800105e:	2332      	movs	r3, #50	; 0x32
 8001060:	2264      	movs	r2, #100	; 0x64
 8001062:	4907      	ldr	r1, [pc, #28]	; (8001080 <_ZN6Buzzer10SingleBeepENS_5SoundE+0xd8>)
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f000 fa4b 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	08007330 	.word	0x08007330
 8001078:	08007378 	.word	0x08007378
 800107c:	08007340 	.word	0x08007340
 8001080:	08007370 	.word	0x08007370
 8001084:	08007350 	.word	0x08007350
 8001088:	08007380 	.word	0x08007380

0800108c <_ZN6Buzzer4LoopEv>:

void Buzzer::Loop(void) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	if (mode) {
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 8112 	beq.w	80012c2 <_ZN6Buzzer4LoopEv+0x236>
		if (mode & LOW_BATTERY) {
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d06f      	beq.n	800118a <_ZN6Buzzer4LoopEv+0xfe>
			Tone("E6", 150);
 80010aa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80010ae:	2300      	movs	r3, #0
 80010b0:	2296      	movs	r2, #150	; 0x96
 80010b2:	4989      	ldr	r1, [pc, #548]	; (80012d8 <_ZN6Buzzer4LoopEv+0x24c>)
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f000 fa23 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("D6", 150);
 80010ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80010be:	2300      	movs	r3, #0
 80010c0:	2296      	movs	r2, #150	; 0x96
 80010c2:	4986      	ldr	r1, [pc, #536]	; (80012dc <_ZN6Buzzer4LoopEv+0x250>)
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f000 fa1b 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("F#5", 300);
 80010ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80010ce:	2300      	movs	r3, #0
 80010d0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010d4:	4982      	ldr	r1, [pc, #520]	; (80012e0 <_ZN6Buzzer4LoopEv+0x254>)
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 fa12 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("G#5", 300);
 80010dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80010e0:	2300      	movs	r3, #0
 80010e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010e6:	497f      	ldr	r1, [pc, #508]	; (80012e4 <_ZN6Buzzer4LoopEv+0x258>)
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f000 fa09 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>

			Tone("C#6", 150);
 80010ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80010f2:	2300      	movs	r3, #0
 80010f4:	2296      	movs	r2, #150	; 0x96
 80010f6:	497c      	ldr	r1, [pc, #496]	; (80012e8 <_ZN6Buzzer4LoopEv+0x25c>)
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f000 fa01 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("B5", 150);
 80010fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001102:	2300      	movs	r3, #0
 8001104:	2296      	movs	r2, #150	; 0x96
 8001106:	4979      	ldr	r1, [pc, #484]	; (80012ec <_ZN6Buzzer4LoopEv+0x260>)
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f000 f9f9 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("D5", 300);
 800110e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001112:	2300      	movs	r3, #0
 8001114:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001118:	4975      	ldr	r1, [pc, #468]	; (80012f0 <_ZN6Buzzer4LoopEv+0x264>)
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f9f0 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("E5", 300);
 8001120:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001124:	2300      	movs	r3, #0
 8001126:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800112a:	4972      	ldr	r1, [pc, #456]	; (80012f4 <_ZN6Buzzer4LoopEv+0x268>)
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f000 f9e7 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>

			Tone("B5", 150);
 8001132:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001136:	2300      	movs	r3, #0
 8001138:	2296      	movs	r2, #150	; 0x96
 800113a:	496c      	ldr	r1, [pc, #432]	; (80012ec <_ZN6Buzzer4LoopEv+0x260>)
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 f9df 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("A5", 150);
 8001142:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001146:	2300      	movs	r3, #0
 8001148:	2296      	movs	r2, #150	; 0x96
 800114a:	496b      	ldr	r1, [pc, #428]	; (80012f8 <_ZN6Buzzer4LoopEv+0x26c>)
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 f9d7 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("C#5", 300);
 8001152:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001156:	2300      	movs	r3, #0
 8001158:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800115c:	4967      	ldr	r1, [pc, #412]	; (80012fc <_ZN6Buzzer4LoopEv+0x270>)
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 f9ce 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("E5", 300);
 8001164:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001168:	2300      	movs	r3, #0
 800116a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800116e:	4961      	ldr	r1, [pc, #388]	; (80012f4 <_ZN6Buzzer4LoopEv+0x268>)
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f9c5 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>

			Tone("A5", 900, 900);
 8001176:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800117a:	f44f 7361 	mov.w	r3, #900	; 0x384
 800117e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8001182:	495d      	ldr	r1, [pc, #372]	; (80012f8 <_ZN6Buzzer4LoopEv+0x26c>)
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f9bb 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
		}
		if (mode & IMU_CALIBRATION) {
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00b      	beq.n	80011ae <_ZN6Buzzer4LoopEv+0x122>
			Tone("B6", 10, 250);
 8001196:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800119a:	23fa      	movs	r3, #250	; 0xfa
 800119c:	220a      	movs	r2, #10
 800119e:	4958      	ldr	r1, [pc, #352]	; (8001300 <_ZN6Buzzer4LoopEv+0x274>)
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f9ad 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			DisableMode(IMU_CALIBRATION);
 80011a6:	2104      	movs	r1, #4
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 fa17 	bl	80015dc <_ZN6Buzzer11DisableModeENS_4ModeE>
		}
		if (mode & ONE_BEEP) {
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80011b2:	f003 0308 	and.w	r3, r3, #8
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d00b      	beq.n	80011d2 <_ZN6Buzzer4LoopEv+0x146>
			Tone("D7", 250, 250);
 80011ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80011be:	23fa      	movs	r3, #250	; 0xfa
 80011c0:	22fa      	movs	r2, #250	; 0xfa
 80011c2:	4950      	ldr	r1, [pc, #320]	; (8001304 <_ZN6Buzzer4LoopEv+0x278>)
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 f99b 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			DisableMode(ONE_BEEP);
 80011ca:	2108      	movs	r1, #8
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f000 fa05 	bl	80015dc <_ZN6Buzzer11DisableModeENS_4ModeE>
		}
		if (mode & ARMING) {
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80011d6:	f003 0320 	and.w	r3, r3, #32
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d015      	beq.n	800120a <_ZN6Buzzer4LoopEv+0x17e>
			Tone("G5", 500, 100);
 80011de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80011e2:	2364      	movs	r3, #100	; 0x64
 80011e4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80011e8:	4947      	ldr	r1, [pc, #284]	; (8001308 <_ZN6Buzzer4LoopEv+0x27c>)
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 f988 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("D6", 800, 200);
 80011f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80011f4:	23c8      	movs	r3, #200	; 0xc8
 80011f6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80011fa:	4938      	ldr	r1, [pc, #224]	; (80012dc <_ZN6Buzzer4LoopEv+0x250>)
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 f97f 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			DisableMode(ARMING);
 8001202:	2120      	movs	r1, #32
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f9e9 	bl	80015dc <_ZN6Buzzer11DisableModeENS_4ModeE>
		}
		if (mode & DISARMING) {
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800120e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001212:	2b00      	cmp	r3, #0
 8001214:	d01e      	beq.n	8001254 <_ZN6Buzzer4LoopEv+0x1c8>
			Tone("D6", 300, 50);
 8001216:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800121a:	2332      	movs	r3, #50	; 0x32
 800121c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001220:	492e      	ldr	r1, [pc, #184]	; (80012dc <_ZN6Buzzer4LoopEv+0x250>)
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f000 f96c 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("D6", 300, 50);
 8001228:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800122c:	2332      	movs	r3, #50	; 0x32
 800122e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001232:	492a      	ldr	r1, [pc, #168]	; (80012dc <_ZN6Buzzer4LoopEv+0x250>)
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f963 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("G5", 800, 200);
 800123a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800123e:	23c8      	movs	r3, #200	; 0xc8
 8001240:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001244:	4930      	ldr	r1, [pc, #192]	; (8001308 <_ZN6Buzzer4LoopEv+0x27c>)
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f000 f95a 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			DisableMode(DISARMING);
 800124c:	2140      	movs	r1, #64	; 0x40
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f000 f9c4 	bl	80015dc <_ZN6Buzzer11DisableModeENS_4ModeE>
		}
		if (mode & THREE_BEEPS) {
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	2b00      	cmp	r3, #0
 800125e:	d01b      	beq.n	8001298 <_ZN6Buzzer4LoopEv+0x20c>
			Tone("G7", 250, 250);
 8001260:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001264:	23fa      	movs	r3, #250	; 0xfa
 8001266:	22fa      	movs	r2, #250	; 0xfa
 8001268:	4928      	ldr	r1, [pc, #160]	; (800130c <_ZN6Buzzer4LoopEv+0x280>)
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f948 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("G7", 250, 250);
 8001270:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001274:	23fa      	movs	r3, #250	; 0xfa
 8001276:	22fa      	movs	r2, #250	; 0xfa
 8001278:	4924      	ldr	r1, [pc, #144]	; (800130c <_ZN6Buzzer4LoopEv+0x280>)
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 f940 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			Tone("G7", 250, 250);
 8001280:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001284:	23fa      	movs	r3, #250	; 0xfa
 8001286:	22fa      	movs	r2, #250	; 0xfa
 8001288:	4920      	ldr	r1, [pc, #128]	; (800130c <_ZN6Buzzer4LoopEv+0x280>)
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f938 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			DisableMode(THREE_BEEPS);
 8001290:	2110      	movs	r1, #16
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 f9a2 	bl	80015dc <_ZN6Buzzer11DisableModeENS_4ModeE>
		}
		if (mode & SMIECIARKA) {
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800129c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d011      	beq.n	80012c8 <_ZN6Buzzer4LoopEv+0x23c>
			Tone("G6", 700, 300);
 80012a4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80012a8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80012ac:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80012b0:	4917      	ldr	r1, [pc, #92]	; (8001310 <_ZN6Buzzer4LoopEv+0x284>)
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f000 f924 	bl	8001500 <_ZN6Buzzer4ToneEPKcttf>
			DisableMode(SMIECIARKA);
 80012b8:	2180      	movs	r1, #128	; 0x80
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f98e 	bl	80015dc <_ZN6Buzzer11DisableModeENS_4ModeE>
 80012c0:	e002      	b.n	80012c8 <_ZN6Buzzer4LoopEv+0x23c>
		}

	} else
		Mute();
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f8f2 	bl	80014ac <_ZN6Buzzer4MuteEv>
	osDelay(5);
 80012c8:	2005      	movs	r0, #5
 80012ca:	f003 fee4 	bl	8005096 <osDelay>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	08007334 	.word	0x08007334
 80012dc:	08007350 	.word	0x08007350
 80012e0:	0800735c 	.word	0x0800735c
 80012e4:	08007374 	.word	0x08007374
 80012e8:	08007370 	.word	0x08007370
 80012ec:	0800733c 	.word	0x0800733c
 80012f0:	08007344 	.word	0x08007344
 80012f4:	08007348 	.word	0x08007348
 80012f8:	08007358 	.word	0x08007358
 80012fc:	08007384 	.word	0x08007384
 8001300:	08007388 	.word	0x08007388
 8001304:	0800738c 	.word	0x0800738c
 8001308:	0800734c 	.word	0x0800734c
 800130c:	08007390 	.word	0x08007390
 8001310:	08007340 	.word	0x08007340

08001314 <_ZN6Buzzer12SetBeepPowerEf>:
void Buzzer::SetBeepPower(float pwr){
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	ed87 0a00 	vstr	s0, [r7]
	if(pwr > 1.f)
 8001320:	edd7 7a00 	vldr	s15, [r7]
 8001324:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001328:	eef4 7ac7 	vcmpe.f32	s15, s14
 800132c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001330:	dd03      	ble.n	800133a <_ZN6Buzzer12SetBeepPowerEf+0x26>
		pwr = 1.f;
 8001332:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	e009      	b.n	800134e <_ZN6Buzzer12SetBeepPowerEf+0x3a>
	else if(pwr < 0.f)
 800133a:	edd7 7a00 	vldr	s15, [r7]
 800133e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001346:	d502      	bpl.n	800134e <_ZN6Buzzer12SetBeepPowerEf+0x3a>
		pwr = 0.f;
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	603b      	str	r3, [r7, #0]

	if(channel == TIM_CHANNEL_1)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001352:	2b00      	cmp	r3, #0
 8001354:	d11b      	bne.n	800138e <_ZN6Buzzer12SetBeepPowerEf+0x7a>
		timer_macro->CCR1 = (uint16_t) (floorf( pwr * TIM1->ARR / 2.f));
 8001356:	4b40      	ldr	r3, [pc, #256]	; (8001458 <_ZN6Buzzer12SetBeepPowerEf+0x144>)
 8001358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135a:	ee07 3a90 	vmov	s15, r3
 800135e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001362:	edd7 7a00 	vldr	s15, [r7]
 8001366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800136a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800136e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001372:	eeb0 0a66 	vmov.f32	s0, s13
 8001376:	f005 f861 	bl	800643c <floorf>
 800137a:	eef0 7a40 	vmov.f32	s15, s0
 800137e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001382:	ee17 3a90 	vmov	r3, s15
 8001386:	b29a      	uxth	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	635a      	str	r2, [r3, #52]	; 0x34
	if(channel == TIM_CHANNEL_2)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001392:	2b04      	cmp	r3, #4
 8001394:	d11b      	bne.n	80013ce <_ZN6Buzzer12SetBeepPowerEf+0xba>
		timer_macro->CCR2 = (uint16_t) (floorf( pwr * TIM1->ARR / 2.f));
 8001396:	4b30      	ldr	r3, [pc, #192]	; (8001458 <_ZN6Buzzer12SetBeepPowerEf+0x144>)
 8001398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013a2:	edd7 7a00 	vldr	s15, [r7]
 80013a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013aa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80013ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013b2:	eeb0 0a66 	vmov.f32	s0, s13
 80013b6:	f005 f841 	bl	800643c <floorf>
 80013ba:	eef0 7a40 	vmov.f32	s15, s0
 80013be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013c2:	ee17 3a90 	vmov	r3, s15
 80013c6:	b29a      	uxth	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013cc:	639a      	str	r2, [r3, #56]	; 0x38
	if(channel == TIM_CHANNEL_3)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d11b      	bne.n	800140e <_ZN6Buzzer12SetBeepPowerEf+0xfa>
		timer_macro->CCR3 = (uint16_t) (floorf( pwr * TIM1->ARR / 2.f));
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <_ZN6Buzzer12SetBeepPowerEf+0x144>)
 80013d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80013e2:	edd7 7a00 	vldr	s15, [r7]
 80013e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ea:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80013ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013f2:	eeb0 0a66 	vmov.f32	s0, s13
 80013f6:	f005 f821 	bl	800643c <floorf>
 80013fa:	eef0 7a40 	vmov.f32	s15, s0
 80013fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001402:	ee17 3a90 	vmov	r3, s15
 8001406:	b29a      	uxth	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140c:	63da      	str	r2, [r3, #60]	; 0x3c
	if(channel == TIM_CHANNEL_4)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001412:	2b0c      	cmp	r3, #12
 8001414:	d11b      	bne.n	800144e <_ZN6Buzzer12SetBeepPowerEf+0x13a>
		timer_macro->CCR4 = (uint16_t) (floorf( pwr * TIM1->ARR / 2.f));
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <_ZN6Buzzer12SetBeepPowerEf+0x144>)
 8001418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141a:	ee07 3a90 	vmov	s15, r3
 800141e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001422:	edd7 7a00 	vldr	s15, [r7]
 8001426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800142e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001432:	eeb0 0a66 	vmov.f32	s0, s13
 8001436:	f005 f801 	bl	800643c <floorf>
 800143a:	eef0 7a40 	vmov.f32	s15, s0
 800143e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001442:	ee17 3a90 	vmov	r3, s15
 8001446:	b29a      	uxth	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40012c00 	.word	0x40012c00

0800145c <_ZN6Buzzer15SetPWMFrequencyEf>:
void Buzzer::SetPWMFrequency(float freq){
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	ed87 0a00 	vstr	s0, [r7]
	timer_macro->CNT = 0u;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146c:	2200      	movs	r2, #0
 800146e:	625a      	str	r2, [r3, #36]	; 0x24
	timer_macro->ARR = (uint16_t)(roundf(TIM1_FREQ / freq) - 1);
 8001470:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80014a8 <_ZN6Buzzer15SetPWMFrequencyEf+0x4c>
 8001474:	edd7 7a00 	vldr	s15, [r7]
 8001478:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800147c:	eeb0 0a66 	vmov.f32	s0, s13
 8001480:	f005 f81e 	bl	80064c0 <roundf>
 8001484:	eeb0 7a40 	vmov.f32	s14, s0
 8001488:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800148c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001494:	ee17 3a90 	vmov	r3, s15
 8001498:	b29a      	uxth	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	49742400 	.word	0x49742400

080014ac <_ZN6Buzzer4MuteEv>:
void Buzzer::Mute(void){
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
	if (channel == TIM_CHANNEL_1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d103      	bne.n	80014c4 <_ZN6Buzzer4MuteEv+0x18>
		timer_macro->CCR1 = 0;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c0:	2200      	movs	r2, #0
 80014c2:	635a      	str	r2, [r3, #52]	; 0x34
	if (channel == TIM_CHANNEL_2)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d103      	bne.n	80014d4 <_ZN6Buzzer4MuteEv+0x28>
		timer_macro->CCR2 = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	2200      	movs	r2, #0
 80014d2:	639a      	str	r2, [r3, #56]	; 0x38
	if (channel == TIM_CHANNEL_3)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d103      	bne.n	80014e4 <_ZN6Buzzer4MuteEv+0x38>
		timer_macro->CCR3 = 0;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	2200      	movs	r2, #0
 80014e2:	63da      	str	r2, [r3, #60]	; 0x3c
	if (channel == TIM_CHANNEL_4)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e8:	2b0c      	cmp	r3, #12
 80014ea:	d103      	bne.n	80014f4 <_ZN6Buzzer4MuteEv+0x48>
		timer_macro->CCR4 = 0;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	2200      	movs	r2, #0
 80014f2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80014f4:	bf00      	nop
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <_ZN6Buzzer4ToneEPKcttf>:
void Buzzer::Beep(uint8_t power, uint8_t pitch){

}
void Buzzer::Tone(const char* keynote, uint16_t duration, uint16_t pause, float loudness) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	4611      	mov	r1, r2
 800150c:	461a      	mov	r2, r3
 800150e:	ed87 0a00 	vstr	s0, [r7]
 8001512:	460b      	mov	r3, r1
 8001514:	80fb      	strh	r3, [r7, #6]
 8001516:	4613      	mov	r3, r2
 8001518:	80bb      	strh	r3, [r7, #4]
	uint8_t octave = 0, note = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	75fb      	strb	r3, [r7, #23]
 800151e:	2300      	movs	r3, #0
 8001520:	75bb      	strb	r3, [r7, #22]
	for (uint8_t i = 0; i < 12; i++) {
 8001522:	2300      	movs	r3, #0
 8001524:	757b      	strb	r3, [r7, #21]
 8001526:	7d7b      	ldrb	r3, [r7, #21]
 8001528:	2b0b      	cmp	r3, #11
 800152a:	d812      	bhi.n	8001552 <_ZN6Buzzer4ToneEPKcttf+0x52>
		if (keynote[0] == keynotes[i][0]) {
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	7819      	ldrb	r1, [r3, #0]
 8001530:	7d7a      	ldrb	r2, [r7, #21]
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	4613      	mov	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	4403      	add	r3, r0
 800153c:	3304      	adds	r3, #4
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4299      	cmp	r1, r3
 8001542:	d102      	bne.n	800154a <_ZN6Buzzer4ToneEPKcttf+0x4a>
			note = i;
 8001544:	7d7b      	ldrb	r3, [r7, #21]
 8001546:	75bb      	strb	r3, [r7, #22]
			break;
 8001548:	e003      	b.n	8001552 <_ZN6Buzzer4ToneEPKcttf+0x52>
	for (uint8_t i = 0; i < 12; i++) {
 800154a:	7d7b      	ldrb	r3, [r7, #21]
 800154c:	3301      	adds	r3, #1
 800154e:	757b      	strb	r3, [r7, #21]
 8001550:	e7e9      	b.n	8001526 <_ZN6Buzzer4ToneEPKcttf+0x26>
		}
	}

	if (keynote[1] == '#') {
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	3301      	adds	r3, #1
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b23      	cmp	r3, #35	; 0x23
 800155a:	d10a      	bne.n	8001572 <_ZN6Buzzer4ToneEPKcttf+0x72>
		note++;
 800155c:	7dbb      	ldrb	r3, [r7, #22]
 800155e:	3301      	adds	r3, #1
 8001560:	75bb      	strb	r3, [r7, #22]
		octave = atoi(&keynote[2]);
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	3302      	adds	r3, #2
 8001566:	4618      	mov	r0, r3
 8001568:	f005 fcdd 	bl	8006f26 <atoi>
 800156c:	4603      	mov	r3, r0
 800156e:	75fb      	strb	r3, [r7, #23]
 8001570:	e006      	b.n	8001580 <_ZN6Buzzer4ToneEPKcttf+0x80>
	} else
		octave = atoi(&keynote[1]);
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	3301      	adds	r3, #1
 8001576:	4618      	mov	r0, r3
 8001578:	f005 fcd5 	bl	8006f26 <atoi>
 800157c:	4603      	mov	r3, r0
 800157e:	75fb      	strb	r3, [r7, #23]

	float frequency = NoteToFrequency(octave * 12 + note);
 8001580:	7dfb      	ldrb	r3, [r7, #23]
 8001582:	461a      	mov	r2, r3
 8001584:	0052      	lsls	r2, r2, #1
 8001586:	4413      	add	r3, r2
 8001588:	009b      	lsls	r3, r3, #2
 800158a:	b2da      	uxtb	r2, r3
 800158c:	7dbb      	ldrb	r3, [r7, #22]
 800158e:	4413      	add	r3, r2
 8001590:	b2db      	uxtb	r3, r3
 8001592:	4619      	mov	r1, r3
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f000 f83a 	bl	800160e <_ZN6Buzzer15NoteToFrequencyEh>
 800159a:	ed87 0a04 	vstr	s0, [r7, #16]

	SetPWMFrequency(frequency);
 800159e:	ed97 0a04 	vldr	s0, [r7, #16]
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f7ff ff5a 	bl	800145c <_ZN6Buzzer15SetPWMFrequencyEf>
	SetBeepPower(loudness);
 80015a8:	ed97 0a00 	vldr	s0, [r7]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f7ff feb1 	bl	8001314 <_ZN6Buzzer12SetBeepPowerEf>
	if (duration) {
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <_ZN6Buzzer4ToneEPKcttf+0xc6>
		osDelay(duration);
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 fd6b 	bl	8005096 <osDelay>
		Mute();
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f7ff ff73 	bl	80014ac <_ZN6Buzzer4MuteEv>
	}
	if (pause)
 80015c6:	88bb      	ldrh	r3, [r7, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <_ZN6Buzzer4ToneEPKcttf+0xd4>
		osDelay(pause);
 80015cc:	88bb      	ldrh	r3, [r7, #4]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 fd61 	bl	8005096 <osDelay>
}
 80015d4:	bf00      	nop
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <_ZN6Buzzer11DisableModeENS_4ModeE>:

void Buzzer::EnableMode(Mode mode) {
	this->mode |= mode;
}
void Buzzer::DisableMode(Mode mode) {
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	70fb      	strb	r3, [r7, #3]
	this->mode &= ~mode;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	78fb      	ldrb	r3, [r7, #3]
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	4013      	ands	r3, r2
 80015fa:	b21b      	sxth	r3, r3
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_ZN6Buzzer15NoteToFrequencyEh>:
float Buzzer::NoteToFrequency(uint8_t note) {
 800160e:	b580      	push	{r7, lr}
 8001610:	ed2d 8b02 	vpush	{d8}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
 800161a:	460b      	mov	r3, r1
 800161c:	70fb      	strb	r3, [r7, #3]
	if (note <= 119)
 800161e:	78fb      	ldrb	r3, [r7, #3]
 8001620:	2b77      	cmp	r3, #119	; 0x77
 8001622:	d817      	bhi.n	8001654 <_ZN6Buzzer15NoteToFrequencyEh+0x46>
		return base_a4*powf(2.f,(note-57)/12.f);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	ed93 8a0a 	vldr	s16, [r3, #40]	; 0x28
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	3b39      	subs	r3, #57	; 0x39
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001636:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800163a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800163e:	eef0 0a66 	vmov.f32	s1, s13
 8001642:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001646:	f004 ff61 	bl	800650c <powf>
 800164a:	eef0 7a40 	vmov.f32	s15, s0
 800164e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001652:	e001      	b.n	8001658 <_ZN6Buzzer15NoteToFrequencyEh+0x4a>
	return -1;
 8001654:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8001658:	eeb0 0a67 	vmov.f32	s0, s15
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	ecbd 8b02 	vpop	{d8}
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <_ZN6BuzzerC1EP17TIM_HandleTypeDefP11TIM_TypeDefm>:

Buzzer::Buzzer(TIM_HandleTypeDef *timer, TIM_TypeDef* timer_macro, uint32_t channel) {
 8001668:	b4b0      	push	{r4, r5, r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	60b9      	str	r1, [r7, #8]
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	603b      	str	r3, [r7, #0]
 8001676:	4a11      	ldr	r2, [pc, #68]	; (80016bc <_ZN6BuzzerC1EP17TIM_HandleTypeDefP11TIM_TypeDefm+0x54>)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4a10      	ldr	r2, [pc, #64]	; (80016c0 <_ZN6BuzzerC1EP17TIM_HandleTypeDefP11TIM_TypeDefm+0x58>)
 8001680:	1d1c      	adds	r4, r3, #4
 8001682:	4615      	mov	r5, r2
 8001684:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800168a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800168c:	682b      	ldr	r3, [r5, #0]
 800168e:	6023      	str	r3, [r4, #0]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4a0c      	ldr	r2, [pc, #48]	; (80016c4 <_ZN6BuzzerC1EP17TIM_HandleTypeDefP11TIM_TypeDefm+0x5c>)
 8001694:	629a      	str	r2, [r3, #40]	; 0x28
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2200      	movs	r2, #0
 800169a:	859a      	strh	r2, [r3, #44]	; 0x2c
	// TODO Auto-generated constructor stub
	this->timer = timer;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	635a      	str	r2, [r3, #52]	; 0x34
	this->timer_macro = timer_macro;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	631a      	str	r2, [r3, #48]	; 0x30
	this->channel = channel;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4618      	mov	r0, r3
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bcb0      	pop	{r4, r5, r7}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	08007418 	.word	0x08007418
 80016c0:	08007394 	.word	0x08007394
 80016c4:	43dc0000 	.word	0x43dc0000

080016c8 <_ZN6BuzzerD1Ev>:

Buzzer::~Buzzer() {
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <_ZN6BuzzerD1Ev+0x1c>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4618      	mov	r0, r3
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	08007418 	.word	0x08007418

080016e8 <_ZN6BuzzerD0Ev>:
Buzzer::~Buzzer() {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
}
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ffe9 	bl	80016c8 <_ZN6BuzzerD1Ev>
 80016f6:	213c      	movs	r1, #60	; 0x3c
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f004 fe81 	bl	8006400 <_ZdlPvj>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4618      	mov	r0, r3
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4a07      	ldr	r2, [pc, #28]	; (8001734 <vApplicationGetIdleTaskMemory+0x2c>)
 8001718:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	4a06      	ldr	r2, [pc, #24]	; (8001738 <vApplicationGetIdleTaskMemory+0x30>)
 800171e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2280      	movs	r2, #128	; 0x80
 8001724:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001726:	bf00      	nop
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	20000208 	.word	0x20000208
 8001738:	2000025c 	.word	0x2000025c

0800173c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800173c:	b5b0      	push	{r4, r5, r7, lr}
 800173e:	b08e      	sub	sp, #56	; 0x38
 8001740:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001742:	4b14      	ldr	r3, [pc, #80]	; (8001794 <MX_FREERTOS_Init+0x58>)
 8001744:	f107 041c 	add.w	r4, r7, #28
 8001748:	461d      	mov	r5, r3
 800174a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800174c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800174e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001752:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001756:	f107 031c 	add.w	r3, r7, #28
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f003 fc4e 	bl	8004ffe <osThreadCreate>
 8001762:	4602      	mov	r2, r0
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <MX_FREERTOS_Init+0x5c>)
 8001766:	601a      	str	r2, [r3, #0]

  /* definition and creation of buzzerTask */
  osThreadDef(buzzerTask, StartBuzzerTask, osPriorityLow, 0, 128);
 8001768:	4b0c      	ldr	r3, [pc, #48]	; (800179c <MX_FREERTOS_Init+0x60>)
 800176a:	463c      	mov	r4, r7
 800176c:	461d      	mov	r5, r3
 800176e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001772:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001776:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buzzerTaskHandle = osThreadCreate(osThread(buzzerTask), NULL);
 800177a:	463b      	mov	r3, r7
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f003 fc3d 	bl	8004ffe <osThreadCreate>
 8001784:	4602      	mov	r2, r0
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <MX_FREERTOS_Init+0x64>)
 8001788:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800178a:	bf00      	nop
 800178c:	3738      	adds	r7, #56	; 0x38
 800178e:	46bd      	mov	sp, r7
 8001790:	bdb0      	pop	{r4, r5, r7, pc}
 8001792:	bf00      	nop
 8001794:	080073c4 	.word	0x080073c4
 8001798:	20000200 	.word	0x20000200
 800179c:	080073ec 	.word	0x080073ec
 80017a0:	20000204 	.word	0x20000204

080017a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017ac:	2001      	movs	r0, #1
 80017ae:	f003 fc72 	bl	8005096 <osDelay>
 80017b2:	e7fb      	b.n	80017ac <StartDefaultTask+0x8>

080017b4 <StartBuzzerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBuzzerTask */
void StartBuzzerTask(void const * argument)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBuzzerTask */
    Buzzer* buzzer = new Buzzer(&htim1, TIM1, TIM_CHANNEL_1);
 80017bc:	203c      	movs	r0, #60	; 0x3c
 80017be:	f004 fe21 	bl	8006404 <_Znwj>
 80017c2:	4603      	mov	r3, r0
 80017c4:	461c      	mov	r4, r3
 80017c6:	2300      	movs	r3, #0
 80017c8:	4a14      	ldr	r2, [pc, #80]	; (800181c <StartBuzzerTask+0x68>)
 80017ca:	4915      	ldr	r1, [pc, #84]	; (8001820 <StartBuzzerTask+0x6c>)
 80017cc:	4620      	mov	r0, r4
 80017ce:	f7ff ff4b 	bl	8001668 <_ZN6BuzzerC1EP17TIM_HandleTypeDefP11TIM_TypeDefm>
 80017d2:	60fc      	str	r4, [r7, #12]
    buzzer->Init();
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f7fe ff0f 	bl	80005f8 <_ZN6Buzzer4InitEv>
  /* Infinite loop */
  for(;;)
  {
	 // buzzer->EnableMode(Buzzer::LOW_BATTERY);
	  buzzer->Loop();
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f7ff fc56 	bl	800108c <_ZN6Buzzer4LoopEv>
	  osDelay(1000);
 80017e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017e4:	f003 fc57 	bl	8005096 <osDelay>
	  buzzer->SingleBeep(Buzzer::Sound1);
 80017e8:	2100      	movs	r1, #0
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f7ff fbdc 	bl	8000fa8 <_ZN6Buzzer10SingleBeepENS_5SoundE>
	  osDelay(1000);
 80017f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80017f4:	f003 fc4f 	bl	8005096 <osDelay>
	  buzzer->SingleBeep(Buzzer::Sound2);
 80017f8:	2101      	movs	r1, #1
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f7ff fbd4 	bl	8000fa8 <_ZN6Buzzer10SingleBeepENS_5SoundE>
	  osDelay(1000);
 8001800:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001804:	f003 fc47 	bl	8005096 <osDelay>
	  buzzer->SingleBeep(Buzzer::Sound3);
 8001808:	2102      	movs	r1, #2
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f7ff fbcc 	bl	8000fa8 <_ZN6Buzzer10SingleBeepENS_5SoundE>
	  osDelay(1000);
 8001810:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001814:	f003 fc3f 	bl	8005096 <osDelay>
	  buzzer->Loop();
 8001818:	e7df      	b.n	80017da <StartBuzzerTask+0x26>
 800181a:	bf00      	nop
 800181c:	40012c00 	.word	0x40012c00
 8001820:	20001204 	.word	0x20001204

08001824 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <MX_GPIO_Init+0x2c>)
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	4a08      	ldr	r2, [pc, #32]	; (8001850 <MX_GPIO_Init+0x2c>)
 8001830:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001834:	6153      	str	r3, [r2, #20]
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <MX_GPIO_Init+0x2c>)
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	40021000 	.word	0x40021000

08001854 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001858:	f000 faba 	bl	8001dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800185c:	f000 f809 	bl	8001872 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001860:	f7ff ffe0 	bl	8001824 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001864:	f000 f986 	bl	8001b74 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001868:	f7ff ff68 	bl	800173c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800186c:	f003 fbc0 	bl	8004ff0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001870:	e7fe      	b.n	8001870 <main+0x1c>

08001872 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b0a6      	sub	sp, #152	; 0x98
 8001876:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001878:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800187c:	2228      	movs	r2, #40	; 0x28
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f005 fb8f 	bl	8006fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001886:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001896:	1d3b      	adds	r3, r7, #4
 8001898:	2258      	movs	r2, #88	; 0x58
 800189a:	2100      	movs	r1, #0
 800189c:	4618      	mov	r0, r3
 800189e:	f005 fb81 	bl	8006fa4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018a2:	2302      	movs	r3, #2
 80018a4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018a6:	2301      	movs	r3, #1
 80018a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018aa:	2310      	movs	r3, #16
 80018ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 fd2a 	bl	8002314 <HAL_RCC_OscConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	bf14      	ite	ne
 80018c6:	2301      	movne	r3, #1
 80018c8:	2300      	moveq	r3, #0
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80018d0:	f000 f840 	bl	8001954 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d4:	230f      	movs	r3, #15
 80018d6:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018d8:	2300      	movs	r3, #0
 80018da:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018e8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018ec:	2100      	movs	r1, #0
 80018ee:	4618      	mov	r0, r3
 80018f0:	f001 fc26 	bl	8003140 <HAL_RCC_ClockConfig>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	bf14      	ite	ne
 80018fa:	2301      	movne	r3, #1
 80018fc:	2300      	moveq	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001904:	f000 f826 	bl	8001954 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800190e:	2300      	movs	r3, #0
 8001910:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	4618      	mov	r0, r3
 8001916:	f001 fe59 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	bf14      	ite	ne
 8001920:	2301      	movne	r3, #1
 8001922:	2300      	moveq	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800192a:	f000 f813 	bl	8001954 <Error_Handler>
  }
}
 800192e:	bf00      	nop
 8001930:	3798      	adds	r7, #152	; 0x98
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001946:	d101      	bne.n	800194c <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001948:	f000 fa58 	bl	8001dfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
	...

08001964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <HAL_MspInit+0x44>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	4a0e      	ldr	r2, [pc, #56]	; (80019a8 <HAL_MspInit+0x44>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6193      	str	r3, [r2, #24]
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <HAL_MspInit+0x44>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_MspInit+0x44>)
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <HAL_MspInit+0x44>)
 8001988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198c:	61d3      	str	r3, [r2, #28]
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_MspInit+0x44>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000

080019ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08c      	sub	sp, #48	; 0x30
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 80019bc:	2200      	movs	r2, #0
 80019be:	6879      	ldr	r1, [r7, #4]
 80019c0:	201c      	movs	r0, #28
 80019c2:	f000 faf3 	bl	8001fac <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019c6:	201c      	movs	r0, #28
 80019c8:	f000 fb0c 	bl	8001fe4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80019cc:	4b1f      	ldr	r3, [pc, #124]	; (8001a4c <HAL_InitTick+0xa0>)
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	4a1e      	ldr	r2, [pc, #120]	; (8001a4c <HAL_InitTick+0xa0>)
 80019d2:	f043 0301 	orr.w	r3, r3, #1
 80019d6:	61d3      	str	r3, [r2, #28]
 80019d8:	4b1c      	ldr	r3, [pc, #112]	; (8001a4c <HAL_InitTick+0xa0>)
 80019da:	69db      	ldr	r3, [r3, #28]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019e4:	f107 0210 	add.w	r2, r7, #16
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f001 fdba 	bl	8003568 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019f4:	f001 fd96 	bl	8003524 <HAL_RCC_GetPCLK1Freq>
 80019f8:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80019fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019fc:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <HAL_InitTick+0xa4>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	0c9b      	lsrs	r3, r3, #18
 8001a04:	3b01      	subs	r3, #1
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001a08:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_InitTick+0xa8>)
 8001a0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8001a10:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_InitTick+0xa8>)
 8001a12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a16:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001a18:	4a0e      	ldr	r2, [pc, #56]	; (8001a54 <HAL_InitTick+0xa8>)
 8001a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_InitTick+0xa8>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a24:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_InitTick+0xa8>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8001a2a:	480a      	ldr	r0, [pc, #40]	; (8001a54 <HAL_InitTick+0xa8>)
 8001a2c:	f001 ffec 	bl	8003a08 <HAL_TIM_Base_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d104      	bne.n	8001a40 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8001a36:	4807      	ldr	r0, [pc, #28]	; (8001a54 <HAL_InitTick+0xa8>)
 8001a38:	f002 f83e 	bl	8003ab8 <HAL_TIM_Base_Start_IT>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	e000      	b.n	8001a42 <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3730      	adds	r7, #48	; 0x30
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000
 8001a50:	431bde83 	.word	0x431bde83
 8001a54:	200011b8 	.word	0x200011b8

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <HardFault_Handler+0x4>

08001a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <MemManage_Handler+0x4>

08001a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <BusFault_Handler+0x4>

08001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <UsageFault_Handler+0x4>

08001a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <TIM2_IRQHandler+0x10>)
 8001a92:	f002 f9ef 	bl	8003e74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200011b8 	.word	0x200011b8

08001aa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
	return 1;
 8001aa4:	2301      	movs	r3, #1
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <_kill>:

int _kill(int pid, int sig)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001aba:	f005 fa39 	bl	8006f30 <__errno>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	2316      	movs	r3, #22
 8001ac2:	6013      	str	r3, [r2, #0]
	return -1;
 8001ac4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <_exit>:

void _exit (int status)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ad8:	f04f 31ff 	mov.w	r1, #4294967295
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ffe7 	bl	8001ab0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ae2:	e7fe      	b.n	8001ae2 <_exit+0x12>

08001ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aec:	4a14      	ldr	r2, [pc, #80]	; (8001b40 <_sbrk+0x5c>)
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <_sbrk+0x60>)
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af8:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <_sbrk+0x64>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d102      	bne.n	8001b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <_sbrk+0x64>)
 8001b02:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <_sbrk+0x68>)
 8001b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b06:	4b10      	ldr	r3, [pc, #64]	; (8001b48 <_sbrk+0x64>)
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d207      	bcs.n	8001b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b14:	f005 fa0c 	bl	8006f30 <__errno>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	230c      	movs	r3, #12
 8001b1c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b22:	e009      	b.n	8001b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b24:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <_sbrk+0x64>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	4a05      	ldr	r2, [pc, #20]	; (8001b48 <_sbrk+0x64>)
 8001b34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b36:	68fb      	ldr	r3, [r7, #12]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3718      	adds	r7, #24
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20010000 	.word	0x20010000
 8001b44:	00000400 	.word	0x00000400
 8001b48:	2000045c 	.word	0x2000045c
 8001b4c:	20001258 	.word	0x20001258

08001b50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <SystemInit+0x20>)
 8001b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5a:	4a05      	ldr	r2, [pc, #20]	; (8001b70 <SystemInit+0x20>)
 8001b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000ed00 	.word	0xe000ed00

08001b74 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b09a      	sub	sp, #104	; 0x68
 8001b78:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b88:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
 8001ba4:	615a      	str	r2, [r3, #20]
 8001ba6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	222c      	movs	r2, #44	; 0x2c
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f005 f9f8 	bl	8006fa4 <memset>

  htim1.Instance = TIM1;
 8001bb4:	4b43      	ldr	r3, [pc, #268]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001bb6:	4a44      	ldr	r2, [pc, #272]	; (8001cc8 <MX_TIM1_Init+0x154>)
 8001bb8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001bba:	4b42      	ldr	r3, [pc, #264]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc0:	4b40      	ldr	r3, [pc, #256]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001bc6:	4b3f      	ldr	r3, [pc, #252]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bcc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bce:	4b3d      	ldr	r3, [pc, #244]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bd4:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bda:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001be0:	4838      	ldr	r0, [pc, #224]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001be2:	f001 ff11 	bl	8003a08 <HAL_TIM_Base_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001bec:	f7ff feb2 	bl	8001954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bf4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001bf6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4831      	ldr	r0, [pc, #196]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001bfe:	f002 fb69 	bl	80042d4 <HAL_TIM_ConfigClockSource>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001c08:	f7ff fea4 	bl	8001954 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c0c:	482d      	ldr	r0, [pc, #180]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001c0e:	f001 ffc3 	bl	8003b98 <HAL_TIM_PWM_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001c18:	f7ff fe9c 	bl	8001954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c20:	2300      	movs	r3, #0
 8001c22:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4825      	ldr	r0, [pc, #148]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001c30:	f003 f896 	bl	8004d60 <HAL_TIMEx_MasterConfigSynchronization>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001c3a:	f7ff fe8b 	bl	8001954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c3e:	2360      	movs	r3, #96	; 0x60
 8001c40:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c46:	2300      	movs	r3, #0
 8001c48:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c56:	2300      	movs	r3, #0
 8001c58:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c5e:	2200      	movs	r2, #0
 8001c60:	4619      	mov	r1, r3
 8001c62:	4818      	ldr	r0, [pc, #96]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001c64:	f002 fa26 	bl	80040b4 <HAL_TIM_PWM_ConfigChannel>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001c6e:	f7ff fe71 	bl	8001954 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c8a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001ca8:	f003 f8e6 	bl	8004e78 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001cb2:	f7ff fe4f 	bl	8001954 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001cb6:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <MX_TIM1_Init+0x150>)
 8001cb8:	f000 f828 	bl	8001d0c <HAL_TIM_MspPostInit>

}
 8001cbc:	bf00      	nop
 8001cbe:	3768      	adds	r7, #104	; 0x68
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	20001204 	.word	0x20001204
 8001cc8:	40012c00 	.word	0x40012c00

08001ccc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <HAL_TIM_Base_MspInit+0x38>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d10b      	bne.n	8001cf6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cde:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_TIM_Base_MspInit+0x3c>)
 8001ce0:	699b      	ldr	r3, [r3, #24]
 8001ce2:	4a09      	ldr	r2, [pc, #36]	; (8001d08 <HAL_TIM_Base_MspInit+0x3c>)
 8001ce4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ce8:	6193      	str	r3, [r2, #24]
 8001cea:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <HAL_TIM_Base_MspInit+0x3c>)
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	40012c00 	.word	0x40012c00
 8001d08:	40021000 	.word	0x40021000

08001d0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b088      	sub	sp, #32
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a11      	ldr	r2, [pc, #68]	; (8001d70 <HAL_TIM_MspPostInit+0x64>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d11b      	bne.n	8001d66 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2e:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <HAL_TIM_MspPostInit+0x68>)
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <HAL_TIM_MspPostInit+0x68>)
 8001d34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d38:	6153      	str	r3, [r2, #20]
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <HAL_TIM_MspPostInit+0x68>)
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d42:	60bb      	str	r3, [r7, #8]
 8001d44:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d46:	2301      	movs	r3, #1
 8001d48:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001d56:	2302      	movs	r3, #2
 8001d58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4805      	ldr	r0, [pc, #20]	; (8001d78 <HAL_TIM_MspPostInit+0x6c>)
 8001d62:	f000 f94d 	bl	8002000 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d66:	bf00      	nop
 8001d68:	3720      	adds	r7, #32
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	40012c00 	.word	0x40012c00
 8001d74:	40021000 	.word	0x40021000
 8001d78:	48000800 	.word	0x48000800

08001d7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d80:	480d      	ldr	r0, [pc, #52]	; (8001db8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d82:	490e      	ldr	r1, [pc, #56]	; (8001dbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d84:	4a0e      	ldr	r2, [pc, #56]	; (8001dc0 <LoopForever+0xe>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d88:	e002      	b.n	8001d90 <LoopCopyDataInit>

08001d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8e:	3304      	adds	r3, #4

08001d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d94:	d3f9      	bcc.n	8001d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d96:	4a0b      	ldr	r2, [pc, #44]	; (8001dc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d98:	4c0b      	ldr	r4, [pc, #44]	; (8001dc8 <LoopForever+0x16>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d9c:	e001      	b.n	8001da2 <LoopFillZerobss>

08001d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da0:	3204      	adds	r2, #4

08001da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da4:	d3fb      	bcc.n	8001d9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001da6:	f7ff fed3 	bl	8001b50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001daa:	f005 f8c7 	bl	8006f3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dae:	f7ff fd51 	bl	8001854 <main>

08001db2 <LoopForever>:

LoopForever:
    b LoopForever
 8001db2:	e7fe      	b.n	8001db2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001db4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dbc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001dc0:	08007594 	.word	0x08007594
  ldr r2, =_sbss
 8001dc4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001dc8:	20001258 	.word	0x20001258

08001dcc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dcc:	e7fe      	b.n	8001dcc <ADC1_2_IRQHandler>
	...

08001dd0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <HAL_Init+0x28>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a07      	ldr	r2, [pc, #28]	; (8001df8 <HAL_Init+0x28>)
 8001dda:	f043 0310 	orr.w	r3, r3, #16
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001de0:	2003      	movs	r0, #3
 8001de2:	f000 f8d8 	bl	8001f96 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de6:	2000      	movs	r0, #0
 8001de8:	f7ff fde0 	bl	80019ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dec:	f7ff fdba 	bl	8001964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40022000 	.word	0x40022000

08001dfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_IncTick+0x20>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_IncTick+0x24>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <HAL_IncTick+0x24>)
 8001e0e:	6013      	str	r3, [r2, #0]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000008 	.word	0x20000008
 8001e20:	20001250 	.word	0x20001250

08001e24 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return uwTick;  
 8001e28:	4b03      	ldr	r3, [pc, #12]	; (8001e38 <HAL_GetTick+0x14>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20001250 	.word	0x20001250

08001e3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6e:	4a04      	ldr	r2, [pc, #16]	; (8001e80 <__NVIC_SetPriorityGrouping+0x44>)
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	60d3      	str	r3, [r2, #12]
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <__NVIC_GetPriorityGrouping+0x18>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	f003 0307 	and.w	r3, r3, #7
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	db0b      	blt.n	8001eca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	f003 021f 	and.w	r2, r3, #31
 8001eb8:	4907      	ldr	r1, [pc, #28]	; (8001ed8 <__NVIC_EnableIRQ+0x38>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	095b      	lsrs	r3, r3, #5
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	e000e100 	.word	0xe000e100

08001edc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	6039      	str	r1, [r7, #0]
 8001ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	db0a      	blt.n	8001f06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	490c      	ldr	r1, [pc, #48]	; (8001f28 <__NVIC_SetPriority+0x4c>)
 8001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efa:	0112      	lsls	r2, r2, #4
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	440b      	add	r3, r1
 8001f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f04:	e00a      	b.n	8001f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	b2da      	uxtb	r2, r3
 8001f0a:	4908      	ldr	r1, [pc, #32]	; (8001f2c <__NVIC_SetPriority+0x50>)
 8001f0c:	79fb      	ldrb	r3, [r7, #7]
 8001f0e:	f003 030f 	and.w	r3, r3, #15
 8001f12:	3b04      	subs	r3, #4
 8001f14:	0112      	lsls	r2, r2, #4
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	440b      	add	r3, r1
 8001f1a:	761a      	strb	r2, [r3, #24]
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000e100 	.word	0xe000e100
 8001f2c:	e000ed00 	.word	0xe000ed00

08001f30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	f1c3 0307 	rsb	r3, r3, #7
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	bf28      	it	cs
 8001f4e:	2304      	movcs	r3, #4
 8001f50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3304      	adds	r3, #4
 8001f56:	2b06      	cmp	r3, #6
 8001f58:	d902      	bls.n	8001f60 <NVIC_EncodePriority+0x30>
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3b03      	subs	r3, #3
 8001f5e:	e000      	b.n	8001f62 <NVIC_EncodePriority+0x32>
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f64:	f04f 32ff 	mov.w	r2, #4294967295
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43da      	mvns	r2, r3
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	401a      	ands	r2, r3
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f78:	f04f 31ff 	mov.w	r1, #4294967295
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f82:	43d9      	mvns	r1, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	4313      	orrs	r3, r2
         );
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3724      	adds	r7, #36	; 0x24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff ff4c 	bl	8001e3c <__NVIC_SetPriorityGrouping>
}
 8001fa4:	bf00      	nop
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fbe:	f7ff ff61 	bl	8001e84 <__NVIC_GetPriorityGrouping>
 8001fc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	6978      	ldr	r0, [r7, #20]
 8001fca:	f7ff ffb1 	bl	8001f30 <NVIC_EncodePriority>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff ff80 	bl	8001edc <__NVIC_SetPriority>
}
 8001fdc:	bf00      	nop
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	4603      	mov	r3, r0
 8001fec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff ff54 	bl	8001ea0 <__NVIC_EnableIRQ>
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800200e:	e160      	b.n	80022d2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	2101      	movs	r1, #1
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	4013      	ands	r3, r2
 800201e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 8152 	beq.w	80022cc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d00b      	beq.n	8002048 <HAL_GPIO_Init+0x48>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b02      	cmp	r3, #2
 8002036:	d007      	beq.n	8002048 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800203c:	2b11      	cmp	r3, #17
 800203e:	d003      	beq.n	8002048 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b12      	cmp	r3, #18
 8002046:	d130      	bne.n	80020aa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	2203      	movs	r2, #3
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	43db      	mvns	r3, r3
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4013      	ands	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4313      	orrs	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800207e:	2201      	movs	r2, #1
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	091b      	lsrs	r3, r3, #4
 8002094:	f003 0201 	and.w	r2, r3, #1
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	2203      	movs	r2, #3
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43db      	mvns	r3, r3
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	4013      	ands	r3, r2
 80020c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0xea>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b12      	cmp	r3, #18
 80020e8:	d123      	bne.n	8002132 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	08da      	lsrs	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3208      	adds	r2, #8
 80020f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	220f      	movs	r2, #15
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	4013      	ands	r3, r2
 800210c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	08da      	lsrs	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3208      	adds	r2, #8
 800212c:	6939      	ldr	r1, [r7, #16]
 800212e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	2203      	movs	r2, #3
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	4013      	ands	r3, r2
 8002148:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0203 	and.w	r2, r3, #3
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	693a      	ldr	r2, [r7, #16]
 8002164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 80ac 	beq.w	80022cc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002174:	4b5e      	ldr	r3, [pc, #376]	; (80022f0 <HAL_GPIO_Init+0x2f0>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	4a5d      	ldr	r2, [pc, #372]	; (80022f0 <HAL_GPIO_Init+0x2f0>)
 800217a:	f043 0301 	orr.w	r3, r3, #1
 800217e:	6193      	str	r3, [r2, #24]
 8002180:	4b5b      	ldr	r3, [pc, #364]	; (80022f0 <HAL_GPIO_Init+0x2f0>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800218c:	4a59      	ldr	r2, [pc, #356]	; (80022f4 <HAL_GPIO_Init+0x2f4>)
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	089b      	lsrs	r3, r3, #2
 8002192:	3302      	adds	r3, #2
 8002194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002198:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f003 0303 	and.w	r3, r3, #3
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	220f      	movs	r2, #15
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021b6:	d025      	beq.n	8002204 <HAL_GPIO_Init+0x204>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a4f      	ldr	r2, [pc, #316]	; (80022f8 <HAL_GPIO_Init+0x2f8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d01f      	beq.n	8002200 <HAL_GPIO_Init+0x200>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a4e      	ldr	r2, [pc, #312]	; (80022fc <HAL_GPIO_Init+0x2fc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d019      	beq.n	80021fc <HAL_GPIO_Init+0x1fc>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a4d      	ldr	r2, [pc, #308]	; (8002300 <HAL_GPIO_Init+0x300>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d013      	beq.n	80021f8 <HAL_GPIO_Init+0x1f8>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a4c      	ldr	r2, [pc, #304]	; (8002304 <HAL_GPIO_Init+0x304>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d00d      	beq.n	80021f4 <HAL_GPIO_Init+0x1f4>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a4b      	ldr	r2, [pc, #300]	; (8002308 <HAL_GPIO_Init+0x308>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d007      	beq.n	80021f0 <HAL_GPIO_Init+0x1f0>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a4a      	ldr	r2, [pc, #296]	; (800230c <HAL_GPIO_Init+0x30c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d101      	bne.n	80021ec <HAL_GPIO_Init+0x1ec>
 80021e8:	2306      	movs	r3, #6
 80021ea:	e00c      	b.n	8002206 <HAL_GPIO_Init+0x206>
 80021ec:	2307      	movs	r3, #7
 80021ee:	e00a      	b.n	8002206 <HAL_GPIO_Init+0x206>
 80021f0:	2305      	movs	r3, #5
 80021f2:	e008      	b.n	8002206 <HAL_GPIO_Init+0x206>
 80021f4:	2304      	movs	r3, #4
 80021f6:	e006      	b.n	8002206 <HAL_GPIO_Init+0x206>
 80021f8:	2303      	movs	r3, #3
 80021fa:	e004      	b.n	8002206 <HAL_GPIO_Init+0x206>
 80021fc:	2302      	movs	r3, #2
 80021fe:	e002      	b.n	8002206 <HAL_GPIO_Init+0x206>
 8002200:	2301      	movs	r3, #1
 8002202:	e000      	b.n	8002206 <HAL_GPIO_Init+0x206>
 8002204:	2300      	movs	r3, #0
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	f002 0203 	and.w	r2, r2, #3
 800220c:	0092      	lsls	r2, r2, #2
 800220e:	4093      	lsls	r3, r2
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002216:	4937      	ldr	r1, [pc, #220]	; (80022f4 <HAL_GPIO_Init+0x2f4>)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	089b      	lsrs	r3, r3, #2
 800221c:	3302      	adds	r3, #2
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002224:	4b3a      	ldr	r3, [pc, #232]	; (8002310 <HAL_GPIO_Init+0x310>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	43db      	mvns	r3, r3
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	4013      	ands	r3, r2
 8002232:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002248:	4a31      	ldr	r2, [pc, #196]	; (8002310 <HAL_GPIO_Init+0x310>)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800224e:	4b30      	ldr	r3, [pc, #192]	; (8002310 <HAL_GPIO_Init+0x310>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	43db      	mvns	r3, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4013      	ands	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	4313      	orrs	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002272:	4a27      	ldr	r2, [pc, #156]	; (8002310 <HAL_GPIO_Init+0x310>)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002278:	4b25      	ldr	r3, [pc, #148]	; (8002310 <HAL_GPIO_Init+0x310>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	43db      	mvns	r3, r3
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	4013      	ands	r3, r2
 8002286:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800229c:	4a1c      	ldr	r2, [pc, #112]	; (8002310 <HAL_GPIO_Init+0x310>)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a2:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <HAL_GPIO_Init+0x310>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4013      	ands	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80022be:	693a      	ldr	r2, [r7, #16]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80022c6:	4a12      	ldr	r2, [pc, #72]	; (8002310 <HAL_GPIO_Init+0x310>)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	3301      	adds	r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f47f ae97 	bne.w	8002010 <HAL_GPIO_Init+0x10>
  }
}
 80022e2:	bf00      	nop
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40010000 	.word	0x40010000
 80022f8:	48000400 	.word	0x48000400
 80022fc:	48000800 	.word	0x48000800
 8002300:	48000c00 	.word	0x48000c00
 8002304:	48001000 	.word	0x48001000
 8002308:	48001400 	.word	0x48001400
 800230c:	48001800 	.word	0x48001800
 8002310:	40010400 	.word	0x40010400

08002314 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800231a:	af00      	add	r7, sp, #0
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002320:	1d3b      	adds	r3, r7, #4
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	f000 bf01 	b.w	8003130 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 8160 	beq.w	80025fe <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800233e:	4bae      	ldr	r3, [pc, #696]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b04      	cmp	r3, #4
 8002348:	d00c      	beq.n	8002364 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800234a:	4bab      	ldr	r3, [pc, #684]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b08      	cmp	r3, #8
 8002354:	d159      	bne.n	800240a <HAL_RCC_OscConfig+0xf6>
 8002356:	4ba8      	ldr	r3, [pc, #672]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800235e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002362:	d152      	bne.n	800240a <HAL_RCC_OscConfig+0xf6>
 8002364:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002368:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002370:	fa93 f3a3 	rbit	r3, r3
 8002374:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002378:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	fab3 f383 	clz	r3, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b01      	cmp	r3, #1
 800238e:	d102      	bne.n	8002396 <HAL_RCC_OscConfig+0x82>
 8002390:	4b99      	ldr	r3, [pc, #612]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	e015      	b.n	80023c2 <HAL_RCC_OscConfig+0xae>
 8002396:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800239a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80023aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023ae:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80023b2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80023be:	4b8e      	ldr	r3, [pc, #568]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 80023c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023c6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80023ca:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80023ce:	fa92 f2a2 	rbit	r2, r2
 80023d2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80023d6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80023da:	fab2 f282 	clz	r2, r2
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	f042 0220 	orr.w	r2, r2, #32
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	f002 021f 	and.w	r2, r2, #31
 80023ea:	2101      	movs	r1, #1
 80023ec:	fa01 f202 	lsl.w	r2, r1, r2
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 8102 	beq.w	80025fc <HAL_RCC_OscConfig+0x2e8>
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f040 80fc 	bne.w	80025fc <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	f000 be93 	b.w	8003130 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002414:	d106      	bne.n	8002424 <HAL_RCC_OscConfig+0x110>
 8002416:	4b78      	ldr	r3, [pc, #480]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a77      	ldr	r2, [pc, #476]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 800241c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e030      	b.n	8002486 <HAL_RCC_OscConfig+0x172>
 8002424:	1d3b      	adds	r3, r7, #4
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0x134>
 800242e:	4b72      	ldr	r3, [pc, #456]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a71      	ldr	r2, [pc, #452]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 8002434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	4b6f      	ldr	r3, [pc, #444]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a6e      	ldr	r2, [pc, #440]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 8002440:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e01e      	b.n	8002486 <HAL_RCC_OscConfig+0x172>
 8002448:	1d3b      	adds	r3, r7, #4
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002452:	d10c      	bne.n	800246e <HAL_RCC_OscConfig+0x15a>
 8002454:	4b68      	ldr	r3, [pc, #416]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a67      	ldr	r2, [pc, #412]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 800245a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800245e:	6013      	str	r3, [r2, #0]
 8002460:	4b65      	ldr	r3, [pc, #404]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a64      	ldr	r2, [pc, #400]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 8002466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246a:	6013      	str	r3, [r2, #0]
 800246c:	e00b      	b.n	8002486 <HAL_RCC_OscConfig+0x172>
 800246e:	4b62      	ldr	r3, [pc, #392]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a61      	ldr	r2, [pc, #388]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 8002474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	4b5f      	ldr	r3, [pc, #380]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a5e      	ldr	r2, [pc, #376]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 8002480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002484:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002486:	1d3b      	adds	r3, r7, #4
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d059      	beq.n	8002544 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002490:	f7ff fcc8 	bl	8001e24 <HAL_GetTick>
 8002494:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002498:	e00a      	b.n	80024b0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800249a:	f7ff fcc3 	bl	8001e24 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	; 0x64
 80024a8:	d902      	bls.n	80024b0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	f000 be40 	b.w	8003130 <HAL_RCC_OscConfig+0xe1c>
 80024b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024b4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80024bc:	fa93 f3a3 	rbit	r3, r3
 80024c0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80024c4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c8:	fab3 f383 	clz	r3, r3
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d102      	bne.n	80024e2 <HAL_RCC_OscConfig+0x1ce>
 80024dc:	4b46      	ldr	r3, [pc, #280]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	e015      	b.n	800250e <HAL_RCC_OscConfig+0x1fa>
 80024e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024e6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80024f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024fa:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80024fe:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800250a:	4b3b      	ldr	r3, [pc, #236]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002512:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002516:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800251a:	fa92 f2a2 	rbit	r2, r2
 800251e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002522:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002526:	fab2 f282 	clz	r2, r2
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	f042 0220 	orr.w	r2, r2, #32
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	f002 021f 	and.w	r2, r2, #31
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f202 	lsl.w	r2, r1, r2
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0ab      	beq.n	800249a <HAL_RCC_OscConfig+0x186>
 8002542:	e05c      	b.n	80025fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7ff fc6e 	bl	8001e24 <HAL_GetTick>
 8002548:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800254e:	f7ff fc69 	bl	8001e24 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b64      	cmp	r3, #100	; 0x64
 800255c:	d902      	bls.n	8002564 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	f000 bde6 	b.w	8003130 <HAL_RCC_OscConfig+0xe1c>
 8002564:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002568:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8002570:	fa93 f3a3 	rbit	r3, r3
 8002574:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8002578:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b01      	cmp	r3, #1
 800258e:	d102      	bne.n	8002596 <HAL_RCC_OscConfig+0x282>
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	e015      	b.n	80025c2 <HAL_RCC_OscConfig+0x2ae>
 8002596:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800259a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80025a2:	fa93 f3a3 	rbit	r3, r3
 80025a6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80025aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ae:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80025b2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025b6:	fa93 f3a3 	rbit	r3, r3
 80025ba:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_RCC_OscConfig+0x2e4>)
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025c6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80025ca:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80025ce:	fa92 f2a2 	rbit	r2, r2
 80025d2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80025d6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80025da:	fab2 f282 	clz	r2, r2
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	f042 0220 	orr.w	r2, r2, #32
 80025e4:	b2d2      	uxtb	r2, r2
 80025e6:	f002 021f 	and.w	r2, r2, #31
 80025ea:	2101      	movs	r1, #1
 80025ec:	fa01 f202 	lsl.w	r2, r1, r2
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1ab      	bne.n	800254e <HAL_RCC_OscConfig+0x23a>
 80025f6:	e002      	b.n	80025fe <HAL_RCC_OscConfig+0x2ea>
 80025f8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 8170 	beq.w	80028ee <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800260e:	4bd0      	ldr	r3, [pc, #832]	; (8002950 <HAL_RCC_OscConfig+0x63c>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00c      	beq.n	8002634 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800261a:	4bcd      	ldr	r3, [pc, #820]	; (8002950 <HAL_RCC_OscConfig+0x63c>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	2b08      	cmp	r3, #8
 8002624:	d16d      	bne.n	8002702 <HAL_RCC_OscConfig+0x3ee>
 8002626:	4bca      	ldr	r3, [pc, #808]	; (8002950 <HAL_RCC_OscConfig+0x63c>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800262e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002632:	d166      	bne.n	8002702 <HAL_RCC_OscConfig+0x3ee>
 8002634:	2302      	movs	r3, #2
 8002636:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8002646:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	095b      	lsrs	r3, r3, #5
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b01      	cmp	r3, #1
 800265c:	d102      	bne.n	8002664 <HAL_RCC_OscConfig+0x350>
 800265e:	4bbc      	ldr	r3, [pc, #752]	; (8002950 <HAL_RCC_OscConfig+0x63c>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	e013      	b.n	800268c <HAL_RCC_OscConfig+0x378>
 8002664:	2302      	movs	r3, #2
 8002666:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002676:	2302      	movs	r3, #2
 8002678:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800267c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002688:	4bb1      	ldr	r3, [pc, #708]	; (8002950 <HAL_RCC_OscConfig+0x63c>)
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	2202      	movs	r2, #2
 800268e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002692:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002696:	fa92 f2a2 	rbit	r2, r2
 800269a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800269e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80026a2:	fab2 f282 	clz	r2, r2
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	f042 0220 	orr.w	r2, r2, #32
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	f002 021f 	and.w	r2, r2, #31
 80026b2:	2101      	movs	r1, #1
 80026b4:	fa01 f202 	lsl.w	r2, r1, r2
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <HAL_RCC_OscConfig+0x3ba>
 80026be:	1d3b      	adds	r3, r7, #4
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d002      	beq.n	80026ce <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f000 bd31 	b.w	8003130 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ce:	4ba0      	ldr	r3, [pc, #640]	; (8002950 <HAL_RCC_OscConfig+0x63c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	21f8      	movs	r1, #248	; 0xf8
 80026de:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80026e6:	fa91 f1a1 	rbit	r1, r1
 80026ea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80026ee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80026f2:	fab1 f181 	clz	r1, r1
 80026f6:	b2c9      	uxtb	r1, r1
 80026f8:	408b      	lsls	r3, r1
 80026fa:	4995      	ldr	r1, [pc, #596]	; (8002950 <HAL_RCC_OscConfig+0x63c>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002700:	e0f5      	b.n	80028ee <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002702:	1d3b      	adds	r3, r7, #4
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 8085 	beq.w	8002818 <HAL_RCC_OscConfig+0x504>
 800270e:	2301      	movs	r3, #1
 8002710:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002714:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002718:	fa93 f3a3 	rbit	r3, r3
 800271c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8002720:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002724:	fab3 f383 	clz	r3, r3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800272e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	461a      	mov	r2, r3
 8002736:	2301      	movs	r3, #1
 8002738:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273a:	f7ff fb73 	bl	8001e24 <HAL_GetTick>
 800273e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002742:	e00a      	b.n	800275a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002744:	f7ff fb6e 	bl	8001e24 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d902      	bls.n	800275a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	f000 bceb 	b.w	8003130 <HAL_RCC_OscConfig+0xe1c>
 800275a:	2302      	movs	r3, #2
 800275c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002764:	fa93 f3a3 	rbit	r3, r3
 8002768:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800276c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002770:	fab3 f383 	clz	r3, r3
 8002774:	b2db      	uxtb	r3, r3
 8002776:	095b      	lsrs	r3, r3, #5
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b01      	cmp	r3, #1
 8002782:	d102      	bne.n	800278a <HAL_RCC_OscConfig+0x476>
 8002784:	4b72      	ldr	r3, [pc, #456]	; (8002950 <HAL_RCC_OscConfig+0x63c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	e013      	b.n	80027b2 <HAL_RCC_OscConfig+0x49e>
 800278a:	2302      	movs	r3, #2
 800278c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002794:	fa93 f3a3 	rbit	r3, r3
 8002798:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800279c:	2302      	movs	r3, #2
 800279e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80027a2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80027ae:	4b68      	ldr	r3, [pc, #416]	; (8002950 <HAL_RCC_OscConfig+0x63c>)
 80027b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b2:	2202      	movs	r2, #2
 80027b4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80027b8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80027bc:	fa92 f2a2 	rbit	r2, r2
 80027c0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80027c4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80027c8:	fab2 f282 	clz	r2, r2
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	f042 0220 	orr.w	r2, r2, #32
 80027d2:	b2d2      	uxtb	r2, r2
 80027d4:	f002 021f 	and.w	r2, r2, #31
 80027d8:	2101      	movs	r1, #1
 80027da:	fa01 f202 	lsl.w	r2, r1, r2
 80027de:	4013      	ands	r3, r2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0af      	beq.n	8002744 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e4:	4b5a      	ldr	r3, [pc, #360]	; (8002950 <HAL_RCC_OscConfig+0x63c>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	21f8      	movs	r1, #248	; 0xf8
 80027f4:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80027fc:	fa91 f1a1 	rbit	r1, r1
 8002800:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8002804:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002808:	fab1 f181 	clz	r1, r1
 800280c:	b2c9      	uxtb	r1, r1
 800280e:	408b      	lsls	r3, r1
 8002810:	494f      	ldr	r1, [pc, #316]	; (8002950 <HAL_RCC_OscConfig+0x63c>)
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]
 8002816:	e06a      	b.n	80028ee <HAL_RCC_OscConfig+0x5da>
 8002818:	2301      	movs	r3, #1
 800281a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800282a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282e:	fab3 f383 	clz	r3, r3
 8002832:	b2db      	uxtb	r3, r3
 8002834:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002838:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	461a      	mov	r2, r3
 8002840:	2300      	movs	r3, #0
 8002842:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7ff faee 	bl	8001e24 <HAL_GetTick>
 8002848:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284c:	e00a      	b.n	8002864 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800284e:	f7ff fae9 	bl	8001e24 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d902      	bls.n	8002864 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	f000 bc66 	b.w	8003130 <HAL_RCC_OscConfig+0xe1c>
 8002864:	2302      	movs	r3, #2
 8002866:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800286e:	fa93 f3a3 	rbit	r3, r3
 8002872:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8002876:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800287a:	fab3 f383 	clz	r3, r3
 800287e:	b2db      	uxtb	r3, r3
 8002880:	095b      	lsrs	r3, r3, #5
 8002882:	b2db      	uxtb	r3, r3
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b01      	cmp	r3, #1
 800288c:	d102      	bne.n	8002894 <HAL_RCC_OscConfig+0x580>
 800288e:	4b30      	ldr	r3, [pc, #192]	; (8002950 <HAL_RCC_OscConfig+0x63c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	e013      	b.n	80028bc <HAL_RCC_OscConfig+0x5a8>
 8002894:	2302      	movs	r3, #2
 8002896:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800289e:	fa93 f3a3 	rbit	r3, r3
 80028a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80028a6:	2302      	movs	r3, #2
 80028a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80028ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80028b0:	fa93 f3a3 	rbit	r3, r3
 80028b4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80028b8:	4b25      	ldr	r3, [pc, #148]	; (8002950 <HAL_RCC_OscConfig+0x63c>)
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	2202      	movs	r2, #2
 80028be:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80028c2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80028c6:	fa92 f2a2 	rbit	r2, r2
 80028ca:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80028ce:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80028d2:	fab2 f282 	clz	r2, r2
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	f042 0220 	orr.w	r2, r2, #32
 80028dc:	b2d2      	uxtb	r2, r2
 80028de:	f002 021f 	and.w	r2, r2, #31
 80028e2:	2101      	movs	r1, #1
 80028e4:	fa01 f202 	lsl.w	r2, r1, r2
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1af      	bne.n	800284e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 80da 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028fe:	1d3b      	adds	r3, r7, #4
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d069      	beq.n	80029dc <HAL_RCC_OscConfig+0x6c8>
 8002908:	2301      	movs	r3, #1
 800290a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002912:	fa93 f3a3 	rbit	r3, r3
 8002916:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800291a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800291e:	fab3 f383 	clz	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <HAL_RCC_OscConfig+0x640>)
 8002928:	4413      	add	r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	461a      	mov	r2, r3
 800292e:	2301      	movs	r3, #1
 8002930:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002932:	f7ff fa77 	bl	8001e24 <HAL_GetTick>
 8002936:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800293a:	e00d      	b.n	8002958 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800293c:	f7ff fa72 	bl	8001e24 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d905      	bls.n	8002958 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e3ef      	b.n	8003130 <HAL_RCC_OscConfig+0xe1c>
 8002950:	40021000 	.word	0x40021000
 8002954:	10908120 	.word	0x10908120
 8002958:	2302      	movs	r3, #2
 800295a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002962:	fa93 f2a3 	rbit	r2, r3
 8002966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002970:	2202      	movs	r2, #2
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	fa93 f2a3 	rbit	r2, r3
 800297e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002988:	2202      	movs	r2, #2
 800298a:	601a      	str	r2, [r3, #0]
 800298c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	fa93 f2a3 	rbit	r2, r3
 8002996:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800299a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299c:	4ba4      	ldr	r3, [pc, #656]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 800299e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80029a4:	2102      	movs	r1, #2
 80029a6:	6019      	str	r1, [r3, #0]
 80029a8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	fa93 f1a3 	rbit	r1, r3
 80029b2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80029b6:	6019      	str	r1, [r3, #0]
  return result;
 80029b8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	f003 031f 	and.w	r3, r3, #31
 80029ce:	2101      	movs	r1, #1
 80029d0:	fa01 f303 	lsl.w	r3, r1, r3
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0b0      	beq.n	800293c <HAL_RCC_OscConfig+0x628>
 80029da:	e06a      	b.n	8002ab2 <HAL_RCC_OscConfig+0x79e>
 80029dc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80029e0:	2201      	movs	r2, #1
 80029e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	fa93 f2a3 	rbit	r2, r3
 80029ee:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80029f2:	601a      	str	r2, [r3, #0]
  return result;
 80029f4:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80029f8:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b8c      	ldr	r3, [pc, #560]	; (8002c34 <HAL_RCC_OscConfig+0x920>)
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a0e:	f7ff fa09 	bl	8001e24 <HAL_GetTick>
 8002a12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a16:	e009      	b.n	8002a2c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a18:	f7ff fa04 	bl	8001e24 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e381      	b.n	8003130 <HAL_RCC_OscConfig+0xe1c>
 8002a2c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a30:	2202      	movs	r2, #2
 8002a32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	fa93 f2a3 	rbit	r2, r3
 8002a3e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a48:	2202      	movs	r2, #2
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	fa93 f2a3 	rbit	r2, r3
 8002a56:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a60:	2202      	movs	r2, #2
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	fa93 f2a3 	rbit	r2, r3
 8002a6e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002a72:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a74:	4b6e      	ldr	r3, [pc, #440]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 8002a76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	6019      	str	r1, [r3, #0]
 8002a80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	fa93 f1a3 	rbit	r1, r3
 8002a8a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a8e:	6019      	str	r1, [r3, #0]
  return result;
 8002a90:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1b2      	bne.n	8002a18 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ab2:	1d3b      	adds	r3, r7, #4
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 8157 	beq.w	8002d70 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac8:	4b59      	ldr	r3, [pc, #356]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d112      	bne.n	8002afa <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ad4:	4b56      	ldr	r3, [pc, #344]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	4a55      	ldr	r2, [pc, #340]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 8002ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ade:	61d3      	str	r3, [r2, #28]
 8002ae0:	4b53      	ldr	r3, [pc, #332]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ae8:	f107 030c 	add.w	r3, r7, #12
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	f107 030c 	add.w	r3, r7, #12
 8002af2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002af4:	2301      	movs	r3, #1
 8002af6:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afa:	4b4f      	ldr	r3, [pc, #316]	; (8002c38 <HAL_RCC_OscConfig+0x924>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d11a      	bne.n	8002b3c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b06:	4b4c      	ldr	r3, [pc, #304]	; (8002c38 <HAL_RCC_OscConfig+0x924>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a4b      	ldr	r2, [pc, #300]	; (8002c38 <HAL_RCC_OscConfig+0x924>)
 8002b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b10:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b12:	f7ff f987 	bl	8001e24 <HAL_GetTick>
 8002b16:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1a:	e009      	b.n	8002b30 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1c:	f7ff f982 	bl	8001e24 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	2b64      	cmp	r3, #100	; 0x64
 8002b2a:	d901      	bls.n	8002b30 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e2ff      	b.n	8003130 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b30:	4b41      	ldr	r3, [pc, #260]	; (8002c38 <HAL_RCC_OscConfig+0x924>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0ef      	beq.n	8002b1c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b3c:	1d3b      	adds	r3, r7, #4
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d106      	bne.n	8002b54 <HAL_RCC_OscConfig+0x840>
 8002b46:	4b3a      	ldr	r3, [pc, #232]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	4a39      	ldr	r2, [pc, #228]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6213      	str	r3, [r2, #32]
 8002b52:	e02f      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a0>
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10c      	bne.n	8002b78 <HAL_RCC_OscConfig+0x864>
 8002b5e:	4b34      	ldr	r3, [pc, #208]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 8002b60:	6a1b      	ldr	r3, [r3, #32]
 8002b62:	4a33      	ldr	r2, [pc, #204]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 8002b64:	f023 0301 	bic.w	r3, r3, #1
 8002b68:	6213      	str	r3, [r2, #32]
 8002b6a:	4b31      	ldr	r3, [pc, #196]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 8002b6c:	6a1b      	ldr	r3, [r3, #32]
 8002b6e:	4a30      	ldr	r2, [pc, #192]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 8002b70:	f023 0304 	bic.w	r3, r3, #4
 8002b74:	6213      	str	r3, [r2, #32]
 8002b76:	e01d      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a0>
 8002b78:	1d3b      	adds	r3, r7, #4
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2b05      	cmp	r3, #5
 8002b80:	d10c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x888>
 8002b82:	4b2b      	ldr	r3, [pc, #172]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	4a2a      	ldr	r2, [pc, #168]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 8002b88:	f043 0304 	orr.w	r3, r3, #4
 8002b8c:	6213      	str	r3, [r2, #32]
 8002b8e:	4b28      	ldr	r3, [pc, #160]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	4a27      	ldr	r2, [pc, #156]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6213      	str	r3, [r2, #32]
 8002b9a:	e00b      	b.n	8002bb4 <HAL_RCC_OscConfig+0x8a0>
 8002b9c:	4b24      	ldr	r3, [pc, #144]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 8002b9e:	6a1b      	ldr	r3, [r3, #32]
 8002ba0:	4a23      	ldr	r2, [pc, #140]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 8002ba2:	f023 0301 	bic.w	r3, r3, #1
 8002ba6:	6213      	str	r3, [r2, #32]
 8002ba8:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 8002baa:	6a1b      	ldr	r3, [r3, #32]
 8002bac:	4a20      	ldr	r2, [pc, #128]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 8002bae:	f023 0304 	bic.w	r3, r3, #4
 8002bb2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bb4:	1d3b      	adds	r3, r7, #4
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d06a      	beq.n	8002c94 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bbe:	f7ff f931 	bl	8001e24 <HAL_GetTick>
 8002bc2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bc6:	e00b      	b.n	8002be0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc8:	f7ff f92c 	bl	8001e24 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e2a7      	b.n	8003130 <HAL_RCC_OscConfig+0xe1c>
 8002be0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002be4:	2202      	movs	r2, #2
 8002be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	fa93 f2a3 	rbit	r2, r3
 8002bf2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	fa93 f2a3 	rbit	r2, r3
 8002c0a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c0e:	601a      	str	r2, [r3, #0]
  return result;
 8002c10:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c14:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f043 0302 	orr.w	r3, r3, #2
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d108      	bne.n	8002c3c <HAL_RCC_OscConfig+0x928>
 8002c2a:	4b01      	ldr	r3, [pc, #4]	; (8002c30 <HAL_RCC_OscConfig+0x91c>)
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	e013      	b.n	8002c58 <HAL_RCC_OscConfig+0x944>
 8002c30:	40021000 	.word	0x40021000
 8002c34:	10908120 	.word	0x10908120
 8002c38:	40007000 	.word	0x40007000
 8002c3c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c40:	2202      	movs	r2, #2
 8002c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	fa93 f2a3 	rbit	r2, r3
 8002c4e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	4bc0      	ldr	r3, [pc, #768]	; (8002f58 <HAL_RCC_OscConfig+0xc44>)
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	6011      	str	r1, [r2, #0]
 8002c60:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002c64:	6812      	ldr	r2, [r2, #0]
 8002c66:	fa92 f1a2 	rbit	r1, r2
 8002c6a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c6e:	6011      	str	r1, [r2, #0]
  return result;
 8002c70:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	fab2 f282 	clz	r2, r2
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	f002 021f 	and.w	r2, r2, #31
 8002c86:	2101      	movs	r1, #1
 8002c88:	fa01 f202 	lsl.w	r2, r1, r2
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d09a      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x8b4>
 8002c92:	e063      	b.n	8002d5c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c94:	f7ff f8c6 	bl	8001e24 <HAL_GetTick>
 8002c98:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c9c:	e00b      	b.n	8002cb6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c9e:	f7ff f8c1 	bl	8001e24 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e23c      	b.n	8003130 <HAL_RCC_OscConfig+0xe1c>
 8002cb6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cba:	2202      	movs	r2, #2
 8002cbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	fa93 f2a3 	rbit	r2, r3
 8002cc8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	fa93 f2a3 	rbit	r2, r3
 8002ce0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002ce4:	601a      	str	r2, [r3, #0]
  return result;
 8002ce6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002cea:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cec:	fab3 f383 	clz	r3, r3
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	f043 0302 	orr.w	r3, r3, #2
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d102      	bne.n	8002d06 <HAL_RCC_OscConfig+0x9f2>
 8002d00:	4b95      	ldr	r3, [pc, #596]	; (8002f58 <HAL_RCC_OscConfig+0xc44>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	e00d      	b.n	8002d22 <HAL_RCC_OscConfig+0xa0e>
 8002d06:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d0e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	fa93 f2a3 	rbit	r2, r3
 8002d18:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	4b8e      	ldr	r3, [pc, #568]	; (8002f58 <HAL_RCC_OscConfig+0xc44>)
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002d26:	2102      	movs	r1, #2
 8002d28:	6011      	str	r1, [r2, #0]
 8002d2a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	fa92 f1a2 	rbit	r1, r2
 8002d34:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d38:	6011      	str	r1, [r2, #0]
  return result;
 8002d3a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	fab2 f282 	clz	r2, r2
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	f002 021f 	and.w	r2, r2, #31
 8002d50:	2101      	movs	r1, #1
 8002d52:	fa01 f202 	lsl.w	r2, r1, r2
 8002d56:	4013      	ands	r3, r2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1a0      	bne.n	8002c9e <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d5c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d105      	bne.n	8002d70 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d64:	4b7c      	ldr	r3, [pc, #496]	; (8002f58 <HAL_RCC_OscConfig+0xc44>)
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	4a7b      	ldr	r2, [pc, #492]	; (8002f58 <HAL_RCC_OscConfig+0xc44>)
 8002d6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d70:	1d3b      	adds	r3, r7, #4
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 81d9 	beq.w	800312e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d7c:	4b76      	ldr	r3, [pc, #472]	; (8002f58 <HAL_RCC_OscConfig+0xc44>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b08      	cmp	r3, #8
 8002d86:	f000 81a6 	beq.w	80030d6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d8a:	1d3b      	adds	r3, r7, #4
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	f040 811e 	bne.w	8002fd2 <HAL_RCC_OscConfig+0xcbe>
 8002d96:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002d9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	fa93 f2a3 	rbit	r2, r3
 8002daa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002dae:	601a      	str	r2, [r3, #0]
  return result;
 8002db0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002db4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2300      	movs	r3, #0
 8002dca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dcc:	f7ff f82a 	bl	8001e24 <HAL_GetTick>
 8002dd0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd4:	e009      	b.n	8002dea <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd6:	f7ff f825 	bl	8001e24 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1a2      	b.n	8003130 <HAL_RCC_OscConfig+0xe1c>
 8002dea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002dee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002df2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	fa93 f2a3 	rbit	r2, r3
 8002dfe:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e02:	601a      	str	r2, [r3, #0]
  return result;
 8002e04:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e08:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e0a:	fab3 f383 	clz	r3, r3
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	095b      	lsrs	r3, r3, #5
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d102      	bne.n	8002e24 <HAL_RCC_OscConfig+0xb10>
 8002e1e:	4b4e      	ldr	r3, [pc, #312]	; (8002f58 <HAL_RCC_OscConfig+0xc44>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	e01b      	b.n	8002e5c <HAL_RCC_OscConfig+0xb48>
 8002e24:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e2c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	fa93 f2a3 	rbit	r2, r3
 8002e38:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	fa93 f2a3 	rbit	r2, r3
 8002e52:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	4b3f      	ldr	r3, [pc, #252]	; (8002f58 <HAL_RCC_OscConfig+0xc44>)
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002e60:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e64:	6011      	str	r1, [r2, #0]
 8002e66:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	fa92 f1a2 	rbit	r1, r2
 8002e70:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e74:	6011      	str	r1, [r2, #0]
  return result;
 8002e76:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	fab2 f282 	clz	r2, r2
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	f042 0220 	orr.w	r2, r2, #32
 8002e86:	b2d2      	uxtb	r2, r2
 8002e88:	f002 021f 	and.w	r2, r2, #31
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d19e      	bne.n	8002dd6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e98:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <HAL_RCC_OscConfig+0xc44>)
 8002e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e9c:	f023 020f 	bic.w	r2, r3, #15
 8002ea0:	1d3b      	adds	r3, r7, #4
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	492c      	ldr	r1, [pc, #176]	; (8002f58 <HAL_RCC_OscConfig+0xc44>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002eac:	4b2a      	ldr	r3, [pc, #168]	; (8002f58 <HAL_RCC_OscConfig+0xc44>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002eb4:	1d3b      	adds	r3, r7, #4
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6a19      	ldr	r1, [r3, #32]
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69db      	ldr	r3, [r3, #28]
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	4925      	ldr	r1, [pc, #148]	; (8002f58 <HAL_RCC_OscConfig+0xc44>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	604b      	str	r3, [r1, #4]
 8002ec8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ecc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ed0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	fa93 f2a3 	rbit	r2, r3
 8002edc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ee0:	601a      	str	r2, [r3, #0]
  return result;
 8002ee2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ee6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ee8:	fab3 f383 	clz	r3, r3
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ef2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2301      	movs	r3, #1
 8002efc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002efe:	f7fe ff91 	bl	8001e24 <HAL_GetTick>
 8002f02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f06:	e009      	b.n	8002f1c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f08:	f7fe ff8c 	bl	8001e24 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e109      	b.n	8003130 <HAL_RCC_OscConfig+0xe1c>
 8002f1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	fa93 f2a3 	rbit	r2, r3
 8002f30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f34:	601a      	str	r2, [r3, #0]
  return result;
 8002f36:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f3a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f3c:	fab3 f383 	clz	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	f043 0301 	orr.w	r3, r3, #1
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCC_OscConfig+0xc48>
 8002f50:	4b01      	ldr	r3, [pc, #4]	; (8002f58 <HAL_RCC_OscConfig+0xc44>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	e01e      	b.n	8002f94 <HAL_RCC_OscConfig+0xc80>
 8002f56:	bf00      	nop
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	fa93 f2a3 	rbit	r2, r3
 8002f70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	fa93 f2a3 	rbit	r2, r3
 8002f8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	4b6a      	ldr	r3, [pc, #424]	; (800313c <HAL_RCC_OscConfig+0xe28>)
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002f98:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f9c:	6011      	str	r1, [r2, #0]
 8002f9e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	fa92 f1a2 	rbit	r1, r2
 8002fa8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002fac:	6011      	str	r1, [r2, #0]
  return result;
 8002fae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	fab2 f282 	clz	r2, r2
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	f042 0220 	orr.w	r2, r2, #32
 8002fbe:	b2d2      	uxtb	r2, r2
 8002fc0:	f002 021f 	and.w	r2, r2, #31
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d09b      	beq.n	8002f08 <HAL_RCC_OscConfig+0xbf4>
 8002fd0:	e0ad      	b.n	800312e <HAL_RCC_OscConfig+0xe1a>
 8002fd2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fd6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	fa93 f2a3 	rbit	r2, r3
 8002fe6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fea:	601a      	str	r2, [r3, #0]
  return result;
 8002fec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ff0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002ffc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	461a      	mov	r2, r3
 8003004:	2300      	movs	r3, #0
 8003006:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7fe ff0c 	bl	8001e24 <HAL_GetTick>
 800300c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003010:	e009      	b.n	8003026 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003012:	f7fe ff07 	bl	8001e24 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	2b02      	cmp	r3, #2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e084      	b.n	8003130 <HAL_RCC_OscConfig+0xe1c>
 8003026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800302a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800302e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	fa93 f2a3 	rbit	r2, r3
 800303a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800303e:	601a      	str	r2, [r3, #0]
  return result;
 8003040:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003044:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003046:	fab3 f383 	clz	r3, r3
 800304a:	b2db      	uxtb	r3, r3
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b01      	cmp	r3, #1
 8003058:	d102      	bne.n	8003060 <HAL_RCC_OscConfig+0xd4c>
 800305a:	4b38      	ldr	r3, [pc, #224]	; (800313c <HAL_RCC_OscConfig+0xe28>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	e01b      	b.n	8003098 <HAL_RCC_OscConfig+0xd84>
 8003060:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003064:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003068:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	fa93 f2a3 	rbit	r2, r3
 8003074:	f107 0320 	add.w	r3, r7, #32
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	f107 031c 	add.w	r3, r7, #28
 800307e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	f107 031c 	add.w	r3, r7, #28
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	fa93 f2a3 	rbit	r2, r3
 800308e:	f107 0318 	add.w	r3, r7, #24
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	4b29      	ldr	r3, [pc, #164]	; (800313c <HAL_RCC_OscConfig+0xe28>)
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	f107 0214 	add.w	r2, r7, #20
 800309c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030a0:	6011      	str	r1, [r2, #0]
 80030a2:	f107 0214 	add.w	r2, r7, #20
 80030a6:	6812      	ldr	r2, [r2, #0]
 80030a8:	fa92 f1a2 	rbit	r1, r2
 80030ac:	f107 0210 	add.w	r2, r7, #16
 80030b0:	6011      	str	r1, [r2, #0]
  return result;
 80030b2:	f107 0210 	add.w	r2, r7, #16
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	fab2 f282 	clz	r2, r2
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	f042 0220 	orr.w	r2, r2, #32
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	f002 021f 	and.w	r2, r2, #31
 80030c8:	2101      	movs	r1, #1
 80030ca:	fa01 f202 	lsl.w	r2, r1, r2
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d19e      	bne.n	8003012 <HAL_RCC_OscConfig+0xcfe>
 80030d4:	e02b      	b.n	800312e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030d6:	1d3b      	adds	r3, r7, #4
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e025      	b.n	8003130 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030e4:	4b15      	ldr	r3, [pc, #84]	; (800313c <HAL_RCC_OscConfig+0xe28>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80030ec:	4b13      	ldr	r3, [pc, #76]	; (800313c <HAL_RCC_OscConfig+0xe28>)
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80030f4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80030f8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80030fc:	1d3b      	adds	r3, r7, #4
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	429a      	cmp	r2, r3
 8003104:	d111      	bne.n	800312a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003106:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800310a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800310e:	1d3b      	adds	r3, r7, #4
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003114:	429a      	cmp	r2, r3
 8003116:	d108      	bne.n	800312a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003118:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800311c:	f003 020f 	and.w	r2, r3, #15
 8003120:	1d3b      	adds	r3, r7, #4
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003126:	429a      	cmp	r2, r3
 8003128:	d001      	beq.n	800312e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000

08003140 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b09e      	sub	sp, #120	; 0x78
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e162      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003158:	4b90      	ldr	r3, [pc, #576]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d910      	bls.n	8003188 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003166:	4b8d      	ldr	r3, [pc, #564]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 0207 	bic.w	r2, r3, #7
 800316e:	498b      	ldr	r1, [pc, #556]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003176:	4b89      	ldr	r3, [pc, #548]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e14a      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003194:	4b82      	ldr	r3, [pc, #520]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	497f      	ldr	r1, [pc, #508]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 80dc 	beq.w	800336c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d13c      	bne.n	8003236 <HAL_RCC_ClockConfig+0xf6>
 80031bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031c4:	fa93 f3a3 	rbit	r3, r3
 80031c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031cc:	fab3 f383 	clz	r3, r3
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d102      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xa6>
 80031e0:	4b6f      	ldr	r3, [pc, #444]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	e00f      	b.n	8003206 <HAL_RCC_ClockConfig+0xc6>
 80031e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031ee:	fa93 f3a3 	rbit	r3, r3
 80031f2:	667b      	str	r3, [r7, #100]	; 0x64
 80031f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031f8:	663b      	str	r3, [r7, #96]	; 0x60
 80031fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003202:	4b67      	ldr	r3, [pc, #412]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800320a:	65ba      	str	r2, [r7, #88]	; 0x58
 800320c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800320e:	fa92 f2a2 	rbit	r2, r2
 8003212:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003214:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003216:	fab2 f282 	clz	r2, r2
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	f042 0220 	orr.w	r2, r2, #32
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	f002 021f 	and.w	r2, r2, #31
 8003226:	2101      	movs	r1, #1
 8003228:	fa01 f202 	lsl.w	r2, r1, r2
 800322c:	4013      	ands	r3, r2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d17b      	bne.n	800332a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e0f3      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	2b02      	cmp	r3, #2
 800323c:	d13c      	bne.n	80032b8 <HAL_RCC_ClockConfig+0x178>
 800323e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003242:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800324c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324e:	fab3 f383 	clz	r3, r3
 8003252:	b2db      	uxtb	r3, r3
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	b2db      	uxtb	r3, r3
 8003258:	f043 0301 	orr.w	r3, r3, #1
 800325c:	b2db      	uxtb	r3, r3
 800325e:	2b01      	cmp	r3, #1
 8003260:	d102      	bne.n	8003268 <HAL_RCC_ClockConfig+0x128>
 8003262:	4b4f      	ldr	r3, [pc, #316]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	e00f      	b.n	8003288 <HAL_RCC_ClockConfig+0x148>
 8003268:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800326c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003270:	fa93 f3a3 	rbit	r3, r3
 8003274:	647b      	str	r3, [r7, #68]	; 0x44
 8003276:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800327a:	643b      	str	r3, [r7, #64]	; 0x40
 800327c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800327e:	fa93 f3a3 	rbit	r3, r3
 8003282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003284:	4b46      	ldr	r3, [pc, #280]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800328c:	63ba      	str	r2, [r7, #56]	; 0x38
 800328e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003290:	fa92 f2a2 	rbit	r2, r2
 8003294:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003298:	fab2 f282 	clz	r2, r2
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	f042 0220 	orr.w	r2, r2, #32
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	f002 021f 	and.w	r2, r2, #31
 80032a8:	2101      	movs	r1, #1
 80032aa:	fa01 f202 	lsl.w	r2, r1, r2
 80032ae:	4013      	ands	r3, r2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d13a      	bne.n	800332a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0b2      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
 80032b8:	2302      	movs	r3, #2
 80032ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c6:	fab3 f383 	clz	r3, r3
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	095b      	lsrs	r3, r3, #5
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	f043 0301 	orr.w	r3, r3, #1
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d102      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x1a0>
 80032da:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	e00d      	b.n	80032fc <HAL_RCC_ClockConfig+0x1bc>
 80032e0:	2302      	movs	r3, #2
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	fa93 f3a3 	rbit	r3, r3
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
 80032ec:	2302      	movs	r3, #2
 80032ee:	623b      	str	r3, [r7, #32]
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	61fb      	str	r3, [r7, #28]
 80032f8:	4b29      	ldr	r3, [pc, #164]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 80032fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fc:	2202      	movs	r2, #2
 80032fe:	61ba      	str	r2, [r7, #24]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	fa92 f2a2 	rbit	r2, r2
 8003306:	617a      	str	r2, [r7, #20]
  return result;
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	fab2 f282 	clz	r2, r2
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	f042 0220 	orr.w	r2, r2, #32
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	f002 021f 	and.w	r2, r2, #31
 800331a:	2101      	movs	r1, #1
 800331c:	fa01 f202 	lsl.w	r2, r1, r2
 8003320:	4013      	ands	r3, r2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e079      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332a:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f023 0203 	bic.w	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	491a      	ldr	r1, [pc, #104]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 8003338:	4313      	orrs	r3, r2
 800333a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800333c:	f7fe fd72 	bl	8001e24 <HAL_GetTick>
 8003340:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003342:	e00a      	b.n	800335a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003344:	f7fe fd6e 	bl	8001e24 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e061      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <HAL_RCC_ClockConfig+0x260>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f003 020c 	and.w	r2, r3, #12
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	429a      	cmp	r2, r3
 800336a:	d1eb      	bne.n	8003344 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d214      	bcs.n	80033a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b08      	ldr	r3, [pc, #32]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 0207 	bic.w	r2, r3, #7
 8003382:	4906      	ldr	r1, [pc, #24]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	4313      	orrs	r3, r2
 8003388:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b04      	ldr	r3, [pc, #16]	; (800339c <HAL_RCC_ClockConfig+0x25c>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0307 	and.w	r3, r3, #7
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d005      	beq.n	80033a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e040      	b.n	800341e <HAL_RCC_ClockConfig+0x2de>
 800339c:	40022000 	.word	0x40022000
 80033a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d008      	beq.n	80033c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b0:	4b1d      	ldr	r3, [pc, #116]	; (8003428 <HAL_RCC_ClockConfig+0x2e8>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	491a      	ldr	r1, [pc, #104]	; (8003428 <HAL_RCC_ClockConfig+0x2e8>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033ce:	4b16      	ldr	r3, [pc, #88]	; (8003428 <HAL_RCC_ClockConfig+0x2e8>)
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4912      	ldr	r1, [pc, #72]	; (8003428 <HAL_RCC_ClockConfig+0x2e8>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80033e2:	f000 f829 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 80033e6:	4601      	mov	r1, r0
 80033e8:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <HAL_RCC_ClockConfig+0x2e8>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033f0:	22f0      	movs	r2, #240	; 0xf0
 80033f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	fa92 f2a2 	rbit	r2, r2
 80033fa:	60fa      	str	r2, [r7, #12]
  return result;
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	fab2 f282 	clz	r2, r2
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	40d3      	lsrs	r3, r2
 8003406:	4a09      	ldr	r2, [pc, #36]	; (800342c <HAL_RCC_ClockConfig+0x2ec>)
 8003408:	5cd3      	ldrb	r3, [r2, r3]
 800340a:	fa21 f303 	lsr.w	r3, r1, r3
 800340e:	4a08      	ldr	r2, [pc, #32]	; (8003430 <HAL_RCC_ClockConfig+0x2f0>)
 8003410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003412:	4b08      	ldr	r3, [pc, #32]	; (8003434 <HAL_RCC_ClockConfig+0x2f4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7fe fac8 	bl	80019ac <HAL_InitTick>
  
  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3778      	adds	r7, #120	; 0x78
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40021000 	.word	0x40021000
 800342c:	08007420 	.word	0x08007420
 8003430:	20000000 	.word	0x20000000
 8003434:	20000004 	.word	0x20000004

08003438 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003438:	b480      	push	{r7}
 800343a:	b08b      	sub	sp, #44	; 0x2c
 800343c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	2300      	movs	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	2300      	movs	r3, #0
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003452:	4b2a      	ldr	r3, [pc, #168]	; (80034fc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b04      	cmp	r3, #4
 8003460:	d002      	beq.n	8003468 <HAL_RCC_GetSysClockFreq+0x30>
 8003462:	2b08      	cmp	r3, #8
 8003464:	d003      	beq.n	800346e <HAL_RCC_GetSysClockFreq+0x36>
 8003466:	e03f      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003468:	4b25      	ldr	r3, [pc, #148]	; (8003500 <HAL_RCC_GetSysClockFreq+0xc8>)
 800346a:	623b      	str	r3, [r7, #32]
      break;
 800346c:	e03f      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003474:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003478:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	fa92 f2a2 	rbit	r2, r2
 8003480:	607a      	str	r2, [r7, #4]
  return result;
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	fab2 f282 	clz	r2, r2
 8003488:	b2d2      	uxtb	r2, r2
 800348a:	40d3      	lsrs	r3, r2
 800348c:	4a1d      	ldr	r2, [pc, #116]	; (8003504 <HAL_RCC_GetSysClockFreq+0xcc>)
 800348e:	5cd3      	ldrb	r3, [r2, r3]
 8003490:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003492:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <HAL_RCC_GetSysClockFreq+0xc4>)
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	220f      	movs	r2, #15
 800349c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	fa92 f2a2 	rbit	r2, r2
 80034a4:	60fa      	str	r2, [r7, #12]
  return result;
 80034a6:	68fa      	ldr	r2, [r7, #12]
 80034a8:	fab2 f282 	clz	r2, r2
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	40d3      	lsrs	r3, r2
 80034b0:	4a15      	ldr	r2, [pc, #84]	; (8003508 <HAL_RCC_GetSysClockFreq+0xd0>)
 80034b2:	5cd3      	ldrb	r3, [r2, r3]
 80034b4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034c0:	4a0f      	ldr	r2, [pc, #60]	; (8003500 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	fb02 f303 	mul.w	r3, r2, r3
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
 80034d0:	e007      	b.n	80034e2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034d2:	4a0b      	ldr	r2, [pc, #44]	; (8003500 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	fb02 f303 	mul.w	r3, r2, r3
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	623b      	str	r3, [r7, #32]
      break;
 80034e6:	e002      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_RCC_GetSysClockFreq+0xc8>)
 80034ea:	623b      	str	r3, [r7, #32]
      break;
 80034ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ee:	6a3b      	ldr	r3, [r7, #32]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	372c      	adds	r7, #44	; 0x2c
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	40021000 	.word	0x40021000
 8003500:	007a1200 	.word	0x007a1200
 8003504:	08007438 	.word	0x08007438
 8003508:	08007448 	.word	0x08007448

0800350c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003510:	4b03      	ldr	r3, [pc, #12]	; (8003520 <HAL_RCC_GetHCLKFreq+0x14>)
 8003512:	681b      	ldr	r3, [r3, #0]
}
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	20000000 	.word	0x20000000

08003524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800352a:	f7ff ffef 	bl	800350c <HAL_RCC_GetHCLKFreq>
 800352e:	4601      	mov	r1, r0
 8003530:	4b0b      	ldr	r3, [pc, #44]	; (8003560 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003538:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800353c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	fa92 f2a2 	rbit	r2, r2
 8003544:	603a      	str	r2, [r7, #0]
  return result;
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	fab2 f282 	clz	r2, r2
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	40d3      	lsrs	r3, r2
 8003550:	4a04      	ldr	r2, [pc, #16]	; (8003564 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003552:	5cd3      	ldrb	r3, [r2, r3]
 8003554:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003558:	4618      	mov	r0, r3
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	40021000 	.word	0x40021000
 8003564:	08007430 	.word	0x08007430

08003568 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	220f      	movs	r2, #15
 8003576:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003578:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_RCC_GetClockConfig+0x5c>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0203 	and.w	r2, r3, #3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8003590:	4b0c      	ldr	r3, [pc, #48]	; (80035c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_RCC_GetClockConfig+0x5c>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	08db      	lsrs	r3, r3, #3
 80035a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80035aa:	4b07      	ldr	r3, [pc, #28]	; (80035c8 <HAL_RCC_GetClockConfig+0x60>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0207 	and.w	r2, r3, #7
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	601a      	str	r2, [r3, #0]
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40021000 	.word	0x40021000
 80035c8:	40022000 	.word	0x40022000

080035cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b092      	sub	sp, #72	; 0x48
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80035dc:	2300      	movs	r3, #0
 80035de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 80d4 	beq.w	8003798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035f0:	4b4e      	ldr	r3, [pc, #312]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10e      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035fc:	4b4b      	ldr	r3, [pc, #300]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	4a4a      	ldr	r2, [pc, #296]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003606:	61d3      	str	r3, [r2, #28]
 8003608:	4b48      	ldr	r3, [pc, #288]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003610:	60bb      	str	r3, [r7, #8]
 8003612:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003614:	2301      	movs	r3, #1
 8003616:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361a:	4b45      	ldr	r3, [pc, #276]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003622:	2b00      	cmp	r3, #0
 8003624:	d118      	bne.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003626:	4b42      	ldr	r3, [pc, #264]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a41      	ldr	r2, [pc, #260]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800362c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003630:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003632:	f7fe fbf7 	bl	8001e24 <HAL_GetTick>
 8003636:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	e008      	b.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800363a:	f7fe fbf3 	bl	8001e24 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b64      	cmp	r3, #100	; 0x64
 8003646:	d901      	bls.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e1d6      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364c:	4b38      	ldr	r3, [pc, #224]	; (8003730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003654:	2b00      	cmp	r3, #0
 8003656:	d0f0      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003658:	4b34      	ldr	r3, [pc, #208]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003660:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8084 	beq.w	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003672:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003674:	429a      	cmp	r2, r3
 8003676:	d07c      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003678:	4b2c      	ldr	r3, [pc, #176]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003686:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
 800369a:	4b26      	ldr	r3, [pc, #152]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	461a      	mov	r2, r3
 80036a2:	2301      	movs	r3, #1
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ae:	fa93 f3a3 	rbit	r3, r3
 80036b2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036b6:	fab3 f383 	clz	r3, r3
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	461a      	mov	r2, r3
 80036be:	4b1d      	ldr	r3, [pc, #116]	; (8003734 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	461a      	mov	r2, r3
 80036c6:	2300      	movs	r3, #0
 80036c8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036ca:	4a18      	ldr	r2, [pc, #96]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d04b      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036da:	f7fe fba3 	bl	8001e24 <HAL_GetTick>
 80036de:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e0:	e00a      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036e2:	f7fe fb9f 	bl	8001e24 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e180      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80036f8:	2302      	movs	r3, #2
 80036fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fe:	fa93 f3a3 	rbit	r3, r3
 8003702:	627b      	str	r3, [r7, #36]	; 0x24
 8003704:	2302      	movs	r3, #2
 8003706:	623b      	str	r3, [r7, #32]
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	fa93 f3a3 	rbit	r3, r3
 800370e:	61fb      	str	r3, [r7, #28]
  return result;
 8003710:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003712:	fab3 f383 	clz	r3, r3
 8003716:	b2db      	uxtb	r3, r3
 8003718:	095b      	lsrs	r3, r3, #5
 800371a:	b2db      	uxtb	r3, r3
 800371c:	f043 0302 	orr.w	r3, r3, #2
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b02      	cmp	r3, #2
 8003724:	d108      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003726:	4b01      	ldr	r3, [pc, #4]	; (800372c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	e00d      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800372c:	40021000 	.word	0x40021000
 8003730:	40007000 	.word	0x40007000
 8003734:	10908100 	.word	0x10908100
 8003738:	2302      	movs	r3, #2
 800373a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	4ba0      	ldr	r3, [pc, #640]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	2202      	movs	r2, #2
 800374a:	613a      	str	r2, [r7, #16]
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	fa92 f2a2 	rbit	r2, r2
 8003752:	60fa      	str	r2, [r7, #12]
  return result;
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	fab2 f282 	clz	r2, r2
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	f002 021f 	and.w	r2, r2, #31
 8003766:	2101      	movs	r1, #1
 8003768:	fa01 f202 	lsl.w	r2, r1, r2
 800376c:	4013      	ands	r3, r2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0b7      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003772:	4b95      	ldr	r3, [pc, #596]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4992      	ldr	r1, [pc, #584]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003780:	4313      	orrs	r3, r2
 8003782:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003784:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003788:	2b01      	cmp	r3, #1
 800378a:	d105      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378c:	4b8e      	ldr	r3, [pc, #568]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800378e:	69db      	ldr	r3, [r3, #28]
 8003790:	4a8d      	ldr	r2, [pc, #564]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003796:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80037a4:	4b88      	ldr	r3, [pc, #544]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a8:	f023 0203 	bic.w	r2, r3, #3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	4985      	ldr	r1, [pc, #532]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d008      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037c2:	4b81      	ldr	r3, [pc, #516]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	497e      	ldr	r1, [pc, #504]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037e0:	4b79      	ldr	r3, [pc, #484]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	4976      	ldr	r1, [pc, #472]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037fe:	4b72      	ldr	r3, [pc, #456]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f023 0210 	bic.w	r2, r3, #16
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	496f      	ldr	r1, [pc, #444]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800380c:	4313      	orrs	r3, r2
 800380e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800381c:	4b6a      	ldr	r3, [pc, #424]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003828:	4967      	ldr	r1, [pc, #412]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800382a:	4313      	orrs	r3, r2
 800382c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d008      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800383a:	4b63      	ldr	r3, [pc, #396]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f023 0220 	bic.w	r2, r3, #32
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	4960      	ldr	r1, [pc, #384]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003848:	4313      	orrs	r3, r2
 800384a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003858:	4b5b      	ldr	r3, [pc, #364]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800385a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	4958      	ldr	r1, [pc, #352]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003866:	4313      	orrs	r3, r2
 8003868:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d008      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003876:	4b54      	ldr	r3, [pc, #336]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	4951      	ldr	r1, [pc, #324]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003884:	4313      	orrs	r3, r2
 8003886:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0310 	and.w	r3, r3, #16
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003894:	4b4c      	ldr	r3, [pc, #304]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	4949      	ldr	r1, [pc, #292]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038b2:	4b45      	ldr	r3, [pc, #276]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	4942      	ldr	r1, [pc, #264]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80038d0:	4b3d      	ldr	r3, [pc, #244]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038dc:	493a      	ldr	r1, [pc, #232]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d008      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80038ee:	4b36      	ldr	r3, [pc, #216]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	4933      	ldr	r1, [pc, #204]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d008      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800390c:	4b2e      	ldr	r3, [pc, #184]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003918:	492b      	ldr	r1, [pc, #172]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800391a:	4313      	orrs	r3, r2
 800391c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d008      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800392a:	4b27      	ldr	r3, [pc, #156]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	4924      	ldr	r1, [pc, #144]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003938:	4313      	orrs	r3, r2
 800393a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003948:	4b1f      	ldr	r3, [pc, #124]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003954:	491c      	ldr	r1, [pc, #112]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003956:	4313      	orrs	r3, r2
 8003958:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003966:	4b18      	ldr	r3, [pc, #96]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003972:	4915      	ldr	r1, [pc, #84]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003974:	4313      	orrs	r3, r2
 8003976:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d008      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003984:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003988:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003990:	490d      	ldr	r1, [pc, #52]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003992:	4313      	orrs	r3, r2
 8003994:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80039a2:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ae:	4906      	ldr	r1, [pc, #24]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00c      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80039c0:	4b01      	ldr	r3, [pc, #4]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80039c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c4:	e002      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x400>
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000
 80039cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d4:	490b      	ldr	r1, [pc, #44]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d008      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80039e6:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039f2:	4904      	ldr	r1, [pc, #16]	; (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3748      	adds	r7, #72	; 0x48
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000

08003a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e049      	b.n	8003aae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7fe f94c 	bl	8001ccc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3304      	adds	r3, #4
 8003a44:	4619      	mov	r1, r3
 8003a46:	4610      	mov	r0, r2
 8003a48:	f000 fd26 	bl	8004498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d001      	beq.n	8003ad0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e04f      	b.n	8003b70 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a23      	ldr	r2, [pc, #140]	; (8003b7c <HAL_TIM_Base_Start_IT+0xc4>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d01d      	beq.n	8003b2e <HAL_TIM_Base_Start_IT+0x76>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afa:	d018      	beq.n	8003b2e <HAL_TIM_Base_Start_IT+0x76>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a1f      	ldr	r2, [pc, #124]	; (8003b80 <HAL_TIM_Base_Start_IT+0xc8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d013      	beq.n	8003b2e <HAL_TIM_Base_Start_IT+0x76>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a1e      	ldr	r2, [pc, #120]	; (8003b84 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00e      	beq.n	8003b2e <HAL_TIM_Base_Start_IT+0x76>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1c      	ldr	r2, [pc, #112]	; (8003b88 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d009      	beq.n	8003b2e <HAL_TIM_Base_Start_IT+0x76>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1b      	ldr	r2, [pc, #108]	; (8003b8c <HAL_TIM_Base_Start_IT+0xd4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d004      	beq.n	8003b2e <HAL_TIM_Base_Start_IT+0x76>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a19      	ldr	r2, [pc, #100]	; (8003b90 <HAL_TIM_Base_Start_IT+0xd8>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d115      	bne.n	8003b5a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	4b17      	ldr	r3, [pc, #92]	; (8003b94 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2b06      	cmp	r3, #6
 8003b3e:	d015      	beq.n	8003b6c <HAL_TIM_Base_Start_IT+0xb4>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b46:	d011      	beq.n	8003b6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0201 	orr.w	r2, r2, #1
 8003b56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b58:	e008      	b.n	8003b6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0201 	orr.w	r2, r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	e000      	b.n	8003b6e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40000400 	.word	0x40000400
 8003b84:	40000800 	.word	0x40000800
 8003b88:	40013400 	.word	0x40013400
 8003b8c:	40014000 	.word	0x40014000
 8003b90:	40015000 	.word	0x40015000
 8003b94:	00010007 	.word	0x00010007

08003b98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e049      	b.n	8003c3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 f841 	bl	8003c46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2202      	movs	r2, #2
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	3304      	adds	r3, #4
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4610      	mov	r0, r2
 8003bd8:	f000 fc5e 	bl	8004498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c4e:	bf00      	nop
 8003c50:	370c      	adds	r7, #12
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
	...

08003c5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d109      	bne.n	8003c80 <HAL_TIM_PWM_Start+0x24>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	e03c      	b.n	8003cfa <HAL_TIM_PWM_Start+0x9e>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d109      	bne.n	8003c9a <HAL_TIM_PWM_Start+0x3e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	bf14      	ite	ne
 8003c92:	2301      	movne	r3, #1
 8003c94:	2300      	moveq	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	e02f      	b.n	8003cfa <HAL_TIM_PWM_Start+0x9e>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d109      	bne.n	8003cb4 <HAL_TIM_PWM_Start+0x58>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	bf14      	ite	ne
 8003cac:	2301      	movne	r3, #1
 8003cae:	2300      	moveq	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	e022      	b.n	8003cfa <HAL_TIM_PWM_Start+0x9e>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b0c      	cmp	r3, #12
 8003cb8:	d109      	bne.n	8003cce <HAL_TIM_PWM_Start+0x72>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	bf14      	ite	ne
 8003cc6:	2301      	movne	r3, #1
 8003cc8:	2300      	moveq	r3, #0
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	e015      	b.n	8003cfa <HAL_TIM_PWM_Start+0x9e>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b10      	cmp	r3, #16
 8003cd2:	d109      	bne.n	8003ce8 <HAL_TIM_PWM_Start+0x8c>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	bf14      	ite	ne
 8003ce0:	2301      	movne	r3, #1
 8003ce2:	2300      	moveq	r3, #0
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	e008      	b.n	8003cfa <HAL_TIM_PWM_Start+0x9e>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	bf14      	ite	ne
 8003cf4:	2301      	movne	r3, #1
 8003cf6:	2300      	moveq	r3, #0
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e0a1      	b.n	8003e46 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d104      	bne.n	8003d12 <HAL_TIM_PWM_Start+0xb6>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d10:	e023      	b.n	8003d5a <HAL_TIM_PWM_Start+0xfe>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d104      	bne.n	8003d22 <HAL_TIM_PWM_Start+0xc6>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d20:	e01b      	b.n	8003d5a <HAL_TIM_PWM_Start+0xfe>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d104      	bne.n	8003d32 <HAL_TIM_PWM_Start+0xd6>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d30:	e013      	b.n	8003d5a <HAL_TIM_PWM_Start+0xfe>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2b0c      	cmp	r3, #12
 8003d36:	d104      	bne.n	8003d42 <HAL_TIM_PWM_Start+0xe6>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d40:	e00b      	b.n	8003d5a <HAL_TIM_PWM_Start+0xfe>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b10      	cmp	r3, #16
 8003d46:	d104      	bne.n	8003d52 <HAL_TIM_PWM_Start+0xf6>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d50:	e003      	b.n	8003d5a <HAL_TIM_PWM_Start+0xfe>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2202      	movs	r2, #2
 8003d56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	6839      	ldr	r1, [r7, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 ffd6 	bl	8004d14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a38      	ldr	r2, [pc, #224]	; (8003e50 <HAL_TIM_PWM_Start+0x1f4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d018      	beq.n	8003da4 <HAL_TIM_PWM_Start+0x148>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a37      	ldr	r2, [pc, #220]	; (8003e54 <HAL_TIM_PWM_Start+0x1f8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d013      	beq.n	8003da4 <HAL_TIM_PWM_Start+0x148>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a35      	ldr	r2, [pc, #212]	; (8003e58 <HAL_TIM_PWM_Start+0x1fc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00e      	beq.n	8003da4 <HAL_TIM_PWM_Start+0x148>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a34      	ldr	r2, [pc, #208]	; (8003e5c <HAL_TIM_PWM_Start+0x200>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d009      	beq.n	8003da4 <HAL_TIM_PWM_Start+0x148>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a32      	ldr	r2, [pc, #200]	; (8003e60 <HAL_TIM_PWM_Start+0x204>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d004      	beq.n	8003da4 <HAL_TIM_PWM_Start+0x148>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a31      	ldr	r2, [pc, #196]	; (8003e64 <HAL_TIM_PWM_Start+0x208>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d101      	bne.n	8003da8 <HAL_TIM_PWM_Start+0x14c>
 8003da4:	2301      	movs	r3, #1
 8003da6:	e000      	b.n	8003daa <HAL_TIM_PWM_Start+0x14e>
 8003da8:	2300      	movs	r3, #0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d007      	beq.n	8003dbe <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dbc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a23      	ldr	r2, [pc, #140]	; (8003e50 <HAL_TIM_PWM_Start+0x1f4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d01d      	beq.n	8003e04 <HAL_TIM_PWM_Start+0x1a8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dd0:	d018      	beq.n	8003e04 <HAL_TIM_PWM_Start+0x1a8>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a24      	ldr	r2, [pc, #144]	; (8003e68 <HAL_TIM_PWM_Start+0x20c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d013      	beq.n	8003e04 <HAL_TIM_PWM_Start+0x1a8>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a22      	ldr	r2, [pc, #136]	; (8003e6c <HAL_TIM_PWM_Start+0x210>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d00e      	beq.n	8003e04 <HAL_TIM_PWM_Start+0x1a8>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1a      	ldr	r2, [pc, #104]	; (8003e54 <HAL_TIM_PWM_Start+0x1f8>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d009      	beq.n	8003e04 <HAL_TIM_PWM_Start+0x1a8>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a18      	ldr	r2, [pc, #96]	; (8003e58 <HAL_TIM_PWM_Start+0x1fc>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d004      	beq.n	8003e04 <HAL_TIM_PWM_Start+0x1a8>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a19      	ldr	r2, [pc, #100]	; (8003e64 <HAL_TIM_PWM_Start+0x208>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d115      	bne.n	8003e30 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	4b19      	ldr	r3, [pc, #100]	; (8003e70 <HAL_TIM_PWM_Start+0x214>)
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b06      	cmp	r3, #6
 8003e14:	d015      	beq.n	8003e42 <HAL_TIM_PWM_Start+0x1e6>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e1c:	d011      	beq.n	8003e42 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f042 0201 	orr.w	r2, r2, #1
 8003e2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e2e:	e008      	b.n	8003e42 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f042 0201 	orr.w	r2, r2, #1
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	e000      	b.n	8003e44 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40012c00 	.word	0x40012c00
 8003e54:	40013400 	.word	0x40013400
 8003e58:	40014000 	.word	0x40014000
 8003e5c:	40014400 	.word	0x40014400
 8003e60:	40014800 	.word	0x40014800
 8003e64:	40015000 	.word	0x40015000
 8003e68:	40000400 	.word	0x40000400
 8003e6c:	40000800 	.word	0x40000800
 8003e70:	00010007 	.word	0x00010007

08003e74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d122      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d11b      	bne.n	8003ed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f06f 0202 	mvn.w	r2, #2
 8003ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 facf 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 8003ebc:	e005      	b.n	8003eca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fac1 	bl	8004446 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 fad2 	bl	800446e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	f003 0304 	and.w	r3, r3, #4
 8003eda:	2b04      	cmp	r3, #4
 8003edc:	d122      	bne.n	8003f24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d11b      	bne.n	8003f24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f06f 0204 	mvn.w	r2, #4
 8003ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2202      	movs	r2, #2
 8003efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 faa5 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 8003f10:	e005      	b.n	8003f1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fa97 	bl	8004446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 faa8 	bl	800446e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b08      	cmp	r3, #8
 8003f30:	d122      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d11b      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f06f 0208 	mvn.w	r2, #8
 8003f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fa7b 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 8003f64:	e005      	b.n	8003f72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 fa6d 	bl	8004446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fa7e 	bl	800446e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	f003 0310 	and.w	r3, r3, #16
 8003f82:	2b10      	cmp	r3, #16
 8003f84:	d122      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	f003 0310 	and.w	r3, r3, #16
 8003f90:	2b10      	cmp	r3, #16
 8003f92:	d11b      	bne.n	8003fcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f06f 0210 	mvn.w	r2, #16
 8003f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2208      	movs	r2, #8
 8003fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fa51 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 8003fb8:	e005      	b.n	8003fc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fa43 	bl	8004446 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f000 fa54 	bl	800446e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	691b      	ldr	r3, [r3, #16]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d10e      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d107      	bne.n	8003ff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f06f 0201 	mvn.w	r2, #1
 8003ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7fd fc9f 	bl	8001936 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004002:	2b80      	cmp	r3, #128	; 0x80
 8004004:	d10e      	bne.n	8004024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004010:	2b80      	cmp	r3, #128	; 0x80
 8004012:	d107      	bne.n	8004024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800401c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 ffba 	bl	8004f98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004032:	d10e      	bne.n	8004052 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403e:	2b80      	cmp	r3, #128	; 0x80
 8004040:	d107      	bne.n	8004052 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800404a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 ffad 	bl	8004fac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b40      	cmp	r3, #64	; 0x40
 800405e:	d10e      	bne.n	800407e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406a:	2b40      	cmp	r3, #64	; 0x40
 800406c:	d107      	bne.n	800407e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fa02 	bl	8004482 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b20      	cmp	r3, #32
 800408a:	d10e      	bne.n	80040aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	f003 0320 	and.w	r3, r3, #32
 8004096:	2b20      	cmp	r3, #32
 8004098:	d107      	bne.n	80040aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f06f 0220 	mvn.w	r2, #32
 80040a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 ff6d 	bl	8004f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040aa:	bf00      	nop
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
	...

080040b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d101      	bne.n	80040ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e0fd      	b.n	80042ca <HAL_TIM_PWM_ConfigChannel+0x216>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b14      	cmp	r3, #20
 80040da:	f200 80f0 	bhi.w	80042be <HAL_TIM_PWM_ConfigChannel+0x20a>
 80040de:	a201      	add	r2, pc, #4	; (adr r2, 80040e4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80040e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e4:	08004139 	.word	0x08004139
 80040e8:	080042bf 	.word	0x080042bf
 80040ec:	080042bf 	.word	0x080042bf
 80040f0:	080042bf 	.word	0x080042bf
 80040f4:	08004179 	.word	0x08004179
 80040f8:	080042bf 	.word	0x080042bf
 80040fc:	080042bf 	.word	0x080042bf
 8004100:	080042bf 	.word	0x080042bf
 8004104:	080041bb 	.word	0x080041bb
 8004108:	080042bf 	.word	0x080042bf
 800410c:	080042bf 	.word	0x080042bf
 8004110:	080042bf 	.word	0x080042bf
 8004114:	080041fb 	.word	0x080041fb
 8004118:	080042bf 	.word	0x080042bf
 800411c:	080042bf 	.word	0x080042bf
 8004120:	080042bf 	.word	0x080042bf
 8004124:	0800423d 	.word	0x0800423d
 8004128:	080042bf 	.word	0x080042bf
 800412c:	080042bf 	.word	0x080042bf
 8004130:	080042bf 	.word	0x080042bf
 8004134:	0800427d 	.word	0x0800427d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68b9      	ldr	r1, [r7, #8]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fa48 	bl	80045d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	699a      	ldr	r2, [r3, #24]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f042 0208 	orr.w	r2, r2, #8
 8004152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699a      	ldr	r2, [r3, #24]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0204 	bic.w	r2, r2, #4
 8004162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6999      	ldr	r1, [r3, #24]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	691a      	ldr	r2, [r3, #16]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	619a      	str	r2, [r3, #24]
      break;
 8004176:	e0a3      	b.n	80042c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68b9      	ldr	r1, [r7, #8]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 fac2 	bl	8004708 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699a      	ldr	r2, [r3, #24]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699a      	ldr	r2, [r3, #24]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6999      	ldr	r1, [r3, #24]
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	021a      	lsls	r2, r3, #8
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	619a      	str	r2, [r3, #24]
      break;
 80041b8:	e082      	b.n	80042c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fb35 	bl	8004830 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69da      	ldr	r2, [r3, #28]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0208 	orr.w	r2, r2, #8
 80041d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	69da      	ldr	r2, [r3, #28]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0204 	bic.w	r2, r2, #4
 80041e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69d9      	ldr	r1, [r3, #28]
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	430a      	orrs	r2, r1
 80041f6:	61da      	str	r2, [r3, #28]
      break;
 80041f8:	e062      	b.n	80042c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fba7 	bl	8004954 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004214:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69da      	ldr	r2, [r3, #28]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004224:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69d9      	ldr	r1, [r3, #28]
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	021a      	lsls	r2, r3, #8
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	430a      	orrs	r2, r1
 8004238:	61da      	str	r2, [r3, #28]
      break;
 800423a:	e041      	b.n	80042c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68b9      	ldr	r1, [r7, #8]
 8004242:	4618      	mov	r0, r3
 8004244:	f000 fbf6 	bl	8004a34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0208 	orr.w	r2, r2, #8
 8004256:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0204 	bic.w	r2, r2, #4
 8004266:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	691a      	ldr	r2, [r3, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	430a      	orrs	r2, r1
 8004278:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800427a:	e021      	b.n	80042c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68b9      	ldr	r1, [r7, #8]
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fc40 	bl	8004b08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004296:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	021a      	lsls	r2, r3, #8
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	430a      	orrs	r2, r1
 80042ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80042bc:	e000      	b.n	80042c0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80042be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop

080042d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_TIM_ConfigClockSource+0x18>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e0a8      	b.n	800443e <HAL_TIM_ConfigClockSource+0x16a>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800430a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800430e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004316:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b40      	cmp	r3, #64	; 0x40
 8004326:	d067      	beq.n	80043f8 <HAL_TIM_ConfigClockSource+0x124>
 8004328:	2b40      	cmp	r3, #64	; 0x40
 800432a:	d80b      	bhi.n	8004344 <HAL_TIM_ConfigClockSource+0x70>
 800432c:	2b10      	cmp	r3, #16
 800432e:	d073      	beq.n	8004418 <HAL_TIM_ConfigClockSource+0x144>
 8004330:	2b10      	cmp	r3, #16
 8004332:	d802      	bhi.n	800433a <HAL_TIM_ConfigClockSource+0x66>
 8004334:	2b00      	cmp	r3, #0
 8004336:	d06f      	beq.n	8004418 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004338:	e078      	b.n	800442c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800433a:	2b20      	cmp	r3, #32
 800433c:	d06c      	beq.n	8004418 <HAL_TIM_ConfigClockSource+0x144>
 800433e:	2b30      	cmp	r3, #48	; 0x30
 8004340:	d06a      	beq.n	8004418 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8004342:	e073      	b.n	800442c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004344:	2b70      	cmp	r3, #112	; 0x70
 8004346:	d00d      	beq.n	8004364 <HAL_TIM_ConfigClockSource+0x90>
 8004348:	2b70      	cmp	r3, #112	; 0x70
 800434a:	d804      	bhi.n	8004356 <HAL_TIM_ConfigClockSource+0x82>
 800434c:	2b50      	cmp	r3, #80	; 0x50
 800434e:	d033      	beq.n	80043b8 <HAL_TIM_ConfigClockSource+0xe4>
 8004350:	2b60      	cmp	r3, #96	; 0x60
 8004352:	d041      	beq.n	80043d8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8004354:	e06a      	b.n	800442c <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8004356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435a:	d066      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x156>
 800435c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004360:	d017      	beq.n	8004392 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8004362:	e063      	b.n	800442c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	6899      	ldr	r1, [r3, #8]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f000 fcae 	bl	8004cd4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004386:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	609a      	str	r2, [r3, #8]
      break;
 8004390:	e04c      	b.n	800442c <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6899      	ldr	r1, [r3, #8]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f000 fc97 	bl	8004cd4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689a      	ldr	r2, [r3, #8]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043b4:	609a      	str	r2, [r3, #8]
      break;
 80043b6:	e039      	b.n	800442c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	6859      	ldr	r1, [r3, #4]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	461a      	mov	r2, r3
 80043c6:	f000 fc0b 	bl	8004be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2150      	movs	r1, #80	; 0x50
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 fc64 	bl	8004c9e <TIM_ITRx_SetConfig>
      break;
 80043d6:	e029      	b.n	800442c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	6859      	ldr	r1, [r3, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	461a      	mov	r2, r3
 80043e6:	f000 fc2a 	bl	8004c3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2160      	movs	r1, #96	; 0x60
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fc54 	bl	8004c9e <TIM_ITRx_SetConfig>
      break;
 80043f6:	e019      	b.n	800442c <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	6859      	ldr	r1, [r3, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	461a      	mov	r2, r3
 8004406:	f000 fbeb 	bl	8004be0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2140      	movs	r1, #64	; 0x40
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fc44 	bl	8004c9e <TIM_ITRx_SetConfig>
      break;
 8004416:	e009      	b.n	800442c <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f000 fc3b 	bl	8004c9e <TIM_ITRx_SetConfig>
        break;
 8004428:	e000      	b.n	800442c <HAL_TIM_ConfigClockSource+0x158>
      break;
 800442a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr

0800446e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
	...

08004498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a42      	ldr	r2, [pc, #264]	; (80045b4 <TIM_Base_SetConfig+0x11c>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d013      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b6:	d00f      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a3f      	ldr	r2, [pc, #252]	; (80045b8 <TIM_Base_SetConfig+0x120>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00b      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a3e      	ldr	r2, [pc, #248]	; (80045bc <TIM_Base_SetConfig+0x124>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d007      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a3d      	ldr	r2, [pc, #244]	; (80045c0 <TIM_Base_SetConfig+0x128>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3c      	ldr	r2, [pc, #240]	; (80045c4 <TIM_Base_SetConfig+0x12c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d108      	bne.n	80044ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a31      	ldr	r2, [pc, #196]	; (80045b4 <TIM_Base_SetConfig+0x11c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d01f      	beq.n	8004532 <TIM_Base_SetConfig+0x9a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f8:	d01b      	beq.n	8004532 <TIM_Base_SetConfig+0x9a>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a2e      	ldr	r2, [pc, #184]	; (80045b8 <TIM_Base_SetConfig+0x120>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d017      	beq.n	8004532 <TIM_Base_SetConfig+0x9a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2d      	ldr	r2, [pc, #180]	; (80045bc <TIM_Base_SetConfig+0x124>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <TIM_Base_SetConfig+0x9a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a2c      	ldr	r2, [pc, #176]	; (80045c0 <TIM_Base_SetConfig+0x128>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00f      	beq.n	8004532 <TIM_Base_SetConfig+0x9a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2c      	ldr	r2, [pc, #176]	; (80045c8 <TIM_Base_SetConfig+0x130>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d00b      	beq.n	8004532 <TIM_Base_SetConfig+0x9a>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2b      	ldr	r2, [pc, #172]	; (80045cc <TIM_Base_SetConfig+0x134>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d007      	beq.n	8004532 <TIM_Base_SetConfig+0x9a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a2a      	ldr	r2, [pc, #168]	; (80045d0 <TIM_Base_SetConfig+0x138>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d003      	beq.n	8004532 <TIM_Base_SetConfig+0x9a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a25      	ldr	r2, [pc, #148]	; (80045c4 <TIM_Base_SetConfig+0x12c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d108      	bne.n	8004544 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a12      	ldr	r2, [pc, #72]	; (80045b4 <TIM_Base_SetConfig+0x11c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d013      	beq.n	8004598 <TIM_Base_SetConfig+0x100>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a13      	ldr	r2, [pc, #76]	; (80045c0 <TIM_Base_SetConfig+0x128>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00f      	beq.n	8004598 <TIM_Base_SetConfig+0x100>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a13      	ldr	r2, [pc, #76]	; (80045c8 <TIM_Base_SetConfig+0x130>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00b      	beq.n	8004598 <TIM_Base_SetConfig+0x100>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a12      	ldr	r2, [pc, #72]	; (80045cc <TIM_Base_SetConfig+0x134>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d007      	beq.n	8004598 <TIM_Base_SetConfig+0x100>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a11      	ldr	r2, [pc, #68]	; (80045d0 <TIM_Base_SetConfig+0x138>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d003      	beq.n	8004598 <TIM_Base_SetConfig+0x100>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a0c      	ldr	r2, [pc, #48]	; (80045c4 <TIM_Base_SetConfig+0x12c>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d103      	bne.n	80045a0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	615a      	str	r2, [r3, #20]
}
 80045a6:	bf00      	nop
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40012c00 	.word	0x40012c00
 80045b8:	40000400 	.word	0x40000400
 80045bc:	40000800 	.word	0x40000800
 80045c0:	40013400 	.word	0x40013400
 80045c4:	40015000 	.word	0x40015000
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40014400 	.word	0x40014400
 80045d0:	40014800 	.word	0x40014800

080045d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b087      	sub	sp, #28
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	f023 0201 	bic.w	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0303 	bic.w	r3, r3, #3
 800460e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	f023 0302 	bic.w	r3, r3, #2
 8004620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a30      	ldr	r2, [pc, #192]	; (80046f0 <TIM_OC1_SetConfig+0x11c>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d013      	beq.n	800465c <TIM_OC1_SetConfig+0x88>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a2f      	ldr	r2, [pc, #188]	; (80046f4 <TIM_OC1_SetConfig+0x120>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d00f      	beq.n	800465c <TIM_OC1_SetConfig+0x88>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	4a2e      	ldr	r2, [pc, #184]	; (80046f8 <TIM_OC1_SetConfig+0x124>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d00b      	beq.n	800465c <TIM_OC1_SetConfig+0x88>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a2d      	ldr	r2, [pc, #180]	; (80046fc <TIM_OC1_SetConfig+0x128>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d007      	beq.n	800465c <TIM_OC1_SetConfig+0x88>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a2c      	ldr	r2, [pc, #176]	; (8004700 <TIM_OC1_SetConfig+0x12c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d003      	beq.n	800465c <TIM_OC1_SetConfig+0x88>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a2b      	ldr	r2, [pc, #172]	; (8004704 <TIM_OC1_SetConfig+0x130>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d10c      	bne.n	8004676 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f023 0308 	bic.w	r3, r3, #8
 8004662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	4313      	orrs	r3, r2
 800466c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f023 0304 	bic.w	r3, r3, #4
 8004674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a1d      	ldr	r2, [pc, #116]	; (80046f0 <TIM_OC1_SetConfig+0x11c>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d013      	beq.n	80046a6 <TIM_OC1_SetConfig+0xd2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a1c      	ldr	r2, [pc, #112]	; (80046f4 <TIM_OC1_SetConfig+0x120>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d00f      	beq.n	80046a6 <TIM_OC1_SetConfig+0xd2>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a1b      	ldr	r2, [pc, #108]	; (80046f8 <TIM_OC1_SetConfig+0x124>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d00b      	beq.n	80046a6 <TIM_OC1_SetConfig+0xd2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a1a      	ldr	r2, [pc, #104]	; (80046fc <TIM_OC1_SetConfig+0x128>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d007      	beq.n	80046a6 <TIM_OC1_SetConfig+0xd2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a19      	ldr	r2, [pc, #100]	; (8004700 <TIM_OC1_SetConfig+0x12c>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d003      	beq.n	80046a6 <TIM_OC1_SetConfig+0xd2>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a18      	ldr	r2, [pc, #96]	; (8004704 <TIM_OC1_SetConfig+0x130>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d111      	bne.n	80046ca <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685a      	ldr	r2, [r3, #4]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	621a      	str	r2, [r3, #32]
}
 80046e4:	bf00      	nop
 80046e6:	371c      	adds	r7, #28
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	40012c00 	.word	0x40012c00
 80046f4:	40013400 	.word	0x40013400
 80046f8:	40014000 	.word	0x40014000
 80046fc:	40014400 	.word	0x40014400
 8004700:	40014800 	.word	0x40014800
 8004704:	40015000 	.word	0x40015000

08004708 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004708:	b480      	push	{r7}
 800470a:	b087      	sub	sp, #28
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	f023 0210 	bic.w	r2, r3, #16
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f023 0320 	bic.w	r3, r3, #32
 8004756:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a2c      	ldr	r2, [pc, #176]	; (8004818 <TIM_OC2_SetConfig+0x110>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d007      	beq.n	800477c <TIM_OC2_SetConfig+0x74>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a2b      	ldr	r2, [pc, #172]	; (800481c <TIM_OC2_SetConfig+0x114>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d003      	beq.n	800477c <TIM_OC2_SetConfig+0x74>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a2a      	ldr	r2, [pc, #168]	; (8004820 <TIM_OC2_SetConfig+0x118>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d10d      	bne.n	8004798 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	011b      	lsls	r3, r3, #4
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004796:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a1f      	ldr	r2, [pc, #124]	; (8004818 <TIM_OC2_SetConfig+0x110>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d013      	beq.n	80047c8 <TIM_OC2_SetConfig+0xc0>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4a1e      	ldr	r2, [pc, #120]	; (800481c <TIM_OC2_SetConfig+0x114>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d00f      	beq.n	80047c8 <TIM_OC2_SetConfig+0xc0>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a1e      	ldr	r2, [pc, #120]	; (8004824 <TIM_OC2_SetConfig+0x11c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d00b      	beq.n	80047c8 <TIM_OC2_SetConfig+0xc0>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a1d      	ldr	r2, [pc, #116]	; (8004828 <TIM_OC2_SetConfig+0x120>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d007      	beq.n	80047c8 <TIM_OC2_SetConfig+0xc0>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a1c      	ldr	r2, [pc, #112]	; (800482c <TIM_OC2_SetConfig+0x124>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d003      	beq.n	80047c8 <TIM_OC2_SetConfig+0xc0>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a17      	ldr	r2, [pc, #92]	; (8004820 <TIM_OC2_SetConfig+0x118>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d113      	bne.n	80047f0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047ce:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80047d6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	621a      	str	r2, [r3, #32]
}
 800480a:	bf00      	nop
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40012c00 	.word	0x40012c00
 800481c:	40013400 	.word	0x40013400
 8004820:	40015000 	.word	0x40015000
 8004824:	40014000 	.word	0x40014000
 8004828:	40014400 	.word	0x40014400
 800482c:	40014800 	.word	0x40014800

08004830 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800485e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0303 	bic.w	r3, r3, #3
 800486a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800487c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	021b      	lsls	r3, r3, #8
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a2b      	ldr	r2, [pc, #172]	; (800493c <TIM_OC3_SetConfig+0x10c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d007      	beq.n	80048a2 <TIM_OC3_SetConfig+0x72>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a2a      	ldr	r2, [pc, #168]	; (8004940 <TIM_OC3_SetConfig+0x110>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d003      	beq.n	80048a2 <TIM_OC3_SetConfig+0x72>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a29      	ldr	r2, [pc, #164]	; (8004944 <TIM_OC3_SetConfig+0x114>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d10d      	bne.n	80048be <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	021b      	lsls	r3, r3, #8
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048bc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a1e      	ldr	r2, [pc, #120]	; (800493c <TIM_OC3_SetConfig+0x10c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d013      	beq.n	80048ee <TIM_OC3_SetConfig+0xbe>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a1d      	ldr	r2, [pc, #116]	; (8004940 <TIM_OC3_SetConfig+0x110>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00f      	beq.n	80048ee <TIM_OC3_SetConfig+0xbe>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a1d      	ldr	r2, [pc, #116]	; (8004948 <TIM_OC3_SetConfig+0x118>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d00b      	beq.n	80048ee <TIM_OC3_SetConfig+0xbe>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a1c      	ldr	r2, [pc, #112]	; (800494c <TIM_OC3_SetConfig+0x11c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d007      	beq.n	80048ee <TIM_OC3_SetConfig+0xbe>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a1b      	ldr	r2, [pc, #108]	; (8004950 <TIM_OC3_SetConfig+0x120>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d003      	beq.n	80048ee <TIM_OC3_SetConfig+0xbe>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a16      	ldr	r2, [pc, #88]	; (8004944 <TIM_OC3_SetConfig+0x114>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d113      	bne.n	8004916 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	4313      	orrs	r3, r2
 8004908:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	621a      	str	r2, [r3, #32]
}
 8004930:	bf00      	nop
 8004932:	371c      	adds	r7, #28
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	40012c00 	.word	0x40012c00
 8004940:	40013400 	.word	0x40013400
 8004944:	40015000 	.word	0x40015000
 8004948:	40014000 	.word	0x40014000
 800494c:	40014400 	.word	0x40014400
 8004950:	40014800 	.word	0x40014800

08004954 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004982:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004986:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	021b      	lsls	r3, r3, #8
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4313      	orrs	r3, r2
 800499a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	031b      	lsls	r3, r3, #12
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a1a      	ldr	r2, [pc, #104]	; (8004a1c <TIM_OC4_SetConfig+0xc8>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d013      	beq.n	80049e0 <TIM_OC4_SetConfig+0x8c>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a19      	ldr	r2, [pc, #100]	; (8004a20 <TIM_OC4_SetConfig+0xcc>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00f      	beq.n	80049e0 <TIM_OC4_SetConfig+0x8c>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a18      	ldr	r2, [pc, #96]	; (8004a24 <TIM_OC4_SetConfig+0xd0>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00b      	beq.n	80049e0 <TIM_OC4_SetConfig+0x8c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a17      	ldr	r2, [pc, #92]	; (8004a28 <TIM_OC4_SetConfig+0xd4>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d007      	beq.n	80049e0 <TIM_OC4_SetConfig+0x8c>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	4a16      	ldr	r2, [pc, #88]	; (8004a2c <TIM_OC4_SetConfig+0xd8>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d003      	beq.n	80049e0 <TIM_OC4_SetConfig+0x8c>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4a15      	ldr	r2, [pc, #84]	; (8004a30 <TIM_OC4_SetConfig+0xdc>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d109      	bne.n	80049f4 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	019b      	lsls	r3, r3, #6
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	697a      	ldr	r2, [r7, #20]
 80049f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	621a      	str	r2, [r3, #32]
}
 8004a0e:	bf00      	nop
 8004a10:	371c      	adds	r7, #28
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	40012c00 	.word	0x40012c00
 8004a20:	40013400 	.word	0x40013400
 8004a24:	40014000 	.word	0x40014000
 8004a28:	40014400 	.word	0x40014400
 8004a2c:	40014800 	.word	0x40014800
 8004a30:	40015000 	.word	0x40015000

08004a34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a1b      	ldr	r3, [r3, #32]
 8004a4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004a78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	041b      	lsls	r3, r3, #16
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a19      	ldr	r2, [pc, #100]	; (8004af0 <TIM_OC5_SetConfig+0xbc>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d013      	beq.n	8004ab6 <TIM_OC5_SetConfig+0x82>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a18      	ldr	r2, [pc, #96]	; (8004af4 <TIM_OC5_SetConfig+0xc0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d00f      	beq.n	8004ab6 <TIM_OC5_SetConfig+0x82>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a17      	ldr	r2, [pc, #92]	; (8004af8 <TIM_OC5_SetConfig+0xc4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d00b      	beq.n	8004ab6 <TIM_OC5_SetConfig+0x82>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a16      	ldr	r2, [pc, #88]	; (8004afc <TIM_OC5_SetConfig+0xc8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d007      	beq.n	8004ab6 <TIM_OC5_SetConfig+0x82>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a15      	ldr	r2, [pc, #84]	; (8004b00 <TIM_OC5_SetConfig+0xcc>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d003      	beq.n	8004ab6 <TIM_OC5_SetConfig+0x82>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a14      	ldr	r2, [pc, #80]	; (8004b04 <TIM_OC5_SetConfig+0xd0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d109      	bne.n	8004aca <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004abc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	021b      	lsls	r3, r3, #8
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	621a      	str	r2, [r3, #32]
}
 8004ae4:	bf00      	nop
 8004ae6:	371c      	adds	r7, #28
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	40012c00 	.word	0x40012c00
 8004af4:	40013400 	.word	0x40013400
 8004af8:	40014000 	.word	0x40014000
 8004afc:	40014400 	.word	0x40014400
 8004b00:	40014800 	.word	0x40014800
 8004b04:	40015000 	.word	0x40015000

08004b08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	021b      	lsls	r3, r3, #8
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	051b      	lsls	r3, r3, #20
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a1a      	ldr	r2, [pc, #104]	; (8004bc8 <TIM_OC6_SetConfig+0xc0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d013      	beq.n	8004b8c <TIM_OC6_SetConfig+0x84>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a19      	ldr	r2, [pc, #100]	; (8004bcc <TIM_OC6_SetConfig+0xc4>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d00f      	beq.n	8004b8c <TIM_OC6_SetConfig+0x84>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a18      	ldr	r2, [pc, #96]	; (8004bd0 <TIM_OC6_SetConfig+0xc8>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00b      	beq.n	8004b8c <TIM_OC6_SetConfig+0x84>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a17      	ldr	r2, [pc, #92]	; (8004bd4 <TIM_OC6_SetConfig+0xcc>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d007      	beq.n	8004b8c <TIM_OC6_SetConfig+0x84>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a16      	ldr	r2, [pc, #88]	; (8004bd8 <TIM_OC6_SetConfig+0xd0>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d003      	beq.n	8004b8c <TIM_OC6_SetConfig+0x84>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a15      	ldr	r2, [pc, #84]	; (8004bdc <TIM_OC6_SetConfig+0xd4>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d109      	bne.n	8004ba0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	029b      	lsls	r3, r3, #10
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	621a      	str	r2, [r3, #32]
}
 8004bba:	bf00      	nop
 8004bbc:	371c      	adds	r7, #28
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	40012c00 	.word	0x40012c00
 8004bcc:	40013400 	.word	0x40013400
 8004bd0:	40014000 	.word	0x40014000
 8004bd4:	40014400 	.word	0x40014400
 8004bd8:	40014800 	.word	0x40014800
 8004bdc:	40015000 	.word	0x40015000

08004be0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	f023 0201 	bic.w	r2, r3, #1
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	011b      	lsls	r3, r3, #4
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f023 030a 	bic.w	r3, r3, #10
 8004c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	621a      	str	r2, [r3, #32]
}
 8004c32:	bf00      	nop
 8004c34:	371c      	adds	r7, #28
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr

08004c3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b087      	sub	sp, #28
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	f023 0210 	bic.w	r2, r3, #16
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	031b      	lsls	r3, r3, #12
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	621a      	str	r2, [r3, #32]
}
 8004c92:	bf00      	nop
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f043 0307 	orr.w	r3, r3, #7
 8004cc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	609a      	str	r2, [r3, #8]
}
 8004cc8:	bf00      	nop
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	021a      	lsls	r2, r3, #8
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	697a      	ldr	r2, [r7, #20]
 8004d06:	609a      	str	r2, [r3, #8]
}
 8004d08:	bf00      	nop
 8004d0a:	371c      	adds	r7, #28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	2201      	movs	r2, #1
 8004d28:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6a1a      	ldr	r2, [r3, #32]
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	43db      	mvns	r3, r3
 8004d36:	401a      	ands	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a1a      	ldr	r2, [r3, #32]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f003 031f 	and.w	r3, r3, #31
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	621a      	str	r2, [r3, #32]
}
 8004d52:	bf00      	nop
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
	...

08004d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d101      	bne.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d74:	2302      	movs	r3, #2
 8004d76:	e06d      	b.n	8004e54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2202      	movs	r2, #2
 8004d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a30      	ldr	r2, [pc, #192]	; (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d009      	beq.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a2f      	ldr	r2, [pc, #188]	; (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d004      	beq.n	8004db6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a2d      	ldr	r2, [pc, #180]	; (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d108      	bne.n	8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004dbc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1e      	ldr	r2, [pc, #120]	; (8004e60 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d01d      	beq.n	8004e28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004df4:	d018      	beq.n	8004e28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a1c      	ldr	r2, [pc, #112]	; (8004e6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d013      	beq.n	8004e28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1a      	ldr	r2, [pc, #104]	; (8004e70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d00e      	beq.n	8004e28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a15      	ldr	r2, [pc, #84]	; (8004e64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d009      	beq.n	8004e28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a16      	ldr	r2, [pc, #88]	; (8004e74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d004      	beq.n	8004e28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a11      	ldr	r2, [pc, #68]	; (8004e68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d10c      	bne.n	8004e42 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	68ba      	ldr	r2, [r7, #8]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	40012c00 	.word	0x40012c00
 8004e64:	40013400 	.word	0x40013400
 8004e68:	40015000 	.word	0x40015000
 8004e6c:	40000400 	.word	0x40000400
 8004e70:	40000800 	.word	0x40000800
 8004e74:	40014000 	.word	0x40014000

08004e78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d101      	bne.n	8004e94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e90:	2302      	movs	r3, #2
 8004e92:	e06a      	b.n	8004f6a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efa:	4313      	orrs	r3, r2
 8004efc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	699b      	ldr	r3, [r3, #24]
 8004f08:	041b      	lsls	r3, r3, #16
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a19      	ldr	r2, [pc, #100]	; (8004f78 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d009      	beq.n	8004f2c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a17      	ldr	r2, [pc, #92]	; (8004f7c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d004      	beq.n	8004f2c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a16      	ldr	r2, [pc, #88]	; (8004f80 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d115      	bne.n	8004f58 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	051b      	lsls	r3, r3, #20
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3714      	adds	r7, #20
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40012c00 	.word	0x40012c00
 8004f7c:	40013400 	.word	0x40013400
 8004f80:	40015000 	.word	0x40015000

08004f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b085      	sub	sp, #20
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004fce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004fd2:	2b84      	cmp	r3, #132	; 0x84
 8004fd4:	d005      	beq.n	8004fe2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004fd6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4413      	add	r3, r2
 8004fde:	3303      	adds	r3, #3
 8004fe0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3714      	adds	r7, #20
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004ff4:	f000 fad2 	bl	800559c <vTaskStartScheduler>
  
  return osOK;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005000:	b089      	sub	sp, #36	; 0x24
 8005002:	af04      	add	r7, sp, #16
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d020      	beq.n	8005052 <osThreadCreate+0x54>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01c      	beq.n	8005052 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685c      	ldr	r4, [r3, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681d      	ldr	r5, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691e      	ldr	r6, [r3, #16]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800502a:	4618      	mov	r0, r3
 800502c:	f7ff ffc8 	bl	8004fc0 <makeFreeRtosPriority>
 8005030:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800503a:	9202      	str	r2, [sp, #8]
 800503c:	9301      	str	r3, [sp, #4]
 800503e:	9100      	str	r1, [sp, #0]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	4632      	mov	r2, r6
 8005044:	4629      	mov	r1, r5
 8005046:	4620      	mov	r0, r4
 8005048:	f000 f8ed 	bl	8005226 <xTaskCreateStatic>
 800504c:	4603      	mov	r3, r0
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	e01c      	b.n	800508c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685c      	ldr	r4, [r3, #4]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800505e:	b29e      	uxth	r6, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff ffaa 	bl	8004fc0 <makeFreeRtosPriority>
 800506c:	4602      	mov	r2, r0
 800506e:	f107 030c 	add.w	r3, r7, #12
 8005072:	9301      	str	r3, [sp, #4]
 8005074:	9200      	str	r2, [sp, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	4632      	mov	r2, r6
 800507a:	4629      	mov	r1, r5
 800507c:	4620      	mov	r0, r4
 800507e:	f000 f92b 	bl	80052d8 <xTaskCreate>
 8005082:	4603      	mov	r3, r0
 8005084:	2b01      	cmp	r3, #1
 8005086:	d001      	beq.n	800508c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005088:	2300      	movs	r3, #0
 800508a:	e000      	b.n	800508e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800508c:	68fb      	ldr	r3, [r7, #12]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005096 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b084      	sub	sp, #16
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <osDelay+0x16>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	e000      	b.n	80050ae <osDelay+0x18>
 80050ac:	2301      	movs	r3, #1
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fa40 	bl	8005534 <vTaskDelay>
  
  return osOK;
 80050b4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f103 0208 	add.w	r2, r3, #8
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f04f 32ff 	mov.w	r2, #4294967295
 80050d6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f103 0208 	add.w	r2, r3, #8
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f103 0208 	add.w	r2, r3, #8
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80050fe:	b480      	push	{r7}
 8005100:	b083      	sub	sp, #12
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800510c:	bf00      	nop
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68fa      	ldr	r2, [r7, #12]
 800512c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	689a      	ldr	r2, [r3, #8]
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	687a      	ldr	r2, [r7, #4]
 8005148:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	601a      	str	r2, [r3, #0]
}
 8005154:	bf00      	nop
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005176:	d103      	bne.n	8005180 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	e00c      	b.n	800519a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	3308      	adds	r3, #8
 8005184:	60fb      	str	r3, [r7, #12]
 8005186:	e002      	b.n	800518e <vListInsert+0x2e>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	429a      	cmp	r2, r3
 8005198:	d2f6      	bcs.n	8005188 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	601a      	str	r2, [r3, #0]
}
 80051c6:	bf00      	nop
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6892      	ldr	r2, [r2, #8]
 80051e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6852      	ldr	r2, [r2, #4]
 80051f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d103      	bne.n	8005206 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	1e5a      	subs	r2, r3, #1
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005226:	b580      	push	{r7, lr}
 8005228:	b08e      	sub	sp, #56	; 0x38
 800522a:	af04      	add	r7, sp, #16
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	607a      	str	r2, [r7, #4]
 8005232:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	623b      	str	r3, [r7, #32]
 800524c:	e7fe      	b.n	800524c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800524e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005250:	2b00      	cmp	r3, #0
 8005252:	d109      	bne.n	8005268 <xTaskCreateStatic+0x42>
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	61fb      	str	r3, [r7, #28]
 8005266:	e7fe      	b.n	8005266 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005268:	2354      	movs	r3, #84	; 0x54
 800526a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	2b54      	cmp	r3, #84	; 0x54
 8005270:	d009      	beq.n	8005286 <xTaskCreateStatic+0x60>
 8005272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	61bb      	str	r3, [r7, #24]
 8005284:	e7fe      	b.n	8005284 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	2b00      	cmp	r3, #0
 800528a:	d01e      	beq.n	80052ca <xTaskCreateStatic+0xa4>
 800528c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800528e:	2b00      	cmp	r3, #0
 8005290:	d01b      	beq.n	80052ca <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800529a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80052a4:	2300      	movs	r3, #0
 80052a6:	9303      	str	r3, [sp, #12]
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	9302      	str	r3, [sp, #8]
 80052ac:	f107 0314 	add.w	r3, r7, #20
 80052b0:	9301      	str	r3, [sp, #4]
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	68b9      	ldr	r1, [r7, #8]
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f850 	bl	8005362 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052c4:	f000 f8cc 	bl	8005460 <prvAddNewTaskToReadyList>
 80052c8:	e001      	b.n	80052ce <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052ce:	697b      	ldr	r3, [r7, #20]
	}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3728      	adds	r7, #40	; 0x28
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08c      	sub	sp, #48	; 0x30
 80052dc:	af04      	add	r7, sp, #16
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	4613      	mov	r3, r2
 80052e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052e8:	88fb      	ldrh	r3, [r7, #6]
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 feb1 	bl	8006054 <pvPortMalloc>
 80052f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00e      	beq.n	8005318 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80052fa:	2054      	movs	r0, #84	; 0x54
 80052fc:	f000 feaa 	bl	8006054 <pvPortMalloc>
 8005300:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	631a      	str	r2, [r3, #48]	; 0x30
 800530e:	e005      	b.n	800531c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005310:	6978      	ldr	r0, [r7, #20]
 8005312:	f000 ff61 	bl	80061d8 <vPortFree>
 8005316:	e001      	b.n	800531c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005318:	2300      	movs	r3, #0
 800531a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d017      	beq.n	8005352 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	2300      	movs	r3, #0
 800532e:	9303      	str	r3, [sp, #12]
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	9302      	str	r3, [sp, #8]
 8005334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005336:	9301      	str	r3, [sp, #4]
 8005338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533a:	9300      	str	r3, [sp, #0]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	68b9      	ldr	r1, [r7, #8]
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f80e 	bl	8005362 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005346:	69f8      	ldr	r0, [r7, #28]
 8005348:	f000 f88a 	bl	8005460 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800534c:	2301      	movs	r3, #1
 800534e:	61bb      	str	r3, [r7, #24]
 8005350:	e002      	b.n	8005358 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005352:	f04f 33ff 	mov.w	r3, #4294967295
 8005356:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005358:	69bb      	ldr	r3, [r7, #24]
	}
 800535a:	4618      	mov	r0, r3
 800535c:	3720      	adds	r7, #32
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b088      	sub	sp, #32
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	60b9      	str	r1, [r7, #8]
 800536c:	607a      	str	r2, [r7, #4]
 800536e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800537a:	3b01      	subs	r3, #1
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	4413      	add	r3, r2
 8005380:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	f023 0307 	bic.w	r3, r3, #7
 8005388:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	2b00      	cmp	r3, #0
 8005392:	d009      	beq.n	80053a8 <prvInitialiseNewTask+0x46>
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	617b      	str	r3, [r7, #20]
 80053a6:	e7fe      	b.n	80053a6 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053a8:	2300      	movs	r3, #0
 80053aa:	61fb      	str	r3, [r7, #28]
 80053ac:	e012      	b.n	80053d4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	4413      	add	r3, r2
 80053b4:	7819      	ldrb	r1, [r3, #0]
 80053b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	4413      	add	r3, r2
 80053bc:	3334      	adds	r3, #52	; 0x34
 80053be:	460a      	mov	r2, r1
 80053c0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	69fb      	ldr	r3, [r7, #28]
 80053c6:	4413      	add	r3, r2
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d006      	beq.n	80053dc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	3301      	adds	r3, #1
 80053d2:	61fb      	str	r3, [r7, #28]
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	2b0f      	cmp	r3, #15
 80053d8:	d9e9      	bls.n	80053ae <prvInitialiseNewTask+0x4c>
 80053da:	e000      	b.n	80053de <prvInitialiseNewTask+0x7c>
		{
			break;
 80053dc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e8:	2b06      	cmp	r3, #6
 80053ea:	d901      	bls.n	80053f0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053ec:	2306      	movs	r3, #6
 80053ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053fa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80053fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fe:	2200      	movs	r2, #0
 8005400:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	3304      	adds	r3, #4
 8005406:	4618      	mov	r0, r3
 8005408:	f7ff fe79 	bl	80050fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	3318      	adds	r3, #24
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff fe74 	bl	80050fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800541a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	f1c3 0207 	rsb	r2, r3, #7
 8005422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005424:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800542a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800542c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542e:	2200      	movs	r2, #0
 8005430:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	68f9      	ldr	r1, [r7, #12]
 800543e:	69b8      	ldr	r0, [r7, #24]
 8005440:	f000 fc08 	bl	8005c54 <pxPortInitialiseStack>
 8005444:	4602      	mov	r2, r0
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005448:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800544a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005456:	bf00      	nop
 8005458:	3720      	adds	r7, #32
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
	...

08005460 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005468:	f000 fd18 	bl	8005e9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800546c:	4b2a      	ldr	r3, [pc, #168]	; (8005518 <prvAddNewTaskToReadyList+0xb8>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3301      	adds	r3, #1
 8005472:	4a29      	ldr	r2, [pc, #164]	; (8005518 <prvAddNewTaskToReadyList+0xb8>)
 8005474:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005476:	4b29      	ldr	r3, [pc, #164]	; (800551c <prvAddNewTaskToReadyList+0xbc>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d109      	bne.n	8005492 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800547e:	4a27      	ldr	r2, [pc, #156]	; (800551c <prvAddNewTaskToReadyList+0xbc>)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005484:	4b24      	ldr	r3, [pc, #144]	; (8005518 <prvAddNewTaskToReadyList+0xb8>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b01      	cmp	r3, #1
 800548a:	d110      	bne.n	80054ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800548c:	f000 fabc 	bl	8005a08 <prvInitialiseTaskLists>
 8005490:	e00d      	b.n	80054ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005492:	4b23      	ldr	r3, [pc, #140]	; (8005520 <prvAddNewTaskToReadyList+0xc0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d109      	bne.n	80054ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800549a:	4b20      	ldr	r3, [pc, #128]	; (800551c <prvAddNewTaskToReadyList+0xbc>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d802      	bhi.n	80054ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054a8:	4a1c      	ldr	r2, [pc, #112]	; (800551c <prvAddNewTaskToReadyList+0xbc>)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054ae:	4b1d      	ldr	r3, [pc, #116]	; (8005524 <prvAddNewTaskToReadyList+0xc4>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3301      	adds	r3, #1
 80054b4:	4a1b      	ldr	r2, [pc, #108]	; (8005524 <prvAddNewTaskToReadyList+0xc4>)
 80054b6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054bc:	2201      	movs	r2, #1
 80054be:	409a      	lsls	r2, r3
 80054c0:	4b19      	ldr	r3, [pc, #100]	; (8005528 <prvAddNewTaskToReadyList+0xc8>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	4a18      	ldr	r2, [pc, #96]	; (8005528 <prvAddNewTaskToReadyList+0xc8>)
 80054c8:	6013      	str	r3, [r2, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4a15      	ldr	r2, [pc, #84]	; (800552c <prvAddNewTaskToReadyList+0xcc>)
 80054d8:	441a      	add	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	3304      	adds	r3, #4
 80054de:	4619      	mov	r1, r3
 80054e0:	4610      	mov	r0, r2
 80054e2:	f7ff fe19 	bl	8005118 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054e6:	f000 fd07 	bl	8005ef8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054ea:	4b0d      	ldr	r3, [pc, #52]	; (8005520 <prvAddNewTaskToReadyList+0xc0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00e      	beq.n	8005510 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054f2:	4b0a      	ldr	r3, [pc, #40]	; (800551c <prvAddNewTaskToReadyList+0xbc>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d207      	bcs.n	8005510 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005500:	4b0b      	ldr	r3, [pc, #44]	; (8005530 <prvAddNewTaskToReadyList+0xd0>)
 8005502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005506:	601a      	str	r2, [r3, #0]
 8005508:	f3bf 8f4f 	dsb	sy
 800550c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20000560 	.word	0x20000560
 800551c:	20000460 	.word	0x20000460
 8005520:	2000056c 	.word	0x2000056c
 8005524:	2000057c 	.word	0x2000057c
 8005528:	20000568 	.word	0x20000568
 800552c:	20000464 	.word	0x20000464
 8005530:	e000ed04 	.word	0xe000ed04

08005534 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800553c:	2300      	movs	r3, #0
 800553e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d016      	beq.n	8005574 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005546:	4b13      	ldr	r3, [pc, #76]	; (8005594 <vTaskDelay+0x60>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d009      	beq.n	8005562 <vTaskDelay+0x2e>
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	60bb      	str	r3, [r7, #8]
 8005560:	e7fe      	b.n	8005560 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005562:	f000 f879 	bl	8005658 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005566:	2100      	movs	r1, #0
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fb0d 	bl	8005b88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800556e:	f000 f881 	bl	8005674 <xTaskResumeAll>
 8005572:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d107      	bne.n	800558a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800557a:	4b07      	ldr	r3, [pc, #28]	; (8005598 <vTaskDelay+0x64>)
 800557c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800558a:	bf00      	nop
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	20000588 	.word	0x20000588
 8005598:	e000ed04 	.word	0xe000ed04

0800559c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08a      	sub	sp, #40	; 0x28
 80055a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055a6:	2300      	movs	r3, #0
 80055a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055aa:	463a      	mov	r2, r7
 80055ac:	1d39      	adds	r1, r7, #4
 80055ae:	f107 0308 	add.w	r3, r7, #8
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fc f8a8 	bl	8001708 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055b8:	6839      	ldr	r1, [r7, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	9202      	str	r2, [sp, #8]
 80055c0:	9301      	str	r3, [sp, #4]
 80055c2:	2300      	movs	r3, #0
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	2300      	movs	r3, #0
 80055c8:	460a      	mov	r2, r1
 80055ca:	491d      	ldr	r1, [pc, #116]	; (8005640 <vTaskStartScheduler+0xa4>)
 80055cc:	481d      	ldr	r0, [pc, #116]	; (8005644 <vTaskStartScheduler+0xa8>)
 80055ce:	f7ff fe2a 	bl	8005226 <xTaskCreateStatic>
 80055d2:	4602      	mov	r2, r0
 80055d4:	4b1c      	ldr	r3, [pc, #112]	; (8005648 <vTaskStartScheduler+0xac>)
 80055d6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055d8:	4b1b      	ldr	r3, [pc, #108]	; (8005648 <vTaskStartScheduler+0xac>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d002      	beq.n	80055e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055e0:	2301      	movs	r3, #1
 80055e2:	617b      	str	r3, [r7, #20]
 80055e4:	e001      	b.n	80055ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d115      	bne.n	800561c <vTaskStartScheduler+0x80>
 80055f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f4:	f383 8811 	msr	BASEPRI, r3
 80055f8:	f3bf 8f6f 	isb	sy
 80055fc:	f3bf 8f4f 	dsb	sy
 8005600:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005602:	4b12      	ldr	r3, [pc, #72]	; (800564c <vTaskStartScheduler+0xb0>)
 8005604:	f04f 32ff 	mov.w	r2, #4294967295
 8005608:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800560a:	4b11      	ldr	r3, [pc, #68]	; (8005650 <vTaskStartScheduler+0xb4>)
 800560c:	2201      	movs	r2, #1
 800560e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005610:	4b10      	ldr	r3, [pc, #64]	; (8005654 <vTaskStartScheduler+0xb8>)
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005616:	f000 fba3 	bl	8005d60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800561a:	e00d      	b.n	8005638 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005622:	d109      	bne.n	8005638 <vTaskStartScheduler+0x9c>
 8005624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005628:	f383 8811 	msr	BASEPRI, r3
 800562c:	f3bf 8f6f 	isb	sy
 8005630:	f3bf 8f4f 	dsb	sy
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	e7fe      	b.n	8005636 <vTaskStartScheduler+0x9a>
}
 8005638:	bf00      	nop
 800563a:	3718      	adds	r7, #24
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	08007408 	.word	0x08007408
 8005644:	080059d9 	.word	0x080059d9
 8005648:	20000584 	.word	0x20000584
 800564c:	20000580 	.word	0x20000580
 8005650:	2000056c 	.word	0x2000056c
 8005654:	20000564 	.word	0x20000564

08005658 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005658:	b480      	push	{r7}
 800565a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800565c:	4b04      	ldr	r3, [pc, #16]	; (8005670 <vTaskSuspendAll+0x18>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3301      	adds	r3, #1
 8005662:	4a03      	ldr	r2, [pc, #12]	; (8005670 <vTaskSuspendAll+0x18>)
 8005664:	6013      	str	r3, [r2, #0]
}
 8005666:	bf00      	nop
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	20000588 	.word	0x20000588

08005674 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800567e:	2300      	movs	r3, #0
 8005680:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005682:	4b41      	ldr	r3, [pc, #260]	; (8005788 <xTaskResumeAll+0x114>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d109      	bne.n	800569e <xTaskResumeAll+0x2a>
 800568a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800568e:	f383 8811 	msr	BASEPRI, r3
 8005692:	f3bf 8f6f 	isb	sy
 8005696:	f3bf 8f4f 	dsb	sy
 800569a:	603b      	str	r3, [r7, #0]
 800569c:	e7fe      	b.n	800569c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800569e:	f000 fbfd 	bl	8005e9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056a2:	4b39      	ldr	r3, [pc, #228]	; (8005788 <xTaskResumeAll+0x114>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	3b01      	subs	r3, #1
 80056a8:	4a37      	ldr	r2, [pc, #220]	; (8005788 <xTaskResumeAll+0x114>)
 80056aa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ac:	4b36      	ldr	r3, [pc, #216]	; (8005788 <xTaskResumeAll+0x114>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d161      	bne.n	8005778 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056b4:	4b35      	ldr	r3, [pc, #212]	; (800578c <xTaskResumeAll+0x118>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d05d      	beq.n	8005778 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056bc:	e02e      	b.n	800571c <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80056be:	4b34      	ldr	r3, [pc, #208]	; (8005790 <xTaskResumeAll+0x11c>)
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	3318      	adds	r3, #24
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7ff fd81 	bl	80051d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	3304      	adds	r3, #4
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7ff fd7c 	bl	80051d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056de:	2201      	movs	r2, #1
 80056e0:	409a      	lsls	r2, r3
 80056e2:	4b2c      	ldr	r3, [pc, #176]	; (8005794 <xTaskResumeAll+0x120>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	4a2a      	ldr	r2, [pc, #168]	; (8005794 <xTaskResumeAll+0x120>)
 80056ea:	6013      	str	r3, [r2, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f0:	4613      	mov	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4a27      	ldr	r2, [pc, #156]	; (8005798 <xTaskResumeAll+0x124>)
 80056fa:	441a      	add	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	3304      	adds	r3, #4
 8005700:	4619      	mov	r1, r3
 8005702:	4610      	mov	r0, r2
 8005704:	f7ff fd08 	bl	8005118 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570c:	4b23      	ldr	r3, [pc, #140]	; (800579c <xTaskResumeAll+0x128>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005712:	429a      	cmp	r2, r3
 8005714:	d302      	bcc.n	800571c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005716:	4b22      	ldr	r3, [pc, #136]	; (80057a0 <xTaskResumeAll+0x12c>)
 8005718:	2201      	movs	r2, #1
 800571a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800571c:	4b1c      	ldr	r3, [pc, #112]	; (8005790 <xTaskResumeAll+0x11c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1cc      	bne.n	80056be <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800572a:	f000 fa07 	bl	8005b3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800572e:	4b1d      	ldr	r3, [pc, #116]	; (80057a4 <xTaskResumeAll+0x130>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d010      	beq.n	800575c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800573a:	f000 f837 	bl	80057ac <xTaskIncrementTick>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005744:	4b16      	ldr	r3, [pc, #88]	; (80057a0 <xTaskResumeAll+0x12c>)
 8005746:	2201      	movs	r2, #1
 8005748:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	3b01      	subs	r3, #1
 800574e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f1      	bne.n	800573a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005756:	4b13      	ldr	r3, [pc, #76]	; (80057a4 <xTaskResumeAll+0x130>)
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800575c:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <xTaskResumeAll+0x12c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d009      	beq.n	8005778 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005764:	2301      	movs	r3, #1
 8005766:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005768:	4b0f      	ldr	r3, [pc, #60]	; (80057a8 <xTaskResumeAll+0x134>)
 800576a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005778:	f000 fbbe 	bl	8005ef8 <vPortExitCritical>

	return xAlreadyYielded;
 800577c:	68bb      	ldr	r3, [r7, #8]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3710      	adds	r7, #16
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20000588 	.word	0x20000588
 800578c:	20000560 	.word	0x20000560
 8005790:	20000520 	.word	0x20000520
 8005794:	20000568 	.word	0x20000568
 8005798:	20000464 	.word	0x20000464
 800579c:	20000460 	.word	0x20000460
 80057a0:	20000574 	.word	0x20000574
 80057a4:	20000570 	.word	0x20000570
 80057a8:	e000ed04 	.word	0xe000ed04

080057ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80057b2:	2300      	movs	r3, #0
 80057b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057b6:	4b50      	ldr	r3, [pc, #320]	; (80058f8 <xTaskIncrementTick+0x14c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f040 808c 	bne.w	80058d8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80057c0:	4b4e      	ldr	r3, [pc, #312]	; (80058fc <xTaskIncrementTick+0x150>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3301      	adds	r3, #1
 80057c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80057c8:	4a4c      	ldr	r2, [pc, #304]	; (80058fc <xTaskIncrementTick+0x150>)
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d11f      	bne.n	8005814 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80057d4:	4b4a      	ldr	r3, [pc, #296]	; (8005900 <xTaskIncrementTick+0x154>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d009      	beq.n	80057f2 <xTaskIncrementTick+0x46>
 80057de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e2:	f383 8811 	msr	BASEPRI, r3
 80057e6:	f3bf 8f6f 	isb	sy
 80057ea:	f3bf 8f4f 	dsb	sy
 80057ee:	603b      	str	r3, [r7, #0]
 80057f0:	e7fe      	b.n	80057f0 <xTaskIncrementTick+0x44>
 80057f2:	4b43      	ldr	r3, [pc, #268]	; (8005900 <xTaskIncrementTick+0x154>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	4b42      	ldr	r3, [pc, #264]	; (8005904 <xTaskIncrementTick+0x158>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a40      	ldr	r2, [pc, #256]	; (8005900 <xTaskIncrementTick+0x154>)
 80057fe:	6013      	str	r3, [r2, #0]
 8005800:	4a40      	ldr	r2, [pc, #256]	; (8005904 <xTaskIncrementTick+0x158>)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	4b40      	ldr	r3, [pc, #256]	; (8005908 <xTaskIncrementTick+0x15c>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	3301      	adds	r3, #1
 800580c:	4a3e      	ldr	r2, [pc, #248]	; (8005908 <xTaskIncrementTick+0x15c>)
 800580e:	6013      	str	r3, [r2, #0]
 8005810:	f000 f994 	bl	8005b3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005814:	4b3d      	ldr	r3, [pc, #244]	; (800590c <xTaskIncrementTick+0x160>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	429a      	cmp	r2, r3
 800581c:	d34d      	bcc.n	80058ba <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800581e:	4b38      	ldr	r3, [pc, #224]	; (8005900 <xTaskIncrementTick+0x154>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <xTaskIncrementTick+0x80>
 8005828:	2301      	movs	r3, #1
 800582a:	e000      	b.n	800582e <xTaskIncrementTick+0x82>
 800582c:	2300      	movs	r3, #0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d004      	beq.n	800583c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005832:	4b36      	ldr	r3, [pc, #216]	; (800590c <xTaskIncrementTick+0x160>)
 8005834:	f04f 32ff 	mov.w	r2, #4294967295
 8005838:	601a      	str	r2, [r3, #0]
					break;
 800583a:	e03e      	b.n	80058ba <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800583c:	4b30      	ldr	r3, [pc, #192]	; (8005900 <xTaskIncrementTick+0x154>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	429a      	cmp	r2, r3
 8005852:	d203      	bcs.n	800585c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005854:	4a2d      	ldr	r2, [pc, #180]	; (800590c <xTaskIncrementTick+0x160>)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6013      	str	r3, [r2, #0]
						break;
 800585a:	e02e      	b.n	80058ba <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	3304      	adds	r3, #4
 8005860:	4618      	mov	r0, r3
 8005862:	f7ff fcb6 	bl	80051d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586a:	2b00      	cmp	r3, #0
 800586c:	d004      	beq.n	8005878 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	3318      	adds	r3, #24
 8005872:	4618      	mov	r0, r3
 8005874:	f7ff fcad 	bl	80051d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	2201      	movs	r2, #1
 800587e:	409a      	lsls	r2, r3
 8005880:	4b23      	ldr	r3, [pc, #140]	; (8005910 <xTaskIncrementTick+0x164>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4313      	orrs	r3, r2
 8005886:	4a22      	ldr	r2, [pc, #136]	; (8005910 <xTaskIncrementTick+0x164>)
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4a1f      	ldr	r2, [pc, #124]	; (8005914 <xTaskIncrementTick+0x168>)
 8005898:	441a      	add	r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	3304      	adds	r3, #4
 800589e:	4619      	mov	r1, r3
 80058a0:	4610      	mov	r0, r2
 80058a2:	f7ff fc39 	bl	8005118 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058aa:	4b1b      	ldr	r3, [pc, #108]	; (8005918 <xTaskIncrementTick+0x16c>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d3b4      	bcc.n	800581e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80058b4:	2301      	movs	r3, #1
 80058b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058b8:	e7b1      	b.n	800581e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80058ba:	4b17      	ldr	r3, [pc, #92]	; (8005918 <xTaskIncrementTick+0x16c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c0:	4914      	ldr	r1, [pc, #80]	; (8005914 <xTaskIncrementTick+0x168>)
 80058c2:	4613      	mov	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	440b      	add	r3, r1
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d907      	bls.n	80058e2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80058d2:	2301      	movs	r3, #1
 80058d4:	617b      	str	r3, [r7, #20]
 80058d6:	e004      	b.n	80058e2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80058d8:	4b10      	ldr	r3, [pc, #64]	; (800591c <xTaskIncrementTick+0x170>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	3301      	adds	r3, #1
 80058de:	4a0f      	ldr	r2, [pc, #60]	; (800591c <xTaskIncrementTick+0x170>)
 80058e0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80058e2:	4b0f      	ldr	r3, [pc, #60]	; (8005920 <xTaskIncrementTick+0x174>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80058ea:	2301      	movs	r3, #1
 80058ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80058ee:	697b      	ldr	r3, [r7, #20]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	20000588 	.word	0x20000588
 80058fc:	20000564 	.word	0x20000564
 8005900:	20000518 	.word	0x20000518
 8005904:	2000051c 	.word	0x2000051c
 8005908:	20000578 	.word	0x20000578
 800590c:	20000580 	.word	0x20000580
 8005910:	20000568 	.word	0x20000568
 8005914:	20000464 	.word	0x20000464
 8005918:	20000460 	.word	0x20000460
 800591c:	20000570 	.word	0x20000570
 8005920:	20000574 	.word	0x20000574

08005924 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005924:	b480      	push	{r7}
 8005926:	b087      	sub	sp, #28
 8005928:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800592a:	4b26      	ldr	r3, [pc, #152]	; (80059c4 <vTaskSwitchContext+0xa0>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d003      	beq.n	800593a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005932:	4b25      	ldr	r3, [pc, #148]	; (80059c8 <vTaskSwitchContext+0xa4>)
 8005934:	2201      	movs	r2, #1
 8005936:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005938:	e03e      	b.n	80059b8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800593a:	4b23      	ldr	r3, [pc, #140]	; (80059c8 <vTaskSwitchContext+0xa4>)
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005940:	4b22      	ldr	r3, [pc, #136]	; (80059cc <vTaskSwitchContext+0xa8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	fab3 f383 	clz	r3, r3
 800594c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800594e:	7afb      	ldrb	r3, [r7, #11]
 8005950:	f1c3 031f 	rsb	r3, r3, #31
 8005954:	617b      	str	r3, [r7, #20]
 8005956:	491e      	ldr	r1, [pc, #120]	; (80059d0 <vTaskSwitchContext+0xac>)
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	440b      	add	r3, r1
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d109      	bne.n	800597e <vTaskSwitchContext+0x5a>
	__asm volatile
 800596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596e:	f383 8811 	msr	BASEPRI, r3
 8005972:	f3bf 8f6f 	isb	sy
 8005976:	f3bf 8f4f 	dsb	sy
 800597a:	607b      	str	r3, [r7, #4]
 800597c:	e7fe      	b.n	800597c <vTaskSwitchContext+0x58>
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	4a11      	ldr	r2, [pc, #68]	; (80059d0 <vTaskSwitchContext+0xac>)
 800598a:	4413      	add	r3, r2
 800598c:	613b      	str	r3, [r7, #16]
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	605a      	str	r2, [r3, #4]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	685a      	ldr	r2, [r3, #4]
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	3308      	adds	r3, #8
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d104      	bne.n	80059ae <vTaskSwitchContext+0x8a>
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	605a      	str	r2, [r3, #4]
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	4a07      	ldr	r2, [pc, #28]	; (80059d4 <vTaskSwitchContext+0xb0>)
 80059b6:	6013      	str	r3, [r2, #0]
}
 80059b8:	bf00      	nop
 80059ba:	371c      	adds	r7, #28
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	20000588 	.word	0x20000588
 80059c8:	20000574 	.word	0x20000574
 80059cc:	20000568 	.word	0x20000568
 80059d0:	20000464 	.word	0x20000464
 80059d4:	20000460 	.word	0x20000460

080059d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80059e0:	f000 f852 	bl	8005a88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059e4:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <prvIdleTask+0x28>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d9f9      	bls.n	80059e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80059ec:	4b05      	ldr	r3, [pc, #20]	; (8005a04 <prvIdleTask+0x2c>)
 80059ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059fc:	e7f0      	b.n	80059e0 <prvIdleTask+0x8>
 80059fe:	bf00      	nop
 8005a00:	20000464 	.word	0x20000464
 8005a04:	e000ed04 	.word	0xe000ed04

08005a08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a0e:	2300      	movs	r3, #0
 8005a10:	607b      	str	r3, [r7, #4]
 8005a12:	e00c      	b.n	8005a2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	4613      	mov	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4a12      	ldr	r2, [pc, #72]	; (8005a68 <prvInitialiseTaskLists+0x60>)
 8005a20:	4413      	add	r3, r2
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7ff fb4b 	bl	80050be <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	607b      	str	r3, [r7, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b06      	cmp	r3, #6
 8005a32:	d9ef      	bls.n	8005a14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005a34:	480d      	ldr	r0, [pc, #52]	; (8005a6c <prvInitialiseTaskLists+0x64>)
 8005a36:	f7ff fb42 	bl	80050be <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005a3a:	480d      	ldr	r0, [pc, #52]	; (8005a70 <prvInitialiseTaskLists+0x68>)
 8005a3c:	f7ff fb3f 	bl	80050be <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005a40:	480c      	ldr	r0, [pc, #48]	; (8005a74 <prvInitialiseTaskLists+0x6c>)
 8005a42:	f7ff fb3c 	bl	80050be <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005a46:	480c      	ldr	r0, [pc, #48]	; (8005a78 <prvInitialiseTaskLists+0x70>)
 8005a48:	f7ff fb39 	bl	80050be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005a4c:	480b      	ldr	r0, [pc, #44]	; (8005a7c <prvInitialiseTaskLists+0x74>)
 8005a4e:	f7ff fb36 	bl	80050be <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a52:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <prvInitialiseTaskLists+0x78>)
 8005a54:	4a05      	ldr	r2, [pc, #20]	; (8005a6c <prvInitialiseTaskLists+0x64>)
 8005a56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a58:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <prvInitialiseTaskLists+0x7c>)
 8005a5a:	4a05      	ldr	r2, [pc, #20]	; (8005a70 <prvInitialiseTaskLists+0x68>)
 8005a5c:	601a      	str	r2, [r3, #0]
}
 8005a5e:	bf00      	nop
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000464 	.word	0x20000464
 8005a6c:	200004f0 	.word	0x200004f0
 8005a70:	20000504 	.word	0x20000504
 8005a74:	20000520 	.word	0x20000520
 8005a78:	20000534 	.word	0x20000534
 8005a7c:	2000054c 	.word	0x2000054c
 8005a80:	20000518 	.word	0x20000518
 8005a84:	2000051c 	.word	0x2000051c

08005a88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a8e:	e019      	b.n	8005ac4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a90:	f000 fa04 	bl	8005e9c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005a94:	4b0f      	ldr	r3, [pc, #60]	; (8005ad4 <prvCheckTasksWaitingTermination+0x4c>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7ff fb96 	bl	80051d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005aa6:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <prvCheckTasksWaitingTermination+0x50>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	4a0a      	ldr	r2, [pc, #40]	; (8005ad8 <prvCheckTasksWaitingTermination+0x50>)
 8005aae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <prvCheckTasksWaitingTermination+0x54>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	4a09      	ldr	r2, [pc, #36]	; (8005adc <prvCheckTasksWaitingTermination+0x54>)
 8005ab8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005aba:	f000 fa1d 	bl	8005ef8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f80e 	bl	8005ae0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ac4:	4b05      	ldr	r3, [pc, #20]	; (8005adc <prvCheckTasksWaitingTermination+0x54>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1e1      	bne.n	8005a90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005acc:	bf00      	nop
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}
 8005ad4:	20000534 	.word	0x20000534
 8005ad8:	20000560 	.word	0x20000560
 8005adc:	20000548 	.word	0x20000548

08005ae0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d108      	bne.n	8005b04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fb6e 	bl	80061d8 <vPortFree>
				vPortFree( pxTCB );
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 fb6b 	bl	80061d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005b02:	e017      	b.n	8005b34 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d103      	bne.n	8005b16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 fb62 	bl	80061d8 <vPortFree>
	}
 8005b14:	e00e      	b.n	8005b34 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b1c:	2b02      	cmp	r3, #2
 8005b1e:	d009      	beq.n	8005b34 <prvDeleteTCB+0x54>
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	e7fe      	b.n	8005b32 <prvDeleteTCB+0x52>
	}
 8005b34:	bf00      	nop
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b42:	4b0f      	ldr	r3, [pc, #60]	; (8005b80 <prvResetNextTaskUnblockTime+0x44>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <prvResetNextTaskUnblockTime+0x14>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e000      	b.n	8005b52 <prvResetNextTaskUnblockTime+0x16>
 8005b50:	2300      	movs	r3, #0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d004      	beq.n	8005b60 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b56:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <prvResetNextTaskUnblockTime+0x48>)
 8005b58:	f04f 32ff 	mov.w	r2, #4294967295
 8005b5c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b5e:	e008      	b.n	8005b72 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b60:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <prvResetNextTaskUnblockTime+0x44>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	4a05      	ldr	r2, [pc, #20]	; (8005b84 <prvResetNextTaskUnblockTime+0x48>)
 8005b70:	6013      	str	r3, [r2, #0]
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	20000518 	.word	0x20000518
 8005b84:	20000580 	.word	0x20000580

08005b88 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b92:	4b29      	ldr	r3, [pc, #164]	; (8005c38 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b98:	4b28      	ldr	r3, [pc, #160]	; (8005c3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3304      	adds	r3, #4
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff fb17 	bl	80051d2 <uxListRemove>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d10b      	bne.n	8005bc2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005baa:	4b24      	ldr	r3, [pc, #144]	; (8005c3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb6:	43da      	mvns	r2, r3
 8005bb8:	4b21      	ldr	r3, [pc, #132]	; (8005c40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	4a20      	ldr	r2, [pc, #128]	; (8005c40 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005bc0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc8:	d10a      	bne.n	8005be0 <prvAddCurrentTaskToDelayedList+0x58>
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d007      	beq.n	8005be0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bd0:	4b1a      	ldr	r3, [pc, #104]	; (8005c3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	481a      	ldr	r0, [pc, #104]	; (8005c44 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005bda:	f7ff fa9d 	bl	8005118 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005bde:	e026      	b.n	8005c2e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4413      	add	r3, r2
 8005be6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005be8:	4b14      	ldr	r3, [pc, #80]	; (8005c3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d209      	bcs.n	8005c0c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bf8:	4b13      	ldr	r3, [pc, #76]	; (8005c48 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	4b0f      	ldr	r3, [pc, #60]	; (8005c3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3304      	adds	r3, #4
 8005c02:	4619      	mov	r1, r3
 8005c04:	4610      	mov	r0, r2
 8005c06:	f7ff faab 	bl	8005160 <vListInsert>
}
 8005c0a:	e010      	b.n	8005c2e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c0c:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <prvAddCurrentTaskToDelayedList+0xc4>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	4b0a      	ldr	r3, [pc, #40]	; (8005c3c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3304      	adds	r3, #4
 8005c16:	4619      	mov	r1, r3
 8005c18:	4610      	mov	r0, r2
 8005c1a:	f7ff faa1 	bl	8005160 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c1e:	4b0c      	ldr	r3, [pc, #48]	; (8005c50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d202      	bcs.n	8005c2e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005c28:	4a09      	ldr	r2, [pc, #36]	; (8005c50 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	6013      	str	r3, [r2, #0]
}
 8005c2e:	bf00      	nop
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	20000564 	.word	0x20000564
 8005c3c:	20000460 	.word	0x20000460
 8005c40:	20000568 	.word	0x20000568
 8005c44:	2000054c 	.word	0x2000054c
 8005c48:	2000051c 	.word	0x2000051c
 8005c4c:	20000518 	.word	0x20000518
 8005c50:	20000580 	.word	0x20000580

08005c54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3b04      	subs	r3, #4
 8005c64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005c6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	3b04      	subs	r3, #4
 8005c72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	f023 0201 	bic.w	r2, r3, #1
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	3b04      	subs	r3, #4
 8005c82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c84:	4a0c      	ldr	r2, [pc, #48]	; (8005cb8 <pxPortInitialiseStack+0x64>)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3b14      	subs	r3, #20
 8005c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c90:	687a      	ldr	r2, [r7, #4]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	3b04      	subs	r3, #4
 8005c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f06f 0202 	mvn.w	r2, #2
 8005ca2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	3b20      	subs	r3, #32
 8005ca8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005caa:	68fb      	ldr	r3, [r7, #12]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	08005cbd 	.word	0x08005cbd

08005cbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005cc6:	4b11      	ldr	r3, [pc, #68]	; (8005d0c <prvTaskExitError+0x50>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cce:	d009      	beq.n	8005ce4 <prvTaskExitError+0x28>
 8005cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd4:	f383 8811 	msr	BASEPRI, r3
 8005cd8:	f3bf 8f6f 	isb	sy
 8005cdc:	f3bf 8f4f 	dsb	sy
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	e7fe      	b.n	8005ce2 <prvTaskExitError+0x26>
 8005ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005cf6:	bf00      	nop
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0fc      	beq.n	8005cf8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005cfe:	bf00      	nop
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	2000000c 	.word	0x2000000c

08005d10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005d10:	4b07      	ldr	r3, [pc, #28]	; (8005d30 <pxCurrentTCBConst2>)
 8005d12:	6819      	ldr	r1, [r3, #0]
 8005d14:	6808      	ldr	r0, [r1, #0]
 8005d16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d1a:	f380 8809 	msr	PSP, r0
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f04f 0000 	mov.w	r0, #0
 8005d26:	f380 8811 	msr	BASEPRI, r0
 8005d2a:	4770      	bx	lr
 8005d2c:	f3af 8000 	nop.w

08005d30 <pxCurrentTCBConst2>:
 8005d30:	20000460 	.word	0x20000460
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop

08005d38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005d38:	4808      	ldr	r0, [pc, #32]	; (8005d5c <prvPortStartFirstTask+0x24>)
 8005d3a:	6800      	ldr	r0, [r0, #0]
 8005d3c:	6800      	ldr	r0, [r0, #0]
 8005d3e:	f380 8808 	msr	MSP, r0
 8005d42:	f04f 0000 	mov.w	r0, #0
 8005d46:	f380 8814 	msr	CONTROL, r0
 8005d4a:	b662      	cpsie	i
 8005d4c:	b661      	cpsie	f
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	f3bf 8f6f 	isb	sy
 8005d56:	df00      	svc	0
 8005d58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005d5a:	bf00      	nop
 8005d5c:	e000ed08 	.word	0xe000ed08

08005d60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005d66:	4b44      	ldr	r3, [pc, #272]	; (8005e78 <xPortStartScheduler+0x118>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a44      	ldr	r2, [pc, #272]	; (8005e7c <xPortStartScheduler+0x11c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d109      	bne.n	8005d84 <xPortStartScheduler+0x24>
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	613b      	str	r3, [r7, #16]
 8005d82:	e7fe      	b.n	8005d82 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d84:	4b3c      	ldr	r3, [pc, #240]	; (8005e78 <xPortStartScheduler+0x118>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a3d      	ldr	r2, [pc, #244]	; (8005e80 <xPortStartScheduler+0x120>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d109      	bne.n	8005da2 <xPortStartScheduler+0x42>
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	e7fe      	b.n	8005da0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005da2:	4b38      	ldr	r3, [pc, #224]	; (8005e84 <xPortStartScheduler+0x124>)
 8005da4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	22ff      	movs	r2, #255	; 0xff
 8005db2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005dbc:	78fb      	ldrb	r3, [r7, #3]
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	4b30      	ldr	r3, [pc, #192]	; (8005e88 <xPortStartScheduler+0x128>)
 8005dc8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005dca:	4b30      	ldr	r3, [pc, #192]	; (8005e8c <xPortStartScheduler+0x12c>)
 8005dcc:	2207      	movs	r2, #7
 8005dce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005dd0:	e009      	b.n	8005de6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005dd2:	4b2e      	ldr	r3, [pc, #184]	; (8005e8c <xPortStartScheduler+0x12c>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	4a2c      	ldr	r2, [pc, #176]	; (8005e8c <xPortStartScheduler+0x12c>)
 8005dda:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ddc:	78fb      	ldrb	r3, [r7, #3]
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005de6:	78fb      	ldrb	r3, [r7, #3]
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dee:	2b80      	cmp	r3, #128	; 0x80
 8005df0:	d0ef      	beq.n	8005dd2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005df2:	4b26      	ldr	r3, [pc, #152]	; (8005e8c <xPortStartScheduler+0x12c>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f1c3 0307 	rsb	r3, r3, #7
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	d009      	beq.n	8005e12 <xPortStartScheduler+0xb2>
 8005dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e02:	f383 8811 	msr	BASEPRI, r3
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	60bb      	str	r3, [r7, #8]
 8005e10:	e7fe      	b.n	8005e10 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005e12:	4b1e      	ldr	r3, [pc, #120]	; (8005e8c <xPortStartScheduler+0x12c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	021b      	lsls	r3, r3, #8
 8005e18:	4a1c      	ldr	r2, [pc, #112]	; (8005e8c <xPortStartScheduler+0x12c>)
 8005e1a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005e1c:	4b1b      	ldr	r3, [pc, #108]	; (8005e8c <xPortStartScheduler+0x12c>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e24:	4a19      	ldr	r2, [pc, #100]	; (8005e8c <xPortStartScheduler+0x12c>)
 8005e26:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005e30:	4b17      	ldr	r3, [pc, #92]	; (8005e90 <xPortStartScheduler+0x130>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a16      	ldr	r2, [pc, #88]	; (8005e90 <xPortStartScheduler+0x130>)
 8005e36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e3a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005e3c:	4b14      	ldr	r3, [pc, #80]	; (8005e90 <xPortStartScheduler+0x130>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a13      	ldr	r2, [pc, #76]	; (8005e90 <xPortStartScheduler+0x130>)
 8005e42:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005e46:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005e48:	f000 f8d6 	bl	8005ff8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e4c:	4b11      	ldr	r3, [pc, #68]	; (8005e94 <xPortStartScheduler+0x134>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005e52:	f000 f8f5 	bl	8006040 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005e56:	4b10      	ldr	r3, [pc, #64]	; (8005e98 <xPortStartScheduler+0x138>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a0f      	ldr	r2, [pc, #60]	; (8005e98 <xPortStartScheduler+0x138>)
 8005e5c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005e60:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005e62:	f7ff ff69 	bl	8005d38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005e66:	f7ff fd5d 	bl	8005924 <vTaskSwitchContext>
	prvTaskExitError();
 8005e6a:	f7ff ff27 	bl	8005cbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3718      	adds	r7, #24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	e000ed00 	.word	0xe000ed00
 8005e7c:	410fc271 	.word	0x410fc271
 8005e80:	410fc270 	.word	0x410fc270
 8005e84:	e000e400 	.word	0xe000e400
 8005e88:	2000058c 	.word	0x2000058c
 8005e8c:	20000590 	.word	0x20000590
 8005e90:	e000ed20 	.word	0xe000ed20
 8005e94:	2000000c 	.word	0x2000000c
 8005e98:	e000ef34 	.word	0xe000ef34

08005e9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005eb4:	4b0e      	ldr	r3, [pc, #56]	; (8005ef0 <vPortEnterCritical+0x54>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	4a0d      	ldr	r2, [pc, #52]	; (8005ef0 <vPortEnterCritical+0x54>)
 8005ebc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ebe:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <vPortEnterCritical+0x54>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d10e      	bne.n	8005ee4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ec6:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <vPortEnterCritical+0x58>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d009      	beq.n	8005ee4 <vPortEnterCritical+0x48>
 8005ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	603b      	str	r3, [r7, #0]
 8005ee2:	e7fe      	b.n	8005ee2 <vPortEnterCritical+0x46>
	}
}
 8005ee4:	bf00      	nop
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	2000000c 	.word	0x2000000c
 8005ef4:	e000ed04 	.word	0xe000ed04

08005ef8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005efe:	4b11      	ldr	r3, [pc, #68]	; (8005f44 <vPortExitCritical+0x4c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d109      	bne.n	8005f1a <vPortExitCritical+0x22>
 8005f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f0a:	f383 8811 	msr	BASEPRI, r3
 8005f0e:	f3bf 8f6f 	isb	sy
 8005f12:	f3bf 8f4f 	dsb	sy
 8005f16:	607b      	str	r3, [r7, #4]
 8005f18:	e7fe      	b.n	8005f18 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005f1a:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <vPortExitCritical+0x4c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	4a08      	ldr	r2, [pc, #32]	; (8005f44 <vPortExitCritical+0x4c>)
 8005f22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005f24:	4b07      	ldr	r3, [pc, #28]	; (8005f44 <vPortExitCritical+0x4c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d104      	bne.n	8005f36 <vPortExitCritical+0x3e>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	2000000c 	.word	0x2000000c
	...

08005f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f50:	f3ef 8009 	mrs	r0, PSP
 8005f54:	f3bf 8f6f 	isb	sy
 8005f58:	4b15      	ldr	r3, [pc, #84]	; (8005fb0 <pxCurrentTCBConst>)
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	f01e 0f10 	tst.w	lr, #16
 8005f60:	bf08      	it	eq
 8005f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f6a:	6010      	str	r0, [r2, #0]
 8005f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f74:	f380 8811 	msr	BASEPRI, r0
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f7ff fcd0 	bl	8005924 <vTaskSwitchContext>
 8005f84:	f04f 0000 	mov.w	r0, #0
 8005f88:	f380 8811 	msr	BASEPRI, r0
 8005f8c:	bc09      	pop	{r0, r3}
 8005f8e:	6819      	ldr	r1, [r3, #0]
 8005f90:	6808      	ldr	r0, [r1, #0]
 8005f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f96:	f01e 0f10 	tst.w	lr, #16
 8005f9a:	bf08      	it	eq
 8005f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005fa0:	f380 8809 	msr	PSP, r0
 8005fa4:	f3bf 8f6f 	isb	sy
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	f3af 8000 	nop.w

08005fb0 <pxCurrentTCBConst>:
 8005fb0:	20000460 	.word	0x20000460
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005fb4:	bf00      	nop
 8005fb6:	bf00      	nop

08005fb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005fd0:	f7ff fbec 	bl	80057ac <xTaskIncrementTick>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005fda:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <SysTick_Handler+0x3c>)
 8005fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005fec:	bf00      	nop
 8005fee:	3708      	adds	r7, #8
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	e000ed04 	.word	0xe000ed04

08005ff8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ffc:	4b0b      	ldr	r3, [pc, #44]	; (800602c <vPortSetupTimerInterrupt+0x34>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006002:	4b0b      	ldr	r3, [pc, #44]	; (8006030 <vPortSetupTimerInterrupt+0x38>)
 8006004:	2200      	movs	r2, #0
 8006006:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006008:	4b0a      	ldr	r3, [pc, #40]	; (8006034 <vPortSetupTimerInterrupt+0x3c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a0a      	ldr	r2, [pc, #40]	; (8006038 <vPortSetupTimerInterrupt+0x40>)
 800600e:	fba2 2303 	umull	r2, r3, r2, r3
 8006012:	099b      	lsrs	r3, r3, #6
 8006014:	4a09      	ldr	r2, [pc, #36]	; (800603c <vPortSetupTimerInterrupt+0x44>)
 8006016:	3b01      	subs	r3, #1
 8006018:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800601a:	4b04      	ldr	r3, [pc, #16]	; (800602c <vPortSetupTimerInterrupt+0x34>)
 800601c:	2207      	movs	r2, #7
 800601e:	601a      	str	r2, [r3, #0]
}
 8006020:	bf00      	nop
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	e000e010 	.word	0xe000e010
 8006030:	e000e018 	.word	0xe000e018
 8006034:	20000000 	.word	0x20000000
 8006038:	10624dd3 	.word	0x10624dd3
 800603c:	e000e014 	.word	0xe000e014

08006040 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006040:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006050 <vPortEnableVFP+0x10>
 8006044:	6801      	ldr	r1, [r0, #0]
 8006046:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800604a:	6001      	str	r1, [r0, #0]
 800604c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800604e:	bf00      	nop
 8006050:	e000ed88 	.word	0xe000ed88

08006054 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08a      	sub	sp, #40	; 0x28
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800605c:	2300      	movs	r3, #0
 800605e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006060:	f7ff fafa 	bl	8005658 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006064:	4b57      	ldr	r3, [pc, #348]	; (80061c4 <pvPortMalloc+0x170>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800606c:	f000 f90c 	bl	8006288 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006070:	4b55      	ldr	r3, [pc, #340]	; (80061c8 <pvPortMalloc+0x174>)
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4013      	ands	r3, r2
 8006078:	2b00      	cmp	r3, #0
 800607a:	f040 808c 	bne.w	8006196 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d01c      	beq.n	80060be <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006084:	2208      	movs	r2, #8
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	4413      	add	r3, r2
 800608a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	2b00      	cmp	r3, #0
 8006094:	d013      	beq.n	80060be <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f023 0307 	bic.w	r3, r3, #7
 800609c:	3308      	adds	r3, #8
 800609e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f003 0307 	and.w	r3, r3, #7
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d009      	beq.n	80060be <pvPortMalloc+0x6a>
	__asm volatile
 80060aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ae:	f383 8811 	msr	BASEPRI, r3
 80060b2:	f3bf 8f6f 	isb	sy
 80060b6:	f3bf 8f4f 	dsb	sy
 80060ba:	617b      	str	r3, [r7, #20]
 80060bc:	e7fe      	b.n	80060bc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d068      	beq.n	8006196 <pvPortMalloc+0x142>
 80060c4:	4b41      	ldr	r3, [pc, #260]	; (80061cc <pvPortMalloc+0x178>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d863      	bhi.n	8006196 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80060ce:	4b40      	ldr	r3, [pc, #256]	; (80061d0 <pvPortMalloc+0x17c>)
 80060d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80060d2:	4b3f      	ldr	r3, [pc, #252]	; (80061d0 <pvPortMalloc+0x17c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060d8:	e004      	b.n	80060e4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d903      	bls.n	80060f6 <pvPortMalloc+0xa2>
 80060ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1f1      	bne.n	80060da <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80060f6:	4b33      	ldr	r3, [pc, #204]	; (80061c4 <pvPortMalloc+0x170>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d04a      	beq.n	8006196 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2208      	movs	r2, #8
 8006106:	4413      	add	r3, r2
 8006108:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800610a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	6a3b      	ldr	r3, [r7, #32]
 8006110:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	1ad2      	subs	r2, r2, r3
 800611a:	2308      	movs	r3, #8
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	429a      	cmp	r2, r3
 8006120:	d91e      	bls.n	8006160 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4413      	add	r3, r2
 8006128:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	f003 0307 	and.w	r3, r3, #7
 8006130:	2b00      	cmp	r3, #0
 8006132:	d009      	beq.n	8006148 <pvPortMalloc+0xf4>
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	613b      	str	r3, [r7, #16]
 8006146:	e7fe      	b.n	8006146 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	1ad2      	subs	r2, r2, r3
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800615a:	69b8      	ldr	r0, [r7, #24]
 800615c:	f000 f8f6 	bl	800634c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006160:	4b1a      	ldr	r3, [pc, #104]	; (80061cc <pvPortMalloc+0x178>)
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	4a18      	ldr	r2, [pc, #96]	; (80061cc <pvPortMalloc+0x178>)
 800616c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800616e:	4b17      	ldr	r3, [pc, #92]	; (80061cc <pvPortMalloc+0x178>)
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	4b18      	ldr	r3, [pc, #96]	; (80061d4 <pvPortMalloc+0x180>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	429a      	cmp	r2, r3
 8006178:	d203      	bcs.n	8006182 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800617a:	4b14      	ldr	r3, [pc, #80]	; (80061cc <pvPortMalloc+0x178>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a15      	ldr	r2, [pc, #84]	; (80061d4 <pvPortMalloc+0x180>)
 8006180:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	4b10      	ldr	r3, [pc, #64]	; (80061c8 <pvPortMalloc+0x174>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	431a      	orrs	r2, r3
 800618c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006196:	f7ff fa6d 	bl	8005674 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	f003 0307 	and.w	r3, r3, #7
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d009      	beq.n	80061b8 <pvPortMalloc+0x164>
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	60fb      	str	r3, [r7, #12]
 80061b6:	e7fe      	b.n	80061b6 <pvPortMalloc+0x162>
	return pvReturn;
 80061b8:	69fb      	ldr	r3, [r7, #28]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3728      	adds	r7, #40	; 0x28
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	2000119c 	.word	0x2000119c
 80061c8:	200011a8 	.word	0x200011a8
 80061cc:	200011a0 	.word	0x200011a0
 80061d0:	20001194 	.word	0x20001194
 80061d4:	200011a4 	.word	0x200011a4

080061d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d046      	beq.n	8006278 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80061ea:	2308      	movs	r3, #8
 80061ec:	425b      	negs	r3, r3
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4413      	add	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	4b20      	ldr	r3, [pc, #128]	; (8006280 <vPortFree+0xa8>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4013      	ands	r3, r2
 8006202:	2b00      	cmp	r3, #0
 8006204:	d109      	bne.n	800621a <vPortFree+0x42>
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	e7fe      	b.n	8006218 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d009      	beq.n	8006236 <vPortFree+0x5e>
 8006222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	60bb      	str	r3, [r7, #8]
 8006234:	e7fe      	b.n	8006234 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	4b11      	ldr	r3, [pc, #68]	; (8006280 <vPortFree+0xa8>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4013      	ands	r3, r2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d019      	beq.n	8006278 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d115      	bne.n	8006278 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	4b0b      	ldr	r3, [pc, #44]	; (8006280 <vPortFree+0xa8>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	43db      	mvns	r3, r3
 8006256:	401a      	ands	r2, r3
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800625c:	f7ff f9fc 	bl	8005658 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	4b07      	ldr	r3, [pc, #28]	; (8006284 <vPortFree+0xac>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4413      	add	r3, r2
 800626a:	4a06      	ldr	r2, [pc, #24]	; (8006284 <vPortFree+0xac>)
 800626c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800626e:	6938      	ldr	r0, [r7, #16]
 8006270:	f000 f86c 	bl	800634c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006274:	f7ff f9fe 	bl	8005674 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006278:	bf00      	nop
 800627a:	3718      	adds	r7, #24
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}
 8006280:	200011a8 	.word	0x200011a8
 8006284:	200011a0 	.word	0x200011a0

08006288 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800628e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006292:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006294:	4b27      	ldr	r3, [pc, #156]	; (8006334 <prvHeapInit+0xac>)
 8006296:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00c      	beq.n	80062bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	3307      	adds	r3, #7
 80062a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0307 	bic.w	r3, r3, #7
 80062ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	1ad3      	subs	r3, r2, r3
 80062b6:	4a1f      	ldr	r2, [pc, #124]	; (8006334 <prvHeapInit+0xac>)
 80062b8:	4413      	add	r3, r2
 80062ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062c0:	4a1d      	ldr	r2, [pc, #116]	; (8006338 <prvHeapInit+0xb0>)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80062c6:	4b1c      	ldr	r3, [pc, #112]	; (8006338 <prvHeapInit+0xb0>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	4413      	add	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80062d4:	2208      	movs	r2, #8
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	1a9b      	subs	r3, r3, r2
 80062da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f023 0307 	bic.w	r3, r3, #7
 80062e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4a15      	ldr	r2, [pc, #84]	; (800633c <prvHeapInit+0xb4>)
 80062e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062ea:	4b14      	ldr	r3, [pc, #80]	; (800633c <prvHeapInit+0xb4>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2200      	movs	r2, #0
 80062f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062f2:	4b12      	ldr	r3, [pc, #72]	; (800633c <prvHeapInit+0xb4>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2200      	movs	r2, #0
 80062f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68fa      	ldr	r2, [r7, #12]
 8006302:	1ad2      	subs	r2, r2, r3
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006308:	4b0c      	ldr	r3, [pc, #48]	; (800633c <prvHeapInit+0xb4>)
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	4a0a      	ldr	r2, [pc, #40]	; (8006340 <prvHeapInit+0xb8>)
 8006316:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	4a09      	ldr	r2, [pc, #36]	; (8006344 <prvHeapInit+0xbc>)
 800631e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006320:	4b09      	ldr	r3, [pc, #36]	; (8006348 <prvHeapInit+0xc0>)
 8006322:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006326:	601a      	str	r2, [r3, #0]
}
 8006328:	bf00      	nop
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	20000594 	.word	0x20000594
 8006338:	20001194 	.word	0x20001194
 800633c:	2000119c 	.word	0x2000119c
 8006340:	200011a4 	.word	0x200011a4
 8006344:	200011a0 	.word	0x200011a0
 8006348:	200011a8 	.word	0x200011a8

0800634c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006354:	4b28      	ldr	r3, [pc, #160]	; (80063f8 <prvInsertBlockIntoFreeList+0xac>)
 8006356:	60fb      	str	r3, [r7, #12]
 8006358:	e002      	b.n	8006360 <prvInsertBlockIntoFreeList+0x14>
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	429a      	cmp	r2, r3
 8006368:	d8f7      	bhi.n	800635a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	4413      	add	r3, r2
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	429a      	cmp	r2, r3
 800637a:	d108      	bne.n	800638e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	441a      	add	r2, r3
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	441a      	add	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d118      	bne.n	80063d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	4b15      	ldr	r3, [pc, #84]	; (80063fc <prvInsertBlockIntoFreeList+0xb0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d00d      	beq.n	80063ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	441a      	add	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	e008      	b.n	80063dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80063ca:	4b0c      	ldr	r3, [pc, #48]	; (80063fc <prvInsertBlockIntoFreeList+0xb0>)
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	601a      	str	r2, [r3, #0]
 80063d2:	e003      	b.n	80063dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d002      	beq.n	80063ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063ea:	bf00      	nop
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	20001194 	.word	0x20001194
 80063fc:	2000119c 	.word	0x2000119c

08006400 <_ZdlPvj>:
 8006400:	f000 b81a 	b.w	8006438 <_ZdlPv>

08006404 <_Znwj>:
 8006404:	b510      	push	{r4, lr}
 8006406:	2800      	cmp	r0, #0
 8006408:	bf14      	ite	ne
 800640a:	4604      	movne	r4, r0
 800640c:	2401      	moveq	r4, #1
 800640e:	4620      	mov	r0, r4
 8006410:	f000 fdb8 	bl	8006f84 <malloc>
 8006414:	b930      	cbnz	r0, 8006424 <_Znwj+0x20>
 8006416:	f000 f807 	bl	8006428 <_ZSt15get_new_handlerv>
 800641a:	b908      	cbnz	r0, 8006420 <_Znwj+0x1c>
 800641c:	f000 fd7c 	bl	8006f18 <abort>
 8006420:	4780      	blx	r0
 8006422:	e7f4      	b.n	800640e <_Znwj+0xa>
 8006424:	bd10      	pop	{r4, pc}
	...

08006428 <_ZSt15get_new_handlerv>:
 8006428:	4b02      	ldr	r3, [pc, #8]	; (8006434 <_ZSt15get_new_handlerv+0xc>)
 800642a:	6818      	ldr	r0, [r3, #0]
 800642c:	f3bf 8f5b 	dmb	ish
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	200011ac 	.word	0x200011ac

08006438 <_ZdlPv>:
 8006438:	f000 bdac 	b.w	8006f94 <free>

0800643c <floorf>:
 800643c:	ee10 3a10 	vmov	r3, s0
 8006440:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006444:	0dca      	lsrs	r2, r1, #23
 8006446:	3a7f      	subs	r2, #127	; 0x7f
 8006448:	2a16      	cmp	r2, #22
 800644a:	dc2a      	bgt.n	80064a2 <floorf+0x66>
 800644c:	2a00      	cmp	r2, #0
 800644e:	da11      	bge.n	8006474 <floorf+0x38>
 8006450:	eddf 7a18 	vldr	s15, [pc, #96]	; 80064b4 <floorf+0x78>
 8006454:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006458:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800645c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006460:	dd05      	ble.n	800646e <floorf+0x32>
 8006462:	2b00      	cmp	r3, #0
 8006464:	da23      	bge.n	80064ae <floorf+0x72>
 8006466:	4a14      	ldr	r2, [pc, #80]	; (80064b8 <floorf+0x7c>)
 8006468:	2900      	cmp	r1, #0
 800646a:	bf18      	it	ne
 800646c:	4613      	movne	r3, r2
 800646e:	ee00 3a10 	vmov	s0, r3
 8006472:	4770      	bx	lr
 8006474:	4911      	ldr	r1, [pc, #68]	; (80064bc <floorf+0x80>)
 8006476:	4111      	asrs	r1, r2
 8006478:	420b      	tst	r3, r1
 800647a:	d0fa      	beq.n	8006472 <floorf+0x36>
 800647c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80064b4 <floorf+0x78>
 8006480:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006484:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800648c:	ddef      	ble.n	800646e <floorf+0x32>
 800648e:	2b00      	cmp	r3, #0
 8006490:	bfbe      	ittt	lt
 8006492:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8006496:	fa40 f202 	asrlt.w	r2, r0, r2
 800649a:	189b      	addlt	r3, r3, r2
 800649c:	ea23 0301 	bic.w	r3, r3, r1
 80064a0:	e7e5      	b.n	800646e <floorf+0x32>
 80064a2:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80064a6:	d3e4      	bcc.n	8006472 <floorf+0x36>
 80064a8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80064ac:	4770      	bx	lr
 80064ae:	2300      	movs	r3, #0
 80064b0:	e7dd      	b.n	800646e <floorf+0x32>
 80064b2:	bf00      	nop
 80064b4:	7149f2ca 	.word	0x7149f2ca
 80064b8:	bf800000 	.word	0xbf800000
 80064bc:	007fffff 	.word	0x007fffff

080064c0 <roundf>:
 80064c0:	ee10 0a10 	vmov	r0, s0
 80064c4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80064c8:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80064cc:	2a16      	cmp	r2, #22
 80064ce:	dc15      	bgt.n	80064fc <roundf+0x3c>
 80064d0:	2a00      	cmp	r2, #0
 80064d2:	da08      	bge.n	80064e6 <roundf+0x26>
 80064d4:	3201      	adds	r2, #1
 80064d6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80064da:	d101      	bne.n	80064e0 <roundf+0x20>
 80064dc:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80064e0:	ee00 3a10 	vmov	s0, r3
 80064e4:	4770      	bx	lr
 80064e6:	4908      	ldr	r1, [pc, #32]	; (8006508 <roundf+0x48>)
 80064e8:	4111      	asrs	r1, r2
 80064ea:	4208      	tst	r0, r1
 80064ec:	d0fa      	beq.n	80064e4 <roundf+0x24>
 80064ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80064f2:	4113      	asrs	r3, r2
 80064f4:	4403      	add	r3, r0
 80064f6:	ea23 0301 	bic.w	r3, r3, r1
 80064fa:	e7f1      	b.n	80064e0 <roundf+0x20>
 80064fc:	2a80      	cmp	r2, #128	; 0x80
 80064fe:	d1f1      	bne.n	80064e4 <roundf+0x24>
 8006500:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	007fffff 	.word	0x007fffff

0800650c <powf>:
 800650c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8006510:	ed2d 8b04 	vpush	{d8-d9}
 8006514:	4ca7      	ldr	r4, [pc, #668]	; (80067b4 <powf+0x2a8>)
 8006516:	b08a      	sub	sp, #40	; 0x28
 8006518:	eef0 8a40 	vmov.f32	s17, s0
 800651c:	eeb0 8a60 	vmov.f32	s16, s1
 8006520:	f000 f958 	bl	80067d4 <__ieee754_powf>
 8006524:	f994 5000 	ldrsb.w	r5, [r4]
 8006528:	1c6b      	adds	r3, r5, #1
 800652a:	eeb0 9a40 	vmov.f32	s18, s0
 800652e:	4626      	mov	r6, r4
 8006530:	d05f      	beq.n	80065f2 <powf+0xe6>
 8006532:	eeb4 8a48 	vcmp.f32	s16, s16
 8006536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800653a:	d65a      	bvs.n	80065f2 <powf+0xe6>
 800653c:	eef4 8a68 	vcmp.f32	s17, s17
 8006540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006544:	d721      	bvc.n	800658a <powf+0x7e>
 8006546:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800654a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800654e:	d150      	bne.n	80065f2 <powf+0xe6>
 8006550:	2301      	movs	r3, #1
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	4b98      	ldr	r3, [pc, #608]	; (80067b8 <powf+0x2ac>)
 8006556:	9301      	str	r3, [sp, #4]
 8006558:	ee18 0a90 	vmov	r0, s17
 800655c:	2300      	movs	r3, #0
 800655e:	9308      	str	r3, [sp, #32]
 8006560:	f7f9 ffa2 	bl	80004a8 <__aeabi_f2d>
 8006564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006568:	ee18 0a10 	vmov	r0, s16
 800656c:	f7f9 ff9c 	bl	80004a8 <__aeabi_f2d>
 8006570:	4b92      	ldr	r3, [pc, #584]	; (80067bc <powf+0x2b0>)
 8006572:	2200      	movs	r2, #0
 8006574:	2d02      	cmp	r5, #2
 8006576:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800657a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800657e:	d032      	beq.n	80065e6 <powf+0xda>
 8006580:	4668      	mov	r0, sp
 8006582:	f000 fbea 	bl	8006d5a <matherr>
 8006586:	bb40      	cbnz	r0, 80065da <powf+0xce>
 8006588:	e065      	b.n	8006656 <powf+0x14a>
 800658a:	eddf 9a8d 	vldr	s19, [pc, #564]	; 80067c0 <powf+0x2b4>
 800658e:	eef4 8a69 	vcmp.f32	s17, s19
 8006592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006596:	d163      	bne.n	8006660 <powf+0x154>
 8006598:	eeb4 8a69 	vcmp.f32	s16, s19
 800659c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065a0:	d12e      	bne.n	8006600 <powf+0xf4>
 80065a2:	2301      	movs	r3, #1
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	4b84      	ldr	r3, [pc, #528]	; (80067b8 <powf+0x2ac>)
 80065a8:	9301      	str	r3, [sp, #4]
 80065aa:	ee18 0a90 	vmov	r0, s17
 80065ae:	2300      	movs	r3, #0
 80065b0:	9308      	str	r3, [sp, #32]
 80065b2:	f7f9 ff79 	bl	80004a8 <__aeabi_f2d>
 80065b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065ba:	ee18 0a10 	vmov	r0, s16
 80065be:	f7f9 ff73 	bl	80004a8 <__aeabi_f2d>
 80065c2:	2200      	movs	r2, #0
 80065c4:	2300      	movs	r3, #0
 80065c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80065ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80065ce:	2d00      	cmp	r5, #0
 80065d0:	d0d6      	beq.n	8006580 <powf+0x74>
 80065d2:	4b7a      	ldr	r3, [pc, #488]	; (80067bc <powf+0x2b0>)
 80065d4:	2200      	movs	r2, #0
 80065d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80065da:	9b08      	ldr	r3, [sp, #32]
 80065dc:	b11b      	cbz	r3, 80065e6 <powf+0xda>
 80065de:	f000 fca7 	bl	8006f30 <__errno>
 80065e2:	9b08      	ldr	r3, [sp, #32]
 80065e4:	6003      	str	r3, [r0, #0]
 80065e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065ea:	f7f9 ffb5 	bl	8000558 <__aeabi_d2f>
 80065ee:	ee09 0a10 	vmov	s18, r0
 80065f2:	eeb0 0a49 	vmov.f32	s0, s18
 80065f6:	b00a      	add	sp, #40	; 0x28
 80065f8:	ecbd 8b04 	vpop	{d8-d9}
 80065fc:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006600:	eeb0 0a48 	vmov.f32	s0, s16
 8006604:	f000 fbb2 	bl	8006d6c <finitef>
 8006608:	2800      	cmp	r0, #0
 800660a:	d0f2      	beq.n	80065f2 <powf+0xe6>
 800660c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006614:	d5ed      	bpl.n	80065f2 <powf+0xe6>
 8006616:	2301      	movs	r3, #1
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	4b67      	ldr	r3, [pc, #412]	; (80067b8 <powf+0x2ac>)
 800661c:	9301      	str	r3, [sp, #4]
 800661e:	ee18 0a90 	vmov	r0, s17
 8006622:	2300      	movs	r3, #0
 8006624:	9308      	str	r3, [sp, #32]
 8006626:	f7f9 ff3f 	bl	80004a8 <__aeabi_f2d>
 800662a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800662e:	ee18 0a10 	vmov	r0, s16
 8006632:	f7f9 ff39 	bl	80004a8 <__aeabi_f2d>
 8006636:	f994 3000 	ldrsb.w	r3, [r4]
 800663a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800663e:	b923      	cbnz	r3, 800664a <powf+0x13e>
 8006640:	2200      	movs	r2, #0
 8006642:	2300      	movs	r3, #0
 8006644:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006648:	e79a      	b.n	8006580 <powf+0x74>
 800664a:	495e      	ldr	r1, [pc, #376]	; (80067c4 <powf+0x2b8>)
 800664c:	2000      	movs	r0, #0
 800664e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006652:	2b02      	cmp	r3, #2
 8006654:	d194      	bne.n	8006580 <powf+0x74>
 8006656:	f000 fc6b 	bl	8006f30 <__errno>
 800665a:	2321      	movs	r3, #33	; 0x21
 800665c:	6003      	str	r3, [r0, #0]
 800665e:	e7bc      	b.n	80065da <powf+0xce>
 8006660:	f000 fb84 	bl	8006d6c <finitef>
 8006664:	4605      	mov	r5, r0
 8006666:	2800      	cmp	r0, #0
 8006668:	d173      	bne.n	8006752 <powf+0x246>
 800666a:	eeb0 0a68 	vmov.f32	s0, s17
 800666e:	f000 fb7d 	bl	8006d6c <finitef>
 8006672:	2800      	cmp	r0, #0
 8006674:	d06d      	beq.n	8006752 <powf+0x246>
 8006676:	eeb0 0a48 	vmov.f32	s0, s16
 800667a:	f000 fb77 	bl	8006d6c <finitef>
 800667e:	2800      	cmp	r0, #0
 8006680:	d067      	beq.n	8006752 <powf+0x246>
 8006682:	ee18 0a90 	vmov	r0, s17
 8006686:	f7f9 ff0f 	bl	80004a8 <__aeabi_f2d>
 800668a:	4680      	mov	r8, r0
 800668c:	ee18 0a10 	vmov	r0, s16
 8006690:	4689      	mov	r9, r1
 8006692:	f7f9 ff09 	bl	80004a8 <__aeabi_f2d>
 8006696:	eeb4 9a49 	vcmp.f32	s18, s18
 800669a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800669e:	f994 4000 	ldrsb.w	r4, [r4]
 80066a2:	4b45      	ldr	r3, [pc, #276]	; (80067b8 <powf+0x2ac>)
 80066a4:	d713      	bvc.n	80066ce <powf+0x1c2>
 80066a6:	2201      	movs	r2, #1
 80066a8:	e9cd 2300 	strd	r2, r3, [sp]
 80066ac:	9508      	str	r5, [sp, #32]
 80066ae:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80066b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066b6:	2c00      	cmp	r4, #0
 80066b8:	d0c2      	beq.n	8006640 <powf+0x134>
 80066ba:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 80066be:	ee17 0a90 	vmov	r0, s15
 80066c2:	f7f9 fef1 	bl	80004a8 <__aeabi_f2d>
 80066c6:	2c02      	cmp	r4, #2
 80066c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80066cc:	e7c2      	b.n	8006654 <powf+0x148>
 80066ce:	2203      	movs	r2, #3
 80066d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80066d4:	e9cd 2300 	strd	r2, r3, [sp]
 80066d8:	9508      	str	r5, [sp, #32]
 80066da:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80066de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066e2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80066e6:	b9fc      	cbnz	r4, 8006728 <powf+0x21c>
 80066e8:	4b37      	ldr	r3, [pc, #220]	; (80067c8 <powf+0x2bc>)
 80066ea:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80066ee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80066f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80066fa:	d553      	bpl.n	80067a4 <powf+0x298>
 80066fc:	eeb0 0a48 	vmov.f32	s0, s16
 8006700:	f000 fb44 	bl	8006d8c <rintf>
 8006704:	eeb4 0a48 	vcmp.f32	s0, s16
 8006708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800670c:	d004      	beq.n	8006718 <powf+0x20c>
 800670e:	4b2f      	ldr	r3, [pc, #188]	; (80067cc <powf+0x2c0>)
 8006710:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006714:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006718:	f996 3000 	ldrsb.w	r3, [r6]
 800671c:	2b02      	cmp	r3, #2
 800671e:	d141      	bne.n	80067a4 <powf+0x298>
 8006720:	f000 fc06 	bl	8006f30 <__errno>
 8006724:	2322      	movs	r3, #34	; 0x22
 8006726:	e799      	b.n	800665c <powf+0x150>
 8006728:	4b29      	ldr	r3, [pc, #164]	; (80067d0 <powf+0x2c4>)
 800672a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800672e:	2200      	movs	r2, #0
 8006730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006734:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006738:	d5ee      	bpl.n	8006718 <powf+0x20c>
 800673a:	eeb0 0a48 	vmov.f32	s0, s16
 800673e:	f000 fb25 	bl	8006d8c <rintf>
 8006742:	eeb4 0a48 	vcmp.f32	s0, s16
 8006746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800674a:	d0e5      	beq.n	8006718 <powf+0x20c>
 800674c:	2200      	movs	r2, #0
 800674e:	4b1d      	ldr	r3, [pc, #116]	; (80067c4 <powf+0x2b8>)
 8006750:	e7e0      	b.n	8006714 <powf+0x208>
 8006752:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8006756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800675a:	f47f af4a 	bne.w	80065f2 <powf+0xe6>
 800675e:	eeb0 0a68 	vmov.f32	s0, s17
 8006762:	f000 fb03 	bl	8006d6c <finitef>
 8006766:	2800      	cmp	r0, #0
 8006768:	f43f af43 	beq.w	80065f2 <powf+0xe6>
 800676c:	eeb0 0a48 	vmov.f32	s0, s16
 8006770:	f000 fafc 	bl	8006d6c <finitef>
 8006774:	2800      	cmp	r0, #0
 8006776:	f43f af3c 	beq.w	80065f2 <powf+0xe6>
 800677a:	2304      	movs	r3, #4
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	4b0e      	ldr	r3, [pc, #56]	; (80067b8 <powf+0x2ac>)
 8006780:	9301      	str	r3, [sp, #4]
 8006782:	ee18 0a90 	vmov	r0, s17
 8006786:	2300      	movs	r3, #0
 8006788:	9308      	str	r3, [sp, #32]
 800678a:	f7f9 fe8d 	bl	80004a8 <__aeabi_f2d>
 800678e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006792:	ee18 0a10 	vmov	r0, s16
 8006796:	f7f9 fe87 	bl	80004a8 <__aeabi_f2d>
 800679a:	2200      	movs	r2, #0
 800679c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067a0:	2300      	movs	r3, #0
 80067a2:	e7b7      	b.n	8006714 <powf+0x208>
 80067a4:	4668      	mov	r0, sp
 80067a6:	f000 fad8 	bl	8006d5a <matherr>
 80067aa:	2800      	cmp	r0, #0
 80067ac:	f47f af15 	bne.w	80065da <powf+0xce>
 80067b0:	e7b6      	b.n	8006720 <powf+0x214>
 80067b2:	bf00      	nop
 80067b4:	20000010 	.word	0x20000010
 80067b8:	08007458 	.word	0x08007458
 80067bc:	3ff00000 	.word	0x3ff00000
 80067c0:	00000000 	.word	0x00000000
 80067c4:	fff00000 	.word	0xfff00000
 80067c8:	47efffff 	.word	0x47efffff
 80067cc:	c7efffff 	.word	0xc7efffff
 80067d0:	7ff00000 	.word	0x7ff00000

080067d4 <__ieee754_powf>:
 80067d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d8:	ee10 5a90 	vmov	r5, s1
 80067dc:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80067e0:	ed2d 8b02 	vpush	{d8}
 80067e4:	eeb0 8a40 	vmov.f32	s16, s0
 80067e8:	eef0 8a60 	vmov.f32	s17, s1
 80067ec:	f000 8293 	beq.w	8006d16 <__ieee754_powf+0x542>
 80067f0:	ee10 8a10 	vmov	r8, s0
 80067f4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80067f8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80067fc:	dc06      	bgt.n	800680c <__ieee754_powf+0x38>
 80067fe:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006802:	dd0a      	ble.n	800681a <__ieee754_powf+0x46>
 8006804:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8006808:	f000 8285 	beq.w	8006d16 <__ieee754_powf+0x542>
 800680c:	ecbd 8b02 	vpop	{d8}
 8006810:	48d9      	ldr	r0, [pc, #868]	; (8006b78 <__ieee754_powf+0x3a4>)
 8006812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006816:	f000 bab3 	b.w	8006d80 <nanf>
 800681a:	f1b8 0f00 	cmp.w	r8, #0
 800681e:	da1d      	bge.n	800685c <__ieee754_powf+0x88>
 8006820:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8006824:	da2c      	bge.n	8006880 <__ieee754_powf+0xac>
 8006826:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800682a:	db30      	blt.n	800688e <__ieee754_powf+0xba>
 800682c:	15fb      	asrs	r3, r7, #23
 800682e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006832:	fa47 f603 	asr.w	r6, r7, r3
 8006836:	fa06 f303 	lsl.w	r3, r6, r3
 800683a:	42bb      	cmp	r3, r7
 800683c:	d127      	bne.n	800688e <__ieee754_powf+0xba>
 800683e:	f006 0601 	and.w	r6, r6, #1
 8006842:	f1c6 0602 	rsb	r6, r6, #2
 8006846:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800684a:	d122      	bne.n	8006892 <__ieee754_powf+0xbe>
 800684c:	2d00      	cmp	r5, #0
 800684e:	f280 8268 	bge.w	8006d22 <__ieee754_powf+0x54e>
 8006852:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006856:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800685a:	e00d      	b.n	8006878 <__ieee754_powf+0xa4>
 800685c:	2600      	movs	r6, #0
 800685e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006862:	d1f0      	bne.n	8006846 <__ieee754_powf+0x72>
 8006864:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8006868:	f000 8255 	beq.w	8006d16 <__ieee754_powf+0x542>
 800686c:	dd0a      	ble.n	8006884 <__ieee754_powf+0xb0>
 800686e:	2d00      	cmp	r5, #0
 8006870:	f280 8254 	bge.w	8006d1c <__ieee754_powf+0x548>
 8006874:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8006b7c <__ieee754_powf+0x3a8>
 8006878:	ecbd 8b02 	vpop	{d8}
 800687c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006880:	2602      	movs	r6, #2
 8006882:	e7ec      	b.n	800685e <__ieee754_powf+0x8a>
 8006884:	2d00      	cmp	r5, #0
 8006886:	daf5      	bge.n	8006874 <__ieee754_powf+0xa0>
 8006888:	eeb1 0a68 	vneg.f32	s0, s17
 800688c:	e7f4      	b.n	8006878 <__ieee754_powf+0xa4>
 800688e:	2600      	movs	r6, #0
 8006890:	e7d9      	b.n	8006846 <__ieee754_powf+0x72>
 8006892:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8006896:	d102      	bne.n	800689e <__ieee754_powf+0xca>
 8006898:	ee28 0a08 	vmul.f32	s0, s16, s16
 800689c:	e7ec      	b.n	8006878 <__ieee754_powf+0xa4>
 800689e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 80068a2:	eeb0 0a48 	vmov.f32	s0, s16
 80068a6:	d108      	bne.n	80068ba <__ieee754_powf+0xe6>
 80068a8:	f1b8 0f00 	cmp.w	r8, #0
 80068ac:	db05      	blt.n	80068ba <__ieee754_powf+0xe6>
 80068ae:	ecbd 8b02 	vpop	{d8}
 80068b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068b6:	f000 ba4d 	b.w	8006d54 <__ieee754_sqrtf>
 80068ba:	f000 fa50 	bl	8006d5e <fabsf>
 80068be:	b124      	cbz	r4, 80068ca <__ieee754_powf+0xf6>
 80068c0:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 80068c4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80068c8:	d117      	bne.n	80068fa <__ieee754_powf+0x126>
 80068ca:	2d00      	cmp	r5, #0
 80068cc:	bfbc      	itt	lt
 80068ce:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80068d2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80068d6:	f1b8 0f00 	cmp.w	r8, #0
 80068da:	dacd      	bge.n	8006878 <__ieee754_powf+0xa4>
 80068dc:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80068e0:	ea54 0306 	orrs.w	r3, r4, r6
 80068e4:	d104      	bne.n	80068f0 <__ieee754_powf+0x11c>
 80068e6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80068ea:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80068ee:	e7c3      	b.n	8006878 <__ieee754_powf+0xa4>
 80068f0:	2e01      	cmp	r6, #1
 80068f2:	d1c1      	bne.n	8006878 <__ieee754_powf+0xa4>
 80068f4:	eeb1 0a40 	vneg.f32	s0, s0
 80068f8:	e7be      	b.n	8006878 <__ieee754_powf+0xa4>
 80068fa:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80068fe:	3801      	subs	r0, #1
 8006900:	ea56 0300 	orrs.w	r3, r6, r0
 8006904:	d104      	bne.n	8006910 <__ieee754_powf+0x13c>
 8006906:	ee38 8a48 	vsub.f32	s16, s16, s16
 800690a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800690e:	e7b3      	b.n	8006878 <__ieee754_powf+0xa4>
 8006910:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8006914:	dd6d      	ble.n	80069f2 <__ieee754_powf+0x21e>
 8006916:	4b9a      	ldr	r3, [pc, #616]	; (8006b80 <__ieee754_powf+0x3ac>)
 8006918:	429c      	cmp	r4, r3
 800691a:	dc06      	bgt.n	800692a <__ieee754_powf+0x156>
 800691c:	2d00      	cmp	r5, #0
 800691e:	daa9      	bge.n	8006874 <__ieee754_powf+0xa0>
 8006920:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8006b84 <__ieee754_powf+0x3b0>
 8006924:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006928:	e7a6      	b.n	8006878 <__ieee754_powf+0xa4>
 800692a:	4b97      	ldr	r3, [pc, #604]	; (8006b88 <__ieee754_powf+0x3b4>)
 800692c:	429c      	cmp	r4, r3
 800692e:	dd02      	ble.n	8006936 <__ieee754_powf+0x162>
 8006930:	2d00      	cmp	r5, #0
 8006932:	dcf5      	bgt.n	8006920 <__ieee754_powf+0x14c>
 8006934:	e79e      	b.n	8006874 <__ieee754_powf+0xa0>
 8006936:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800693a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800693e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8006b8c <__ieee754_powf+0x3b8>
 8006942:	eef1 6a40 	vneg.f32	s13, s0
 8006946:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800694a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800694e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006952:	eee7 7a40 	vfms.f32	s15, s14, s0
 8006956:	ee60 0a00 	vmul.f32	s1, s0, s0
 800695a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8006b90 <__ieee754_powf+0x3bc>
 800695e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8006962:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8006b94 <__ieee754_powf+0x3c0>
 8006966:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800696a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800696e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8006b98 <__ieee754_powf+0x3c4>
 8006972:	eeb0 6a67 	vmov.f32	s12, s15
 8006976:	eea0 6a07 	vfma.f32	s12, s0, s14
 800697a:	ee16 3a10 	vmov	r3, s12
 800697e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006982:	f023 030f 	bic.w	r3, r3, #15
 8006986:	ee00 3a90 	vmov	s1, r3
 800698a:	eee6 0a87 	vfma.f32	s1, s13, s14
 800698e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006992:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8006996:	f025 050f 	bic.w	r5, r5, #15
 800699a:	ee07 5a10 	vmov	s14, r5
 800699e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80069a2:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80069a6:	ee07 3a90 	vmov	s15, r3
 80069aa:	eee7 0a27 	vfma.f32	s1, s14, s15
 80069ae:	3e01      	subs	r6, #1
 80069b0:	ea56 0200 	orrs.w	r2, r6, r0
 80069b4:	ee07 5a10 	vmov	s14, r5
 80069b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80069bc:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80069c0:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80069c4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80069c8:	ee17 4a10 	vmov	r4, s14
 80069cc:	bf08      	it	eq
 80069ce:	eeb0 8a40 	vmoveq.f32	s16, s0
 80069d2:	2c00      	cmp	r4, #0
 80069d4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80069d8:	f340 8184 	ble.w	8006ce4 <__ieee754_powf+0x510>
 80069dc:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80069e0:	f340 80fc 	ble.w	8006bdc <__ieee754_powf+0x408>
 80069e4:	eddf 7a67 	vldr	s15, [pc, #412]	; 8006b84 <__ieee754_powf+0x3b0>
 80069e8:	ee28 0a27 	vmul.f32	s0, s16, s15
 80069ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 80069f0:	e742      	b.n	8006878 <__ieee754_powf+0xa4>
 80069f2:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 80069f6:	bfbf      	itttt	lt
 80069f8:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8006b9c <__ieee754_powf+0x3c8>
 80069fc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8006a00:	f06f 0217 	mvnlt.w	r2, #23
 8006a04:	ee17 4a90 	vmovlt	r4, s15
 8006a08:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8006a0c:	bfa8      	it	ge
 8006a0e:	2200      	movge	r2, #0
 8006a10:	3b7f      	subs	r3, #127	; 0x7f
 8006a12:	4413      	add	r3, r2
 8006a14:	4a62      	ldr	r2, [pc, #392]	; (8006ba0 <__ieee754_powf+0x3cc>)
 8006a16:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8006a1a:	4294      	cmp	r4, r2
 8006a1c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8006a20:	dd06      	ble.n	8006a30 <__ieee754_powf+0x25c>
 8006a22:	4a60      	ldr	r2, [pc, #384]	; (8006ba4 <__ieee754_powf+0x3d0>)
 8006a24:	4294      	cmp	r4, r2
 8006a26:	f340 80a5 	ble.w	8006b74 <__ieee754_powf+0x3a0>
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8006a30:	2400      	movs	r4, #0
 8006a32:	4a5d      	ldr	r2, [pc, #372]	; (8006ba8 <__ieee754_powf+0x3d4>)
 8006a34:	00a7      	lsls	r7, r4, #2
 8006a36:	443a      	add	r2, r7
 8006a38:	ee07 1a90 	vmov	s15, r1
 8006a3c:	ed92 7a00 	vldr	s14, [r2]
 8006a40:	4a5a      	ldr	r2, [pc, #360]	; (8006bac <__ieee754_powf+0x3d8>)
 8006a42:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006a46:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8006a4a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8006a4e:	1049      	asrs	r1, r1, #1
 8006a50:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8006a54:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8006a58:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8006a5c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8006a60:	ee06 1a10 	vmov	s12, r1
 8006a64:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8006a68:	ee14 ca90 	vmov	ip, s9
 8006a6c:	ea02 0c0c 	and.w	ip, r2, ip
 8006a70:	ee05 ca10 	vmov	s10, ip
 8006a74:	eeb1 4a45 	vneg.f32	s8, s10
 8006a78:	eee4 5a06 	vfma.f32	s11, s8, s12
 8006a7c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8006a80:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8006bb0 <__ieee754_powf+0x3dc>
 8006a84:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8006a88:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8006a8c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8006a90:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8006a94:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8006a98:	eddf 5a46 	vldr	s11, [pc, #280]	; 8006bb4 <__ieee754_powf+0x3e0>
 8006a9c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8006aa0:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006bb8 <__ieee754_powf+0x3e4>
 8006aa4:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006aa8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8006b8c <__ieee754_powf+0x3b8>
 8006aac:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006ab0:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006bbc <__ieee754_powf+0x3e8>
 8006ab4:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006ab8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8006bc0 <__ieee754_powf+0x3ec>
 8006abc:	ee75 6a24 	vadd.f32	s13, s10, s9
 8006ac0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006ac4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006ac8:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8006acc:	eef0 7a65 	vmov.f32	s15, s11
 8006ad0:	eee3 6a87 	vfma.f32	s13, s7, s14
 8006ad4:	eee5 7a05 	vfma.f32	s15, s10, s10
 8006ad8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006adc:	ee17 1a90 	vmov	r1, s15
 8006ae0:	4011      	ands	r1, r2
 8006ae2:	ee07 1a90 	vmov	s15, r1
 8006ae6:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8006aea:	eddf 5a36 	vldr	s11, [pc, #216]	; 8006bc4 <__ieee754_powf+0x3f0>
 8006aee:	eea4 7a05 	vfma.f32	s14, s8, s10
 8006af2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006af6:	ee27 7a24 	vmul.f32	s14, s14, s9
 8006afa:	eea7 7a86 	vfma.f32	s14, s15, s12
 8006afe:	eeb0 6a47 	vmov.f32	s12, s14
 8006b02:	eea5 6a27 	vfma.f32	s12, s10, s15
 8006b06:	ee16 1a10 	vmov	r1, s12
 8006b0a:	4011      	ands	r1, r2
 8006b0c:	ee06 1a90 	vmov	s13, r1
 8006b10:	eee4 6a27 	vfma.f32	s13, s8, s15
 8006b14:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8006bc8 <__ieee754_powf+0x3f4>
 8006b18:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006b1c:	ee06 1a10 	vmov	s12, r1
 8006b20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b24:	eddf 7a29 	vldr	s15, [pc, #164]	; 8006bcc <__ieee754_powf+0x3f8>
 8006b28:	4929      	ldr	r1, [pc, #164]	; (8006bd0 <__ieee754_powf+0x3fc>)
 8006b2a:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006b2e:	4439      	add	r1, r7
 8006b30:	edd1 7a00 	vldr	s15, [r1]
 8006b34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006b38:	ee07 3a90 	vmov	s15, r3
 8006b3c:	eef0 0a47 	vmov.f32	s1, s14
 8006b40:	4b24      	ldr	r3, [pc, #144]	; (8006bd4 <__ieee754_powf+0x400>)
 8006b42:	eee6 0a25 	vfma.f32	s1, s12, s11
 8006b46:	443b      	add	r3, r7
 8006b48:	ed93 5a00 	vldr	s10, [r3]
 8006b4c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006b50:	ee70 0a85 	vadd.f32	s1, s1, s10
 8006b54:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8006b58:	ee17 3a90 	vmov	r3, s15
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006b66:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006b6a:	eee6 7a65 	vfms.f32	s15, s12, s11
 8006b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b72:	e70e      	b.n	8006992 <__ieee754_powf+0x1be>
 8006b74:	2401      	movs	r4, #1
 8006b76:	e75c      	b.n	8006a32 <__ieee754_powf+0x25e>
 8006b78:	08007489 	.word	0x08007489
 8006b7c:	00000000 	.word	0x00000000
 8006b80:	3f7ffff7 	.word	0x3f7ffff7
 8006b84:	7149f2ca 	.word	0x7149f2ca
 8006b88:	3f800007 	.word	0x3f800007
 8006b8c:	3eaaaaab 	.word	0x3eaaaaab
 8006b90:	36eca570 	.word	0x36eca570
 8006b94:	3fb8aa3b 	.word	0x3fb8aa3b
 8006b98:	3fb8aa00 	.word	0x3fb8aa00
 8006b9c:	4b800000 	.word	0x4b800000
 8006ba0:	001cc471 	.word	0x001cc471
 8006ba4:	005db3d6 	.word	0x005db3d6
 8006ba8:	08007460 	.word	0x08007460
 8006bac:	fffff000 	.word	0xfffff000
 8006bb0:	3e6c3255 	.word	0x3e6c3255
 8006bb4:	3e53f142 	.word	0x3e53f142
 8006bb8:	3e8ba305 	.word	0x3e8ba305
 8006bbc:	3edb6db7 	.word	0x3edb6db7
 8006bc0:	3f19999a 	.word	0x3f19999a
 8006bc4:	3f763800 	.word	0x3f763800
 8006bc8:	3f76384f 	.word	0x3f76384f
 8006bcc:	369dc3a0 	.word	0x369dc3a0
 8006bd0:	08007470 	.word	0x08007470
 8006bd4:	08007468 	.word	0x08007468
 8006bd8:	3338aa3c 	.word	0x3338aa3c
 8006bdc:	f040 8092 	bne.w	8006d04 <__ieee754_powf+0x530>
 8006be0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8006bd8 <__ieee754_powf+0x404>
 8006be4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006be8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8006bec:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf4:	f73f aef6 	bgt.w	80069e4 <__ieee754_powf+0x210>
 8006bf8:	15db      	asrs	r3, r3, #23
 8006bfa:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8006bfe:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006c02:	4103      	asrs	r3, r0
 8006c04:	4423      	add	r3, r4
 8006c06:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006c0a:	4947      	ldr	r1, [pc, #284]	; (8006d28 <__ieee754_powf+0x554>)
 8006c0c:	3a7f      	subs	r2, #127	; 0x7f
 8006c0e:	4111      	asrs	r1, r2
 8006c10:	ea23 0101 	bic.w	r1, r3, r1
 8006c14:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006c18:	ee07 1a10 	vmov	s14, r1
 8006c1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006c20:	f1c2 0217 	rsb	r2, r2, #23
 8006c24:	4110      	asrs	r0, r2
 8006c26:	2c00      	cmp	r4, #0
 8006c28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006c2c:	bfb8      	it	lt
 8006c2e:	4240      	neglt	r0, r0
 8006c30:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8006c34:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006d2c <__ieee754_powf+0x558>
 8006c38:	ee17 3a10 	vmov	r3, s14
 8006c3c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006c40:	f023 030f 	bic.w	r3, r3, #15
 8006c44:	ee07 3a10 	vmov	s14, r3
 8006c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c4c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8006c50:	eddf 7a37 	vldr	s15, [pc, #220]	; 8006d30 <__ieee754_powf+0x55c>
 8006c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c58:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8006c5c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8006d34 <__ieee754_powf+0x560>
 8006c60:	eeb0 0a67 	vmov.f32	s0, s15
 8006c64:	eea7 0a26 	vfma.f32	s0, s14, s13
 8006c68:	eeb0 6a40 	vmov.f32	s12, s0
 8006c6c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8006c70:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006c74:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006c78:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8006d38 <__ieee754_powf+0x564>
 8006c7c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8006d3c <__ieee754_powf+0x568>
 8006c80:	eea7 6a26 	vfma.f32	s12, s14, s13
 8006c84:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8006d40 <__ieee754_powf+0x56c>
 8006c88:	eee6 6a07 	vfma.f32	s13, s12, s14
 8006c8c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8006d44 <__ieee754_powf+0x570>
 8006c90:	eea6 6a87 	vfma.f32	s12, s13, s14
 8006c94:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8006d48 <__ieee754_powf+0x574>
 8006c98:	eee6 6a07 	vfma.f32	s13, s12, s14
 8006c9c:	eeb0 6a40 	vmov.f32	s12, s0
 8006ca0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8006ca4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006ca8:	eeb0 7a46 	vmov.f32	s14, s12
 8006cac:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006cb0:	ee20 6a06 	vmul.f32	s12, s0, s12
 8006cb4:	eee0 7a27 	vfma.f32	s15, s0, s15
 8006cb8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cc0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006cc4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006cc8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006ccc:	ee10 3a10 	vmov	r3, s0
 8006cd0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8006cd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cd8:	da1a      	bge.n	8006d10 <__ieee754_powf+0x53c>
 8006cda:	f000 f8b1 	bl	8006e40 <scalbnf>
 8006cde:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006ce2:	e5c9      	b.n	8006878 <__ieee754_powf+0xa4>
 8006ce4:	4a19      	ldr	r2, [pc, #100]	; (8006d4c <__ieee754_powf+0x578>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	dd02      	ble.n	8006cf0 <__ieee754_powf+0x51c>
 8006cea:	eddf 7a19 	vldr	s15, [pc, #100]	; 8006d50 <__ieee754_powf+0x57c>
 8006cee:	e67b      	b.n	80069e8 <__ieee754_powf+0x214>
 8006cf0:	d108      	bne.n	8006d04 <__ieee754_powf+0x530>
 8006cf2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006cf6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8006cfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cfe:	f6ff af7b 	blt.w	8006bf8 <__ieee754_powf+0x424>
 8006d02:	e7f2      	b.n	8006cea <__ieee754_powf+0x516>
 8006d04:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8006d08:	f73f af76 	bgt.w	8006bf8 <__ieee754_powf+0x424>
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	e78f      	b.n	8006c30 <__ieee754_powf+0x45c>
 8006d10:	ee00 3a10 	vmov	s0, r3
 8006d14:	e7e3      	b.n	8006cde <__ieee754_powf+0x50a>
 8006d16:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006d1a:	e5ad      	b.n	8006878 <__ieee754_powf+0xa4>
 8006d1c:	eeb0 0a68 	vmov.f32	s0, s17
 8006d20:	e5aa      	b.n	8006878 <__ieee754_powf+0xa4>
 8006d22:	eeb0 0a48 	vmov.f32	s0, s16
 8006d26:	e5a7      	b.n	8006878 <__ieee754_powf+0xa4>
 8006d28:	007fffff 	.word	0x007fffff
 8006d2c:	3f317218 	.word	0x3f317218
 8006d30:	35bfbe8c 	.word	0x35bfbe8c
 8006d34:	3f317200 	.word	0x3f317200
 8006d38:	3331bb4c 	.word	0x3331bb4c
 8006d3c:	b5ddea0e 	.word	0xb5ddea0e
 8006d40:	388ab355 	.word	0x388ab355
 8006d44:	bb360b61 	.word	0xbb360b61
 8006d48:	3e2aaaab 	.word	0x3e2aaaab
 8006d4c:	43160000 	.word	0x43160000
 8006d50:	0da24260 	.word	0x0da24260

08006d54 <__ieee754_sqrtf>:
 8006d54:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006d58:	4770      	bx	lr

08006d5a <matherr>:
 8006d5a:	2000      	movs	r0, #0
 8006d5c:	4770      	bx	lr

08006d5e <fabsf>:
 8006d5e:	ee10 3a10 	vmov	r3, s0
 8006d62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d66:	ee00 3a10 	vmov	s0, r3
 8006d6a:	4770      	bx	lr

08006d6c <finitef>:
 8006d6c:	ee10 3a10 	vmov	r3, s0
 8006d70:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8006d74:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006d78:	bfac      	ite	ge
 8006d7a:	2000      	movge	r0, #0
 8006d7c:	2001      	movlt	r0, #1
 8006d7e:	4770      	bx	lr

08006d80 <nanf>:
 8006d80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006d88 <nanf+0x8>
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	7fc00000 	.word	0x7fc00000

08006d8c <rintf>:
 8006d8c:	b513      	push	{r0, r1, r4, lr}
 8006d8e:	ee10 1a10 	vmov	r1, s0
 8006d92:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006d96:	0ddc      	lsrs	r4, r3, #23
 8006d98:	3c7f      	subs	r4, #127	; 0x7f
 8006d9a:	2c16      	cmp	r4, #22
 8006d9c:	dc46      	bgt.n	8006e2c <rintf+0xa0>
 8006d9e:	b32b      	cbz	r3, 8006dec <rintf+0x60>
 8006da0:	2c00      	cmp	r4, #0
 8006da2:	ee10 2a10 	vmov	r2, s0
 8006da6:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8006daa:	da21      	bge.n	8006df0 <rintf+0x64>
 8006dac:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8006db0:	425b      	negs	r3, r3
 8006db2:	4a21      	ldr	r2, [pc, #132]	; (8006e38 <rintf+0xac>)
 8006db4:	0a5b      	lsrs	r3, r3, #9
 8006db6:	0d09      	lsrs	r1, r1, #20
 8006db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dbc:	0509      	lsls	r1, r1, #20
 8006dbe:	430b      	orrs	r3, r1
 8006dc0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8006dc4:	ee07 3a90 	vmov	s15, r3
 8006dc8:	edd2 6a00 	vldr	s13, [r2]
 8006dcc:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8006dd0:	ed8d 7a01 	vstr	s14, [sp, #4]
 8006dd4:	eddd 7a01 	vldr	s15, [sp, #4]
 8006dd8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ddc:	ee17 3a90 	vmov	r3, s15
 8006de0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006de4:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8006de8:	ee00 3a10 	vmov	s0, r3
 8006dec:	b002      	add	sp, #8
 8006dee:	bd10      	pop	{r4, pc}
 8006df0:	4b12      	ldr	r3, [pc, #72]	; (8006e3c <rintf+0xb0>)
 8006df2:	4123      	asrs	r3, r4
 8006df4:	4219      	tst	r1, r3
 8006df6:	d0f9      	beq.n	8006dec <rintf+0x60>
 8006df8:	085b      	lsrs	r3, r3, #1
 8006dfa:	4219      	tst	r1, r3
 8006dfc:	d006      	beq.n	8006e0c <rintf+0x80>
 8006dfe:	ea21 0203 	bic.w	r2, r1, r3
 8006e02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006e06:	fa43 f404 	asr.w	r4, r3, r4
 8006e0a:	4322      	orrs	r2, r4
 8006e0c:	4b0a      	ldr	r3, [pc, #40]	; (8006e38 <rintf+0xac>)
 8006e0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006e12:	ed90 7a00 	vldr	s14, [r0]
 8006e16:	ee07 2a90 	vmov	s15, r2
 8006e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e1e:	edcd 7a01 	vstr	s15, [sp, #4]
 8006e22:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006e26:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006e2a:	e7df      	b.n	8006dec <rintf+0x60>
 8006e2c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006e30:	d3dc      	bcc.n	8006dec <rintf+0x60>
 8006e32:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006e36:	e7d9      	b.n	8006dec <rintf+0x60>
 8006e38:	08007478 	.word	0x08007478
 8006e3c:	007fffff 	.word	0x007fffff

08006e40 <scalbnf>:
 8006e40:	b508      	push	{r3, lr}
 8006e42:	ee10 2a10 	vmov	r2, s0
 8006e46:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8006e4a:	ed2d 8b02 	vpush	{d8}
 8006e4e:	eef0 0a40 	vmov.f32	s1, s0
 8006e52:	d004      	beq.n	8006e5e <scalbnf+0x1e>
 8006e54:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006e58:	d306      	bcc.n	8006e68 <scalbnf+0x28>
 8006e5a:	ee70 0a00 	vadd.f32	s1, s0, s0
 8006e5e:	ecbd 8b02 	vpop	{d8}
 8006e62:	eeb0 0a60 	vmov.f32	s0, s1
 8006e66:	bd08      	pop	{r3, pc}
 8006e68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e6c:	d21c      	bcs.n	8006ea8 <scalbnf+0x68>
 8006e6e:	4b1f      	ldr	r3, [pc, #124]	; (8006eec <scalbnf+0xac>)
 8006e70:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006ef0 <scalbnf+0xb0>
 8006e74:	4298      	cmp	r0, r3
 8006e76:	ee60 0a27 	vmul.f32	s1, s0, s15
 8006e7a:	db10      	blt.n	8006e9e <scalbnf+0x5e>
 8006e7c:	ee10 2a90 	vmov	r2, s1
 8006e80:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8006e84:	3b19      	subs	r3, #25
 8006e86:	4403      	add	r3, r0
 8006e88:	2bfe      	cmp	r3, #254	; 0xfe
 8006e8a:	dd0f      	ble.n	8006eac <scalbnf+0x6c>
 8006e8c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8006ef4 <scalbnf+0xb4>
 8006e90:	eeb0 0a48 	vmov.f32	s0, s16
 8006e94:	f000 f834 	bl	8006f00 <copysignf>
 8006e98:	ee60 0a08 	vmul.f32	s1, s0, s16
 8006e9c:	e7df      	b.n	8006e5e <scalbnf+0x1e>
 8006e9e:	eddf 7a16 	vldr	s15, [pc, #88]	; 8006ef8 <scalbnf+0xb8>
 8006ea2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8006ea6:	e7da      	b.n	8006e5e <scalbnf+0x1e>
 8006ea8:	0ddb      	lsrs	r3, r3, #23
 8006eaa:	e7ec      	b.n	8006e86 <scalbnf+0x46>
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	dd06      	ble.n	8006ebe <scalbnf+0x7e>
 8006eb0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8006eb4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8006eb8:	ee00 3a90 	vmov	s1, r3
 8006ebc:	e7cf      	b.n	8006e5e <scalbnf+0x1e>
 8006ebe:	f113 0f16 	cmn.w	r3, #22
 8006ec2:	da06      	bge.n	8006ed2 <scalbnf+0x92>
 8006ec4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006ec8:	4298      	cmp	r0, r3
 8006eca:	dcdf      	bgt.n	8006e8c <scalbnf+0x4c>
 8006ecc:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8006ef8 <scalbnf+0xb8>
 8006ed0:	e7de      	b.n	8006e90 <scalbnf+0x50>
 8006ed2:	3319      	adds	r3, #25
 8006ed4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8006ed8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8006edc:	eddf 7a07 	vldr	s15, [pc, #28]	; 8006efc <scalbnf+0xbc>
 8006ee0:	ee07 3a10 	vmov	s14, r3
 8006ee4:	ee67 0a27 	vmul.f32	s1, s14, s15
 8006ee8:	e7b9      	b.n	8006e5e <scalbnf+0x1e>
 8006eea:	bf00      	nop
 8006eec:	ffff3cb0 	.word	0xffff3cb0
 8006ef0:	4c000000 	.word	0x4c000000
 8006ef4:	7149f2ca 	.word	0x7149f2ca
 8006ef8:	0da24260 	.word	0x0da24260
 8006efc:	33000000 	.word	0x33000000

08006f00 <copysignf>:
 8006f00:	ee10 3a10 	vmov	r3, s0
 8006f04:	ee10 2a90 	vmov	r2, s1
 8006f08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f0c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006f10:	4313      	orrs	r3, r2
 8006f12:	ee00 3a10 	vmov	s0, r3
 8006f16:	4770      	bx	lr

08006f18 <abort>:
 8006f18:	b508      	push	{r3, lr}
 8006f1a:	2006      	movs	r0, #6
 8006f1c:	f000 f92a 	bl	8007174 <raise>
 8006f20:	2001      	movs	r0, #1
 8006f22:	f7fa fdd5 	bl	8001ad0 <_exit>

08006f26 <atoi>:
 8006f26:	220a      	movs	r2, #10
 8006f28:	2100      	movs	r1, #0
 8006f2a:	f000 b9bb 	b.w	80072a4 <strtol>
	...

08006f30 <__errno>:
 8006f30:	4b01      	ldr	r3, [pc, #4]	; (8006f38 <__errno+0x8>)
 8006f32:	6818      	ldr	r0, [r3, #0]
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	20000014 	.word	0x20000014

08006f3c <__libc_init_array>:
 8006f3c:	b570      	push	{r4, r5, r6, lr}
 8006f3e:	4e0d      	ldr	r6, [pc, #52]	; (8006f74 <__libc_init_array+0x38>)
 8006f40:	4c0d      	ldr	r4, [pc, #52]	; (8006f78 <__libc_init_array+0x3c>)
 8006f42:	1ba4      	subs	r4, r4, r6
 8006f44:	10a4      	asrs	r4, r4, #2
 8006f46:	2500      	movs	r5, #0
 8006f48:	42a5      	cmp	r5, r4
 8006f4a:	d109      	bne.n	8006f60 <__libc_init_array+0x24>
 8006f4c:	4e0b      	ldr	r6, [pc, #44]	; (8006f7c <__libc_init_array+0x40>)
 8006f4e:	4c0c      	ldr	r4, [pc, #48]	; (8006f80 <__libc_init_array+0x44>)
 8006f50:	f000 f9e2 	bl	8007318 <_init>
 8006f54:	1ba4      	subs	r4, r4, r6
 8006f56:	10a4      	asrs	r4, r4, #2
 8006f58:	2500      	movs	r5, #0
 8006f5a:	42a5      	cmp	r5, r4
 8006f5c:	d105      	bne.n	8006f6a <__libc_init_array+0x2e>
 8006f5e:	bd70      	pop	{r4, r5, r6, pc}
 8006f60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f64:	4798      	blx	r3
 8006f66:	3501      	adds	r5, #1
 8006f68:	e7ee      	b.n	8006f48 <__libc_init_array+0xc>
 8006f6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f6e:	4798      	blx	r3
 8006f70:	3501      	adds	r5, #1
 8006f72:	e7f2      	b.n	8006f5a <__libc_init_array+0x1e>
 8006f74:	0800758c 	.word	0x0800758c
 8006f78:	0800758c 	.word	0x0800758c
 8006f7c:	0800758c 	.word	0x0800758c
 8006f80:	08007590 	.word	0x08007590

08006f84 <malloc>:
 8006f84:	4b02      	ldr	r3, [pc, #8]	; (8006f90 <malloc+0xc>)
 8006f86:	4601      	mov	r1, r0
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	f000 b861 	b.w	8007050 <_malloc_r>
 8006f8e:	bf00      	nop
 8006f90:	20000014 	.word	0x20000014

08006f94 <free>:
 8006f94:	4b02      	ldr	r3, [pc, #8]	; (8006fa0 <free+0xc>)
 8006f96:	4601      	mov	r1, r0
 8006f98:	6818      	ldr	r0, [r3, #0]
 8006f9a:	f000 b80b 	b.w	8006fb4 <_free_r>
 8006f9e:	bf00      	nop
 8006fa0:	20000014 	.word	0x20000014

08006fa4 <memset>:
 8006fa4:	4402      	add	r2, r0
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d100      	bne.n	8006fae <memset+0xa>
 8006fac:	4770      	bx	lr
 8006fae:	f803 1b01 	strb.w	r1, [r3], #1
 8006fb2:	e7f9      	b.n	8006fa8 <memset+0x4>

08006fb4 <_free_r>:
 8006fb4:	b538      	push	{r3, r4, r5, lr}
 8006fb6:	4605      	mov	r5, r0
 8006fb8:	2900      	cmp	r1, #0
 8006fba:	d045      	beq.n	8007048 <_free_r+0x94>
 8006fbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fc0:	1f0c      	subs	r4, r1, #4
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	bfb8      	it	lt
 8006fc6:	18e4      	addlt	r4, r4, r3
 8006fc8:	f000 f997 	bl	80072fa <__malloc_lock>
 8006fcc:	4a1f      	ldr	r2, [pc, #124]	; (800704c <_free_r+0x98>)
 8006fce:	6813      	ldr	r3, [r2, #0]
 8006fd0:	4610      	mov	r0, r2
 8006fd2:	b933      	cbnz	r3, 8006fe2 <_free_r+0x2e>
 8006fd4:	6063      	str	r3, [r4, #4]
 8006fd6:	6014      	str	r4, [r2, #0]
 8006fd8:	4628      	mov	r0, r5
 8006fda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fde:	f000 b98d 	b.w	80072fc <__malloc_unlock>
 8006fe2:	42a3      	cmp	r3, r4
 8006fe4:	d90c      	bls.n	8007000 <_free_r+0x4c>
 8006fe6:	6821      	ldr	r1, [r4, #0]
 8006fe8:	1862      	adds	r2, r4, r1
 8006fea:	4293      	cmp	r3, r2
 8006fec:	bf04      	itt	eq
 8006fee:	681a      	ldreq	r2, [r3, #0]
 8006ff0:	685b      	ldreq	r3, [r3, #4]
 8006ff2:	6063      	str	r3, [r4, #4]
 8006ff4:	bf04      	itt	eq
 8006ff6:	1852      	addeq	r2, r2, r1
 8006ff8:	6022      	streq	r2, [r4, #0]
 8006ffa:	6004      	str	r4, [r0, #0]
 8006ffc:	e7ec      	b.n	8006fd8 <_free_r+0x24>
 8006ffe:	4613      	mov	r3, r2
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	b10a      	cbz	r2, 8007008 <_free_r+0x54>
 8007004:	42a2      	cmp	r2, r4
 8007006:	d9fa      	bls.n	8006ffe <_free_r+0x4a>
 8007008:	6819      	ldr	r1, [r3, #0]
 800700a:	1858      	adds	r0, r3, r1
 800700c:	42a0      	cmp	r0, r4
 800700e:	d10b      	bne.n	8007028 <_free_r+0x74>
 8007010:	6820      	ldr	r0, [r4, #0]
 8007012:	4401      	add	r1, r0
 8007014:	1858      	adds	r0, r3, r1
 8007016:	4282      	cmp	r2, r0
 8007018:	6019      	str	r1, [r3, #0]
 800701a:	d1dd      	bne.n	8006fd8 <_free_r+0x24>
 800701c:	6810      	ldr	r0, [r2, #0]
 800701e:	6852      	ldr	r2, [r2, #4]
 8007020:	605a      	str	r2, [r3, #4]
 8007022:	4401      	add	r1, r0
 8007024:	6019      	str	r1, [r3, #0]
 8007026:	e7d7      	b.n	8006fd8 <_free_r+0x24>
 8007028:	d902      	bls.n	8007030 <_free_r+0x7c>
 800702a:	230c      	movs	r3, #12
 800702c:	602b      	str	r3, [r5, #0]
 800702e:	e7d3      	b.n	8006fd8 <_free_r+0x24>
 8007030:	6820      	ldr	r0, [r4, #0]
 8007032:	1821      	adds	r1, r4, r0
 8007034:	428a      	cmp	r2, r1
 8007036:	bf04      	itt	eq
 8007038:	6811      	ldreq	r1, [r2, #0]
 800703a:	6852      	ldreq	r2, [r2, #4]
 800703c:	6062      	str	r2, [r4, #4]
 800703e:	bf04      	itt	eq
 8007040:	1809      	addeq	r1, r1, r0
 8007042:	6021      	streq	r1, [r4, #0]
 8007044:	605c      	str	r4, [r3, #4]
 8007046:	e7c7      	b.n	8006fd8 <_free_r+0x24>
 8007048:	bd38      	pop	{r3, r4, r5, pc}
 800704a:	bf00      	nop
 800704c:	200011b0 	.word	0x200011b0

08007050 <_malloc_r>:
 8007050:	b570      	push	{r4, r5, r6, lr}
 8007052:	1ccd      	adds	r5, r1, #3
 8007054:	f025 0503 	bic.w	r5, r5, #3
 8007058:	3508      	adds	r5, #8
 800705a:	2d0c      	cmp	r5, #12
 800705c:	bf38      	it	cc
 800705e:	250c      	movcc	r5, #12
 8007060:	2d00      	cmp	r5, #0
 8007062:	4606      	mov	r6, r0
 8007064:	db01      	blt.n	800706a <_malloc_r+0x1a>
 8007066:	42a9      	cmp	r1, r5
 8007068:	d903      	bls.n	8007072 <_malloc_r+0x22>
 800706a:	230c      	movs	r3, #12
 800706c:	6033      	str	r3, [r6, #0]
 800706e:	2000      	movs	r0, #0
 8007070:	bd70      	pop	{r4, r5, r6, pc}
 8007072:	f000 f942 	bl	80072fa <__malloc_lock>
 8007076:	4a21      	ldr	r2, [pc, #132]	; (80070fc <_malloc_r+0xac>)
 8007078:	6814      	ldr	r4, [r2, #0]
 800707a:	4621      	mov	r1, r4
 800707c:	b991      	cbnz	r1, 80070a4 <_malloc_r+0x54>
 800707e:	4c20      	ldr	r4, [pc, #128]	; (8007100 <_malloc_r+0xb0>)
 8007080:	6823      	ldr	r3, [r4, #0]
 8007082:	b91b      	cbnz	r3, 800708c <_malloc_r+0x3c>
 8007084:	4630      	mov	r0, r6
 8007086:	f000 f83d 	bl	8007104 <_sbrk_r>
 800708a:	6020      	str	r0, [r4, #0]
 800708c:	4629      	mov	r1, r5
 800708e:	4630      	mov	r0, r6
 8007090:	f000 f838 	bl	8007104 <_sbrk_r>
 8007094:	1c43      	adds	r3, r0, #1
 8007096:	d124      	bne.n	80070e2 <_malloc_r+0x92>
 8007098:	230c      	movs	r3, #12
 800709a:	6033      	str	r3, [r6, #0]
 800709c:	4630      	mov	r0, r6
 800709e:	f000 f92d 	bl	80072fc <__malloc_unlock>
 80070a2:	e7e4      	b.n	800706e <_malloc_r+0x1e>
 80070a4:	680b      	ldr	r3, [r1, #0]
 80070a6:	1b5b      	subs	r3, r3, r5
 80070a8:	d418      	bmi.n	80070dc <_malloc_r+0x8c>
 80070aa:	2b0b      	cmp	r3, #11
 80070ac:	d90f      	bls.n	80070ce <_malloc_r+0x7e>
 80070ae:	600b      	str	r3, [r1, #0]
 80070b0:	50cd      	str	r5, [r1, r3]
 80070b2:	18cc      	adds	r4, r1, r3
 80070b4:	4630      	mov	r0, r6
 80070b6:	f000 f921 	bl	80072fc <__malloc_unlock>
 80070ba:	f104 000b 	add.w	r0, r4, #11
 80070be:	1d23      	adds	r3, r4, #4
 80070c0:	f020 0007 	bic.w	r0, r0, #7
 80070c4:	1ac3      	subs	r3, r0, r3
 80070c6:	d0d3      	beq.n	8007070 <_malloc_r+0x20>
 80070c8:	425a      	negs	r2, r3
 80070ca:	50e2      	str	r2, [r4, r3]
 80070cc:	e7d0      	b.n	8007070 <_malloc_r+0x20>
 80070ce:	428c      	cmp	r4, r1
 80070d0:	684b      	ldr	r3, [r1, #4]
 80070d2:	bf16      	itet	ne
 80070d4:	6063      	strne	r3, [r4, #4]
 80070d6:	6013      	streq	r3, [r2, #0]
 80070d8:	460c      	movne	r4, r1
 80070da:	e7eb      	b.n	80070b4 <_malloc_r+0x64>
 80070dc:	460c      	mov	r4, r1
 80070de:	6849      	ldr	r1, [r1, #4]
 80070e0:	e7cc      	b.n	800707c <_malloc_r+0x2c>
 80070e2:	1cc4      	adds	r4, r0, #3
 80070e4:	f024 0403 	bic.w	r4, r4, #3
 80070e8:	42a0      	cmp	r0, r4
 80070ea:	d005      	beq.n	80070f8 <_malloc_r+0xa8>
 80070ec:	1a21      	subs	r1, r4, r0
 80070ee:	4630      	mov	r0, r6
 80070f0:	f000 f808 	bl	8007104 <_sbrk_r>
 80070f4:	3001      	adds	r0, #1
 80070f6:	d0cf      	beq.n	8007098 <_malloc_r+0x48>
 80070f8:	6025      	str	r5, [r4, #0]
 80070fa:	e7db      	b.n	80070b4 <_malloc_r+0x64>
 80070fc:	200011b0 	.word	0x200011b0
 8007100:	200011b4 	.word	0x200011b4

08007104 <_sbrk_r>:
 8007104:	b538      	push	{r3, r4, r5, lr}
 8007106:	4c06      	ldr	r4, [pc, #24]	; (8007120 <_sbrk_r+0x1c>)
 8007108:	2300      	movs	r3, #0
 800710a:	4605      	mov	r5, r0
 800710c:	4608      	mov	r0, r1
 800710e:	6023      	str	r3, [r4, #0]
 8007110:	f7fa fce8 	bl	8001ae4 <_sbrk>
 8007114:	1c43      	adds	r3, r0, #1
 8007116:	d102      	bne.n	800711e <_sbrk_r+0x1a>
 8007118:	6823      	ldr	r3, [r4, #0]
 800711a:	b103      	cbz	r3, 800711e <_sbrk_r+0x1a>
 800711c:	602b      	str	r3, [r5, #0]
 800711e:	bd38      	pop	{r3, r4, r5, pc}
 8007120:	20001254 	.word	0x20001254

08007124 <_raise_r>:
 8007124:	291f      	cmp	r1, #31
 8007126:	b538      	push	{r3, r4, r5, lr}
 8007128:	4604      	mov	r4, r0
 800712a:	460d      	mov	r5, r1
 800712c:	d904      	bls.n	8007138 <_raise_r+0x14>
 800712e:	2316      	movs	r3, #22
 8007130:	6003      	str	r3, [r0, #0]
 8007132:	f04f 30ff 	mov.w	r0, #4294967295
 8007136:	bd38      	pop	{r3, r4, r5, pc}
 8007138:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800713a:	b112      	cbz	r2, 8007142 <_raise_r+0x1e>
 800713c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007140:	b94b      	cbnz	r3, 8007156 <_raise_r+0x32>
 8007142:	4620      	mov	r0, r4
 8007144:	f000 f830 	bl	80071a8 <_getpid_r>
 8007148:	462a      	mov	r2, r5
 800714a:	4601      	mov	r1, r0
 800714c:	4620      	mov	r0, r4
 800714e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007152:	f000 b817 	b.w	8007184 <_kill_r>
 8007156:	2b01      	cmp	r3, #1
 8007158:	d00a      	beq.n	8007170 <_raise_r+0x4c>
 800715a:	1c59      	adds	r1, r3, #1
 800715c:	d103      	bne.n	8007166 <_raise_r+0x42>
 800715e:	2316      	movs	r3, #22
 8007160:	6003      	str	r3, [r0, #0]
 8007162:	2001      	movs	r0, #1
 8007164:	e7e7      	b.n	8007136 <_raise_r+0x12>
 8007166:	2400      	movs	r4, #0
 8007168:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800716c:	4628      	mov	r0, r5
 800716e:	4798      	blx	r3
 8007170:	2000      	movs	r0, #0
 8007172:	e7e0      	b.n	8007136 <_raise_r+0x12>

08007174 <raise>:
 8007174:	4b02      	ldr	r3, [pc, #8]	; (8007180 <raise+0xc>)
 8007176:	4601      	mov	r1, r0
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	f7ff bfd3 	b.w	8007124 <_raise_r>
 800717e:	bf00      	nop
 8007180:	20000014 	.word	0x20000014

08007184 <_kill_r>:
 8007184:	b538      	push	{r3, r4, r5, lr}
 8007186:	4c07      	ldr	r4, [pc, #28]	; (80071a4 <_kill_r+0x20>)
 8007188:	2300      	movs	r3, #0
 800718a:	4605      	mov	r5, r0
 800718c:	4608      	mov	r0, r1
 800718e:	4611      	mov	r1, r2
 8007190:	6023      	str	r3, [r4, #0]
 8007192:	f7fa fc8d 	bl	8001ab0 <_kill>
 8007196:	1c43      	adds	r3, r0, #1
 8007198:	d102      	bne.n	80071a0 <_kill_r+0x1c>
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	b103      	cbz	r3, 80071a0 <_kill_r+0x1c>
 800719e:	602b      	str	r3, [r5, #0]
 80071a0:	bd38      	pop	{r3, r4, r5, pc}
 80071a2:	bf00      	nop
 80071a4:	20001254 	.word	0x20001254

080071a8 <_getpid_r>:
 80071a8:	f7fa bc7a 	b.w	8001aa0 <_getpid>

080071ac <_strtol_l.isra.0>:
 80071ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071b0:	4680      	mov	r8, r0
 80071b2:	4689      	mov	r9, r1
 80071b4:	4692      	mov	sl, r2
 80071b6:	461e      	mov	r6, r3
 80071b8:	460f      	mov	r7, r1
 80071ba:	463d      	mov	r5, r7
 80071bc:	9808      	ldr	r0, [sp, #32]
 80071be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071c2:	f000 f885 	bl	80072d0 <__locale_ctype_ptr_l>
 80071c6:	4420      	add	r0, r4
 80071c8:	7843      	ldrb	r3, [r0, #1]
 80071ca:	f013 0308 	ands.w	r3, r3, #8
 80071ce:	d132      	bne.n	8007236 <_strtol_l.isra.0+0x8a>
 80071d0:	2c2d      	cmp	r4, #45	; 0x2d
 80071d2:	d132      	bne.n	800723a <_strtol_l.isra.0+0x8e>
 80071d4:	787c      	ldrb	r4, [r7, #1]
 80071d6:	1cbd      	adds	r5, r7, #2
 80071d8:	2201      	movs	r2, #1
 80071da:	2e00      	cmp	r6, #0
 80071dc:	d05d      	beq.n	800729a <_strtol_l.isra.0+0xee>
 80071de:	2e10      	cmp	r6, #16
 80071e0:	d109      	bne.n	80071f6 <_strtol_l.isra.0+0x4a>
 80071e2:	2c30      	cmp	r4, #48	; 0x30
 80071e4:	d107      	bne.n	80071f6 <_strtol_l.isra.0+0x4a>
 80071e6:	782b      	ldrb	r3, [r5, #0]
 80071e8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80071ec:	2b58      	cmp	r3, #88	; 0x58
 80071ee:	d14f      	bne.n	8007290 <_strtol_l.isra.0+0xe4>
 80071f0:	786c      	ldrb	r4, [r5, #1]
 80071f2:	2610      	movs	r6, #16
 80071f4:	3502      	adds	r5, #2
 80071f6:	2a00      	cmp	r2, #0
 80071f8:	bf14      	ite	ne
 80071fa:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80071fe:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007202:	2700      	movs	r7, #0
 8007204:	fbb1 fcf6 	udiv	ip, r1, r6
 8007208:	4638      	mov	r0, r7
 800720a:	fb06 1e1c 	mls	lr, r6, ip, r1
 800720e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007212:	2b09      	cmp	r3, #9
 8007214:	d817      	bhi.n	8007246 <_strtol_l.isra.0+0x9a>
 8007216:	461c      	mov	r4, r3
 8007218:	42a6      	cmp	r6, r4
 800721a:	dd23      	ble.n	8007264 <_strtol_l.isra.0+0xb8>
 800721c:	1c7b      	adds	r3, r7, #1
 800721e:	d007      	beq.n	8007230 <_strtol_l.isra.0+0x84>
 8007220:	4584      	cmp	ip, r0
 8007222:	d31c      	bcc.n	800725e <_strtol_l.isra.0+0xb2>
 8007224:	d101      	bne.n	800722a <_strtol_l.isra.0+0x7e>
 8007226:	45a6      	cmp	lr, r4
 8007228:	db19      	blt.n	800725e <_strtol_l.isra.0+0xb2>
 800722a:	fb00 4006 	mla	r0, r0, r6, r4
 800722e:	2701      	movs	r7, #1
 8007230:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007234:	e7eb      	b.n	800720e <_strtol_l.isra.0+0x62>
 8007236:	462f      	mov	r7, r5
 8007238:	e7bf      	b.n	80071ba <_strtol_l.isra.0+0xe>
 800723a:	2c2b      	cmp	r4, #43	; 0x2b
 800723c:	bf04      	itt	eq
 800723e:	1cbd      	addeq	r5, r7, #2
 8007240:	787c      	ldrbeq	r4, [r7, #1]
 8007242:	461a      	mov	r2, r3
 8007244:	e7c9      	b.n	80071da <_strtol_l.isra.0+0x2e>
 8007246:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800724a:	2b19      	cmp	r3, #25
 800724c:	d801      	bhi.n	8007252 <_strtol_l.isra.0+0xa6>
 800724e:	3c37      	subs	r4, #55	; 0x37
 8007250:	e7e2      	b.n	8007218 <_strtol_l.isra.0+0x6c>
 8007252:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007256:	2b19      	cmp	r3, #25
 8007258:	d804      	bhi.n	8007264 <_strtol_l.isra.0+0xb8>
 800725a:	3c57      	subs	r4, #87	; 0x57
 800725c:	e7dc      	b.n	8007218 <_strtol_l.isra.0+0x6c>
 800725e:	f04f 37ff 	mov.w	r7, #4294967295
 8007262:	e7e5      	b.n	8007230 <_strtol_l.isra.0+0x84>
 8007264:	1c7b      	adds	r3, r7, #1
 8007266:	d108      	bne.n	800727a <_strtol_l.isra.0+0xce>
 8007268:	2322      	movs	r3, #34	; 0x22
 800726a:	f8c8 3000 	str.w	r3, [r8]
 800726e:	4608      	mov	r0, r1
 8007270:	f1ba 0f00 	cmp.w	sl, #0
 8007274:	d107      	bne.n	8007286 <_strtol_l.isra.0+0xda>
 8007276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800727a:	b102      	cbz	r2, 800727e <_strtol_l.isra.0+0xd2>
 800727c:	4240      	negs	r0, r0
 800727e:	f1ba 0f00 	cmp.w	sl, #0
 8007282:	d0f8      	beq.n	8007276 <_strtol_l.isra.0+0xca>
 8007284:	b10f      	cbz	r7, 800728a <_strtol_l.isra.0+0xde>
 8007286:	f105 39ff 	add.w	r9, r5, #4294967295
 800728a:	f8ca 9000 	str.w	r9, [sl]
 800728e:	e7f2      	b.n	8007276 <_strtol_l.isra.0+0xca>
 8007290:	2430      	movs	r4, #48	; 0x30
 8007292:	2e00      	cmp	r6, #0
 8007294:	d1af      	bne.n	80071f6 <_strtol_l.isra.0+0x4a>
 8007296:	2608      	movs	r6, #8
 8007298:	e7ad      	b.n	80071f6 <_strtol_l.isra.0+0x4a>
 800729a:	2c30      	cmp	r4, #48	; 0x30
 800729c:	d0a3      	beq.n	80071e6 <_strtol_l.isra.0+0x3a>
 800729e:	260a      	movs	r6, #10
 80072a0:	e7a9      	b.n	80071f6 <_strtol_l.isra.0+0x4a>
	...

080072a4 <strtol>:
 80072a4:	4b08      	ldr	r3, [pc, #32]	; (80072c8 <strtol+0x24>)
 80072a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072a8:	681c      	ldr	r4, [r3, #0]
 80072aa:	4d08      	ldr	r5, [pc, #32]	; (80072cc <strtol+0x28>)
 80072ac:	6a23      	ldr	r3, [r4, #32]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	bf08      	it	eq
 80072b2:	462b      	moveq	r3, r5
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	4613      	mov	r3, r2
 80072b8:	460a      	mov	r2, r1
 80072ba:	4601      	mov	r1, r0
 80072bc:	4620      	mov	r0, r4
 80072be:	f7ff ff75 	bl	80071ac <_strtol_l.isra.0>
 80072c2:	b003      	add	sp, #12
 80072c4:	bd30      	pop	{r4, r5, pc}
 80072c6:	bf00      	nop
 80072c8:	20000014 	.word	0x20000014
 80072cc:	20000078 	.word	0x20000078

080072d0 <__locale_ctype_ptr_l>:
 80072d0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80072d4:	4770      	bx	lr

080072d6 <__ascii_mbtowc>:
 80072d6:	b082      	sub	sp, #8
 80072d8:	b901      	cbnz	r1, 80072dc <__ascii_mbtowc+0x6>
 80072da:	a901      	add	r1, sp, #4
 80072dc:	b142      	cbz	r2, 80072f0 <__ascii_mbtowc+0x1a>
 80072de:	b14b      	cbz	r3, 80072f4 <__ascii_mbtowc+0x1e>
 80072e0:	7813      	ldrb	r3, [r2, #0]
 80072e2:	600b      	str	r3, [r1, #0]
 80072e4:	7812      	ldrb	r2, [r2, #0]
 80072e6:	1c10      	adds	r0, r2, #0
 80072e8:	bf18      	it	ne
 80072ea:	2001      	movne	r0, #1
 80072ec:	b002      	add	sp, #8
 80072ee:	4770      	bx	lr
 80072f0:	4610      	mov	r0, r2
 80072f2:	e7fb      	b.n	80072ec <__ascii_mbtowc+0x16>
 80072f4:	f06f 0001 	mvn.w	r0, #1
 80072f8:	e7f8      	b.n	80072ec <__ascii_mbtowc+0x16>

080072fa <__malloc_lock>:
 80072fa:	4770      	bx	lr

080072fc <__malloc_unlock>:
 80072fc:	4770      	bx	lr

080072fe <__ascii_wctomb>:
 80072fe:	b149      	cbz	r1, 8007314 <__ascii_wctomb+0x16>
 8007300:	2aff      	cmp	r2, #255	; 0xff
 8007302:	bf85      	ittet	hi
 8007304:	238a      	movhi	r3, #138	; 0x8a
 8007306:	6003      	strhi	r3, [r0, #0]
 8007308:	700a      	strbls	r2, [r1, #0]
 800730a:	f04f 30ff 	movhi.w	r0, #4294967295
 800730e:	bf98      	it	ls
 8007310:	2001      	movls	r0, #1
 8007312:	4770      	bx	lr
 8007314:	4608      	mov	r0, r1
 8007316:	4770      	bx	lr

08007318 <_init>:
 8007318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731a:	bf00      	nop
 800731c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800731e:	bc08      	pop	{r3}
 8007320:	469e      	mov	lr, r3
 8007322:	4770      	bx	lr

08007324 <_fini>:
 8007324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007326:	bf00      	nop
 8007328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800732a:	bc08      	pop	{r3}
 800732c:	469e      	mov	lr, r3
 800732e:	4770      	bx	lr
